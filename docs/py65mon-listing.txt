
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Wed Apr 29 09:22:28 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=true					STRING_CR_TO_LF = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$100					zp_size   = $100        ; max bytes allowed in Zero Page, $0000 to $00FF
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$10					RAM_SEGMENT_AST  = $10   ; $1000 to $1FFF Abstract Symbol Tree (AST)
=$20					RAM_SEGMENT_STR  = $20   ; $2000 to $2FFF String Table and strings
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 01		sta $01		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 02		sta $02		                sta output+1
.8009	a9 10		lda #$10	                lda #RAM_SEGMENT_AST    ; AST, default nibble $10
.800b	85 10		sta $10		                sta rsn_ast
.800d	a9 20		lda #$20	                lda #RAM_SEGMENT_STR    ; Strings, default nibble $20
.800f	85 15		sta $15		                sta rsn_str
.8011	a0 02		ldy #$02	                ldy #$02        ; First free byte is one word down
.8013	84 18		sty $18		                sty hp_str
.8015	a5 15		lda $15		                lda rsn_str     ; MSB of RAM segment for strings
.8017	85 19		sta $19		                sta hp_str+1
.8019	85 17		sta $17		                sta strp+1
.801b	64 16		stz $16		                stz strp        ; LSB
.801d	a9 00		lda #$00	                lda #00
.801f	a8		tay		                tay
.8020	92 18		sta ($18)	                sta (hp_str)
.8022	c8		iny		                iny
.8023	91 18		sta ($18),y	                sta (hp_str),y
.8025	a9 21		lda #$21	                lda #<kernel_getc
.8027	85 03		sta $03		                sta input
.8029	a9 f0		lda #$f0	                lda #>kernel_putc
.802b	85 04		sta $04		                sta input+1
.802d					repl:

;******  Processing file: platforms/../reader.asm

.802d					reader:
.802d	64 07		stz $07		                stz input_f
.802f	64 08		stz $08		                stz ciblen
.8031	64 09		stz $09		                stz ciblen+1
.8033	a9 0b		lda #$0b	                lda #str_prompt
.8035	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.8038	a0 00		ldy #$00	                ldy #0
.803a					reader_loop:
.803a	20 fe 85	jsr $85fe	                        jsr help_key_a
.803d	c9 0a		cmp #$0a	                        cmp #AscLF
.803f	f0 3b		beq $807c	                        beq reader_got_eol
.8041	c9 0d		cmp #$0d	                        cmp #AscCR
.8043	f0 37		beq $807c	                        beq reader_got_eol
.8045					_not_an_eol:
.8045					_not_a_parens:
.8045	c9 3b		cmp #$3b	                        cmp #$3B                ; semicolon
.8047	d0 08		bne $8051	                        bne _not_a_comment
.8049	aa		tax		                        tax                     ; Save semicolon char
.804a	a9 80		lda #$80	                        lda #$80                ; Get ready to set bit 7
.804c	04 07		tsb $07		                        tsb input_f             ; 65c02 only
.804e	8a		txa		                        txa
.804f	80 1d		bra $806e	                        bra reader_comment_continue     ; saves char
.8051					_not_a_comment:
.8051	c9 22		cmp #$22	                        cmp #$22                ; quotation mark '"'
.8053	d0 0a		bne $805f	                        bne _not_a_string
.8055	aa		tax		                        tax                     ; Save quotation mark char
.8056	a5 07		lda $07		                        lda input_f
.8058	49 40		eor #$40	                        eor #%01000000          ; flip bit 6
.805a	85 07		sta $07		                        sta input_f
.805c	8a		txa		                        txa
.805d	80 0f		bra $806e	                        bra reader_string_continue      ; saves char
.805f					_not_a_string:
.805f	c9 08		cmp #$08	                        cmp #AscBS
.8061	f0 2e		beq $8091	                        beq reader_backspace
.8063	c9 7f		cmp #$7f	                        cmp #AscDEL             ; Is the same as CTRL-h
.8065	f0 2a		beq $8091	                        beq reader_backspace
.8067	c9 04		cmp #$04	                        cmp #$04
.8069	d0 03		bne $806e	                        bne reader_normal_char
.806b	4c da 85	jmp $85da	                        jmp repl_quit
.806e					reader_normal_char:
.806e					reader_comment_continue:
.806e					reader_string_continue:
.806e	20 fb 85	jsr $85fb	                        jsr help_emit_a
.8071	99 00 02	sta $0200,y	                        sta cib,y
.8074	c8		iny		                        iny
.8075	cc 00 01	cpy $0100	                        cpy cib_size
.8078	90 34		bcc $80ae	                        bcc reader_buffer_full
.807a	80 be		bra $803a	                        bra reader_loop
.807c					reader_got_eol:
.807c	a5 07		lda $07		                        lda input_f             ; bit 7 marks comment
.807e	30 09		bmi $8089	                        bmi _eol_in_comment
.8080	29 7f		and #$7f	                        and #%01111111          ; input_f already in A
.8082	d0 09		bne $808d	                        bne _eol_in_parens_or_string
.8084	20 fb 85	jsr $85fb	                        jsr help_emit_a
.8087	80 25		bra $80ae	                        bra reader_input_done
.8089					_eol_in_comment:
.8089	a9 80		lda #$80	                        lda #$80
.808b	14 07		trb $07		                        trb input_f             ; bit 7 marks comment, now clear
.808d					_eol_in_parens_or_string:
.808d	a9 0a		lda #$0a	                        lda #AscLF
.808f	80 dd		bra $806e	                        bra reader_comment_continue       ; stores LF
.8091					reader_backspace:
.8091	c0 00		cpy #$00	                        cpy #0          ; buffer empty?
.8093	d0 06		bne $809b	                        bne _skip_bell
.8095	a9 07		lda #$07	                        lda #AscBELL
.8097	20 fb 85	jsr $85fb	                        jsr help_emit_a
.809a	c8		iny		                        iny
.809b					_skip_bell:
.809b	88		dey		                        dey
.809c	a9 08		lda #$08	                        lda #AscBS      ; move back one
.809e	20 fb 85	jsr $85fb	                        jsr help_emit_a
.80a1	a9 20		lda #$20	                        lda #AscSP      ; print a space (rubout)
.80a3	20 fb 85	jsr $85fb	                        jsr help_emit_a
.80a6	a9 08		lda #$08	                        lda #AscBS      ; move back over space
.80a8	20 fb 85	jsr $85fb	                        jsr help_emit_a
.80ab	4c 3a 80	jmp $803a	                        jmp reader_loop
.80ae					reader_input_done:
.80ae					reader_buffer_full:
.80ae	84 08		sty $08		                        sty ciblen      ; Y contains number of chars accepted already
.80b0	a9 00		lda #$00	                        lda #0
.80b2	85 09		sta $09		                        sta ciblen+1    ; we only accept 254 chars for now
.80b4	99 00 02	sta $0200,y	                        sta cib,y

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../lexer.asm

.80b7					lexer:
.80b7	20 0c 87	jsr $870c	                jsr debug_dump_input
.80ba	a0 00		ldy #$00	                ldy #0
.80bc	64 0a		stz $0a		                stz cibp
.80be	64 0b		stz $0b		                stz cibp+1      ; MSB currently unused
.80c0	64 0e		stz $0e		                stz tkbp
.80c2	64 0f		stz $0f		                stz tkbp+1      ; MSB currently unused
.80c4	98		tya		                tya
.80c5	19 00 02	ora $0200,y	                ora cib,y
.80c8	d0 03		bne $80cd	                bne lexer_loop
.80ca	4c d7 85	jmp $85d7	                jmp repl_empty_line
.80cd					lexer_loop:
.80cd	b9 00 02	lda $0200,y	                lda cib,y
.80d0	c9 3b		cmp #$3b	                cmp #$3B        ; semicolon
.80d2	d0 0f		bne $80e3	                bne _no_comment
.80d4					_comment_loop:
.80d4	c8		iny		                iny
.80d5	b9 00 02	lda $0200,y	                lda cib,y
.80d8	c9 0a		cmp #$0a	                cmp #AscLF
.80da	f0 04		beq $80e0	                beq _comment_done
.80dc	c9 0d		cmp #$0d	                cmp #AscCR
.80de	d0 f4		bne $80d4	                bne _comment_loop
.80e0					_comment_done:
.80e0	4c 27 82	jmp $8227	                jmp lexer_next
.80e3					_no_comment:
.80e3	20 71 86	jsr $8671	                jsr help_is_whitespace
.80e6	90 03		bcc $80eb	                bcc _not_whitespace
.80e8	4c 27 82	jmp $8227	                jmp lexer_next
.80eb					_not_whitespace:
.80eb					_test_parens:
.80eb	c9 28		cmp #$28	                cmp #'('        ; check for open parens
.80ed	d0 08		bne $80f7	                bne _not_parens_start
.80ef	a9 aa		lda #$aa	                lda #T_PAREN_START
.80f1	20 37 82	jsr $8237	                jsr lexer_add_token
.80f4	4c 27 82	jmp $8227	                jmp lexer_next
.80f7					_not_parens_start:
.80f7	c9 29		cmp #$29	                cmp #')'        ; check for close parens
.80f9	d0 08		bne $8103	                bne _not_parens_end
.80fb	a9 ff		lda #$ff	                lda #T_PAREN_END
.80fd	20 37 82	jsr $8237	                jsr lexer_add_token
.8100	4c 27 82	jmp $8227	                jmp lexer_next
.8103					_not_parens_end:
.8103	c9 27		cmp #$27	                cmp #$27                ; "'" tick for (quote)
.8105	d0 08		bne $810f	                bne _not_tick
.8107	a9 01		lda #$01	                lda #T_TICK
.8109	20 37 82	jsr $8237	                jsr lexer_add_token
.810c	4c 27 82	jmp $8227	                jmp lexer_next
.810f					_not_tick:
.810f	d0 03		bne $8114	                bne _not_done
.8111	4c 2f 82	jmp $822f	                jmp lexer_end_of_input          ; not the same as lexer_done
.8114					_not_done:
.8114	c9 23		cmp #$23	                cmp #'#'
.8116	f0 03		beq $811b	                beq _got_sharp
.8118	4c b8 81	jmp $81b8	                jmp lexer_not_sharp             ; too far for branch
.811b					_got_sharp:
.811b	c8		iny		                iny
.811c	b9 00 02	lda $0200,y	                lda cib,y
.811f	c9 74		cmp #$74	                cmp #'t'        ; We're optimists so we check for true first
.8121	d0 08		bne $812b	                bne _not_true
.8123	a9 02		lda #$02	                lda #T_TRUE
.8125	20 37 82	jsr $8237	                jsr lexer_add_token
.8128	4c 27 82	jmp $8227	                jmp lexer_next
.812b					_not_true:
.812b	c9 66		cmp #$66	                cmp #'f'
.812d	d0 08		bne $8137	                bne _not_false
.812f	a9 03		lda #$03	                lda #T_FALSE
.8131	20 37 82	jsr $8237	                jsr lexer_add_token
.8134	4c 27 82	jmp $8227	                jmp lexer_next
.8137					_not_false:
.8137	c9 5c		cmp #$5c	                cmp #'\'
.8139	d0 00		bne $813b	                bne _no_backslash
.813b					_not_single_char:
.813b					_not_named_char:
.813b					_no_backslash:
.813b					_not_vector:
.813b	c9 78		cmp #$78	                cmp #'x'        ; #x is hexadecimal
.813d	d0 04		bne $8143	                bne _not_hexnum
.813f	a9 10		lda #$10	                lda #$10        ; Base 16
.8141	80 13		bra $8156	                bra lexer_got_number
.8143					_not_hexnum:
.8143	c9 62		cmp #$62	                cmp #'b'        ; #b is binary
.8145	d0 04		bne $814b	                bne _not_binnum
.8147	a9 02		lda #$02	                lda #$02        ; Base 2
.8149	80 0b		bra $8156	                bra lexer_got_number
.814b					_not_binnum:
.814b	c9 64		cmp #$64	                cmp #'d'        ; #d is explicit decimal
.814d	d0 04		bne $8153	                bne _illegal_radix
.814f	a9 0a		lda #$0a	                lda #$0A        ; Base 10
.8151	80 03		bra $8156	                bra lexer_got_number
.8153					_illegal_radix:
.8153	4c b0 81	jmp $81b0	                jmp lexer_illegal_radix
.8156					lexer_got_number:
.8156	48		pha		                pha                     ; Save the radix for the moment
.8157	a9 12		lda #$12	                lda #T_NUM_START
.8159	20 37 82	jsr $8237	                jsr lexer_add_token
.815c	68		pla		                pla
.815d	20 37 82	jsr $8237	                jsr lexer_add_token
.8160	a6 0e		ldx $0e		                ldx tkbp        ; get index of where length will be
.8162	86 20		stx $20		                stx tmp0
.8164	a9 00		lda #$00	                lda #0          ; dummy length value
.8166	20 37 82	jsr $8237	                jsr lexer_add_token
.8169	c8		iny		                iny             ; Y is still the input buffer index
.816a	b9 00 02	lda $0200,y	                lda cib,y
.816d	a2 00		ldx #$00	                ldx #0          ; X counts length of string
.816f	c9 2d		cmp #$2d	                cmp #'-'
.8171	d0 09		bne $817c	                bne _check_for_plus
.8173	a9 21		lda #$21	                lda #T_MINUS
.8175	20 37 82	jsr $8237	                jsr lexer_add_token
.8178	c8		iny		                iny             ; skip minus character
.8179	e8		inx		                inx             ; string now has length of 1
.817a	80 0b		bra $8187	                bra _sign_done
.817c					_check_for_plus:
.817c	c9 2b		cmp #$2b	                cmp #'+'
.817e	d0 01		bne $8181	                bne _default_plus
.8180	c8		iny		                iny
.8181					_default_plus:
.8181	a9 20		lda #$20	                lda #T_PLUS
.8183	20 37 82	jsr $8237	                jsr lexer_add_token
.8186	e8		inx		                inx             ; string now has length of 1
.8187					_sign_done:
.8187	b9 00 02	lda $0200,y	                lda cib,y
.818a	f0 24		beq $81b0	                beq lexer_terminator_too_early  ; 00 terminates input
.818c	20 2f 86	jsr $862f	                jsr help_is_delimiter
.818f	b0 1f		bcs $81b0	                bcs lexer_delimiter_too_early
.8191					_number_loop:
.8191	20 37 82	jsr $8237	                jsr lexer_add_token
.8194	e8		inx		                inx             ; String one character longer
.8195	c8		iny		                iny             ; Next character
.8196	b9 00 02	lda $0200,y	                lda cib,y
.8199	f0 07		beq $81a2	                beq _legal_terminator
.819b	20 2f 86	jsr $862f	                jsr help_is_delimiter
.819e	b0 02		bcs $81a2	                bcs _number_done
.81a0	80 ef		bra $8191	                bra _number_loop
.81a2					_legal_terminator:
.81a2					_number_done:
.81a2	a9 82		lda #$82	                lda #T_NUM_END
.81a4	20 37 82	jsr $8237	                jsr lexer_add_token
.81a7	8a		txa		                txa             ; number of chars was in X
.81a8	a6 20		ldx $20		                ldx tmp0        ; index of length byte in token stream
.81aa	9d 00 03	sta $0300,x	                sta tkb,x
.81ad	4c 28 82	jmp $8228	                jmp lexer_next_same_char
.81b0					lexer_illegal_radix:
.81b0					lexer_terminator_too_early:
.81b0					lexer_delimiter_too_early:
.81b0	a9 06		lda #$06	                lda #str_bad_number
.81b2	20 1b 86	jsr $861b	                jsr help_print_string
.81b5	4c 2d 80	jmp $802d	                jmp repl
.81b8					lexer_not_octnum
.81b8					lexer_not_sharp:
.81b8					_not_decnum:
.81b8	c9 22		cmp #$22	                cmp #$22        ; '"' ASCII value
.81ba	d0 1f		bne $81db	                bne _not_string
.81bc	a9 13		lda #$13	                lda #T_STR_START
.81be	20 37 82	jsr $8237	                jsr lexer_add_token
.81c1					_string_loop:
.81c1	c8		iny		                iny
.81c2	b9 00 02	lda $0200,y	                lda cib,y
.81c5	c9 22		cmp #$22	                cmp #$22        ; '"' closes string
.81c7	f0 0b		beq $81d4	                beq _string_done
.81c9	c9 0d		cmp #$0d	                cmp #AscCR
.81cb	d0 02		bne $81cf	                bne +
.81cd	a9 0a		lda #$0a	                lda #AscLF
.81cf					+
.81cf	20 37 82	jsr $8237	                jsr lexer_add_token
.81d2	80 ed		bra $81c1	                bra _string_loop
.81d4					_string_done:
.81d4	a9 83		lda #$83	                lda #T_STR_END
.81d6	20 37 82	jsr $8237	                jsr lexer_add_token
.81d9	80 4c		bra $8227	                bra lexer_next
.81db					_not_string:
.81db	c9 2e		cmp #$2e	                cmp #'.'
.81dd	d0 07		bne $81e6	                bne _not_dot
.81df	a9 05		lda #$05	                lda #T_DOT
.81e1	20 37 82	jsr $8237	                jsr lexer_add_token
.81e4	80 41		bra $8227	                bra lexer_next
.81e6					_not_dot:
.81e6	20 5a 86	jsr $865a	                jsr help_is_letter
.81e9	b0 05		bcs $81f0	                bcs _id_found
.81eb	20 47 86	jsr $8647	                jsr help_is_extended_alpha
.81ee	90 27		bcc $8217	                bcc _not_an_id
.81f0					_id_found:
.81f0	48		pha		                pha                     ; Save copy of the first character
.81f1	a9 14		lda #$14	                lda #T_ID_START
.81f3	20 37 82	jsr $8237	                jsr lexer_add_token
.81f6	68		pla		                pla
.81f7					_id_loop:
.81f7	20 37 82	jsr $8237	                jsr lexer_add_token
.81fa	c8		iny		                iny                     ; next character
.81fb	c4 08		cpy $08		                cpy ciblen
.81fd	f0 11		beq $8210	                beq _id_end_of_line     ; Line can just be over
.81ff	b9 00 02	lda $0200,y	                lda cib,y
.8202	f0 0c		beq $8210	                beq _id_end_of_line     ; EOL can terminate input
.8204	20 2f 86	jsr $862f	                jsr help_is_delimiter
.8207	90 ee		bcc $81f7	                bcc _id_loop
.8209					_id_done:
.8209	a9 84		lda #$84	                lda #T_ID_END
.820b	20 37 82	jsr $8237	                jsr lexer_add_token
.820e	80 18		bra $8228	                bra lexer_next_same_char        ; deal with delimiter
.8210					_id_end_of_line:
.8210	a9 84		lda #$84	                lda #T_ID_END
.8212	20 37 82	jsr $8237	                jsr lexer_add_token
.8215	80 18		bra $822f	                bra lexer_end_of_input
.8217					_not_an_id:
.8217					lexer_error:
.8217	48		pha		                pha
.8218	a9 00		lda #$00	                lda #str_unbound
.821a	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.821d	68		pla		                pla
.821e	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.8221	20 f9 85	jsr $85f9	                jsr help_emit_lf
.8224	4c 2d 80	jmp $802d	                jmp repl
.8227					lexer_next:
.8227	c8		iny		                iny
.8228					lexer_next_same_char:
.8228	c4 08		cpy $08		                cpy ciblen
.822a	f0 03		beq $822f	                beq lexer_end_of_input
.822c	4c cd 80	jmp $80cd	                jmp lexer_loop
.822f					lexer_end_of_input:
.822f	a9 00		lda #$00	                lda #T_END
.8231	20 37 82	jsr $8237	                jsr lexer_add_token
.8234	4c 42 82	jmp $8242	                jmp lexer_done
.8237					lexer_add_token:
.8237	5a		phy		                phy             ; Could also store in cibp
.8238	a4 0e		ldy $0e		                ldy tkbp
.823a	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.823d	c8		iny		                iny
.823e	84 0e		sty $0e		                sty tkbp
.8240	7a		ply		                ply
.8241	60		rts		                rts
=$00					T_END           = $00   ; Terminates token stream
=$01					T_TICK          = $01   ; "'" - tick character
=$02					T_TRUE          = $02   ; '#t'
=$03					T_FALSE         = $03   ; '#f'
=$04					T_SHARP         = $04   ; '#' - note '#f', '#t' and others are precprocessed
=$05					T_DOT           = $05   ; "." - dot/period, used for pairs
=$12					T_NUM_START     = $12   ; Marks beginning of a number sequence
=$13					T_STR_START     = $13   ; Marks beginning of a string
=$14					T_ID_START      = $14   ; Marks beginning of an identifier
=$20					T_PLUS          = $20   ; '+' Also used in number token sequence
=$21					T_MINUS         = $21   ; '-' Also used in number token sequence
=$22					T_STAR          = $22   ; '*' Also used for math
=$23					T_SLASH         = $23   ; '\' Also used for math
=$82					T_NUM_END       = $82   ; Marks end of a number sequence, see T_NUM_START
=$83					T_STR_END       = $83   ; Marks end of a string, see T_STR_START
=$84					T_ID_END        = $84   ; Makrs end of an identifier, see T_ID_START
=$aa					T_PAREN_START   = $AA   ; '(' - parens open
=$ff					T_PAREN_END     = $FF   ; ')' - parens closed
.8242					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.8242					parser:
.8242	20 29 87	jsr $8729	                jsr debug_dump_token
.8245	a9 02		lda #$02	                lda #$02        ; Skip dummy cdr at beginning of RAM
.8247	85 13		sta $13		                sta hp_ast
.8249	a5 10		lda $10		                lda rsn_ast     ; MSB of RAM segment for AST
.824b	85 14		sta $14		                sta hp_ast+1
.824d	85 12		sta $12		                sta astp+1      ; still have MSB of RAM segment
.824f	64 11		stz $11		                stz astp
.8251	64 0e		stz $0e		                stz tkbp
.8253	64 0f		stz $0f		                stz tkbp+1      ; fake, currently only using LSB
.8255	a2 ff		ldx #$ff	                ldx #$FF        ; index -1 at beginning
.8257					parser_loop:
.8257	e8		inx		                inx
.8258	bd 00 03	lda $0300,x	                lda tkb,x
.825b	c9 01		cmp #$01	                cmp #T_TICK
.825d	d0 0a		bne $8269	                bne _not_tick
.825f	a0 02		ldy #$02	                ldy #<OC_PROC_QUOTE
.8261	a9 f0		lda #$f0	                lda #>OC_PROC_QUOTE
.8263	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8266	4c 57 82	jmp $8257	                jmp parser_loop
.8269					_not_tick:
.8269	c9 aa		cmp #$aa	                cmp #T_PAREN_START
.826b	d0 1d		bne $828a	                bne _not_paren_start
.826d	e8		inx		                inx
.826e	bd 00 03	lda $0300,x	                lda tkb,x
.8271	c9 ff		cmp #$ff	                cmp #T_PAREN_END
.8273	d0 0a		bne $827f	                bne _not_empty_list
.8275	a0 00		ldy #$00	                ldy #<OC_EMPTY_LIST
.8277	a9 00		lda #$00	                lda #>OC_EMPTY_LIST
.8279	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.827c	4c 57 82	jmp $8257	                jmp parser_loop
.827f					_not_empty_list:
.827f	ca		dex		                dex
.8280	a0 aa		ldy #$aa	                ldy #<OC_PARENS_START
.8282	a9 00		lda #$00	                lda #>OC_PARENS_START
.8284	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8287	4c 57 82	jmp $8257	                jmp parser_loop
.828a					_not_paren_start:
.828a	c9 ff		cmp #$ff	                cmp #T_PAREN_END
.828c	d0 0a		bne $8298	                bne _not_paren_end
.828e	a0 ff		ldy #$ff	                ldy #<OC_PARENS_END
.8290	a9 00		lda #$00	                lda #>OC_PARENS_END
.8292	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8295	4c 57 82	jmp $8257	                jmp parser_loop
.8298					_not_paren_end:
.8298	c9 00		cmp #$00	                cmp #T_END
.829a	d0 03		bne $829f	                bne _not_end_token
.829c	4c 96 84	jmp $8496	                jmp parser_done
.829f					_not_end_token:
.829f	c9 02		cmp #$02	                cmp #T_TRUE
.82a1	d0 0a		bne $82ad	                bne _not_true_token
.82a3	a0 ff		ldy #$ff	                ldy <#OC_TRUE
.82a5	a9 1f		lda #$1f	                lda >#OC_TRUE
.82a7	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.82aa	4c 57 82	jmp $8257	                jmp parser_loop
.82ad					_not_true_token:
.82ad	c9 03		cmp #$03	                cmp #T_FALSE
.82af	d0 0a		bne $82bb	                bne _not_false_token
.82b1	a0 00		ldy #$00	                ldy <#OC_FALSE
.82b3	a9 10		lda #$10	                lda >#OC_FALSE
.82b5	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.82b8	4c 57 82	jmp $8257	                jmp parser_loop
.82bb					_not_false_token:
.82bb	c9 12		cmp #$12	                cmp #T_NUM_START
.82bd	f0 03		beq $82c2	                beq +
.82bf	4c 69 83	jmp $8369	                jmp parser_not_num      ; too far for BNE
.82c2					+
.82c2	64 22		stz $22		                stz tmp1
.82c4	64 23		stz $23		                stz tmp1+1
.82c6	e8		inx		                inx             ; skip over T_NUM_START token
.82c7	bd 00 03	lda $0300,x	                lda tkb,x
.82ca	85 20		sta $20		                sta tmp0        ; radix
.82cc	e8		inx		                inx
.82cd	bd 00 03	lda $0300,x	                lda tkb,x
.82d0	a8		tay		                tay             ; We need the length of the string later ...
.82d1	88		dey		                dey             ; ... but we don't need to include the sign
.82d2	e8		inx		                inx             ; Move to token for sign, T_PLUS or T_MINUS
.82d3	bd 00 03	lda $0300,x	                lda tkb,x
.82d6	85 21		sta $21		                sta tmp0+1      ; Just store sign for now
.82d8	e8		inx		                inx             ; Move to first digit
.82d9	a5 20		lda $20		                lda tmp0        ; radix
.82db	c9 0a		cmp #$0a	                cmp #$0a
.82dd	d0 03		bne $82e2	                bne _not_dec
.82df	4c 51 83	jmp $8351	                jmp parser_common_fixnum
.82e2					_not_dec:
.82e2	c9 10		cmp #$10	                cmp #$10
.82e4	d0 36		bne $831c	                bne _not_hex
.82e6	98		tya		                tya
.82e7	c9 04		cmp #$04	                cmp #$04
.82e9	90 03		bcc $82ee	                bcc _dec_fixnum
.82eb	4c 4f 84	jmp $844f	                jmp function_not_available
.82ee					_dec_fixnum:
.82ee					_hex_fixnum_loop:
.82ee	bd 00 03	lda $0300,x	                lda tkb,x
.82f1	c9 82		cmp #$82	                cmp #T_NUM_END
.82f3	f0 24		beq $8319	                beq _done_hex
.82f5	20 88 86	jsr $8688	                jsr help_hexascii_to_value
.82f8	10 03		bpl $82fd	                bpl _legal_hex_digit
.82fa	4c 47 84	jmp $8447	                jmp parser_bad_digit
.82fd					_legal_hex_digit:
.82fd	0a		asl a		                asl
.82fe	0a		asl a		                asl
.82ff	0a		asl a		                asl
.8300	0a		asl a		                asl
.8301	2a		rol a		                rol             ; bit 7 of A now in carry flag
.8302	26 23		rol $23		                rol tmp1+1      ; bit 7 of tmp1+1 now in carry flag
.8304	26 22		rol $22		                rol tmp1        ; now is bit 0 of tmp1
.8306	2a		rol a		                rol
.8307	26 23		rol $23		                rol tmp1+1
.8309	26 22		rol $22		                rol tmp1
.830b	2a		rol a		                rol
.830c	26 23		rol $23		                rol tmp1+1
.830e	26 22		rol $22		                rol tmp1
.8310	2a		rol a		                rol
.8311	26 23		rol $23		                rol tmp1+1
.8313	26 22		rol $22		                rol tmp1
.8315	e8		inx		                inx
.8316	88		dey		                dey
.8317	d0 d5		bne $82ee	                bne _hex_fixnum_loop
.8319					_done_hex:
.8319	4c 51 83	jmp $8351	                jmp parser_common_fixnum
.831c					_not_hex:
.831c	c9 02		cmp #$02	                cmp #$02
.831e	d0 28		bne $8348	                bne _not_binary
.8320	98		tya		                tya
.8321	c9 0d		cmp #$0d	                cmp #$0D                ; "smaller than 13"
.8323	90 03		bcc $8328	                bcc _bin_fixnum
.8325	4c 4f 84	jmp $844f	                jmp function_not_available
.8328					_bin_fixnum:
.8328					_bin_fixnum_loop:
.8328	bd 00 03	lda $0300,x	                lda tkb,x
.832b	c9 30		cmp #$30	                cmp #'0'
.832d	f0 0b		beq $833a	                beq _legal_bit_char
.832f	c9 31		cmp #$31	                cmp #'1'
.8331	f0 07		beq $833a	                beq _legal_bit_char
.8333	c9 82		cmp #$82	                cmp #T_NUM_END
.8335	f0 0e		beq $8345	                beq _done_bin
.8337	4c 47 84	jmp $8447	                jmp parser_bad_digit
.833a					_legal_bit_char:
.833a	29 01		and #$01	                and #$01                ; gives us $00 or $01
.833c	6a		ror a		                ror                     ; push the bit into carry flag
.833d	26 23		rol $23		                rol tmp1+1              ; rotate the carry flag into LSB ...
.833f	26 22		rol $22		                rol tmp1                ; ... and highest bit of tmp1+1 to tmp1
.8341	e8		inx		                inx                     ; next character
.8342	88		dey		                dey                     ; decrease counter
.8343	d0 e3		bne $8328	                bne _bin_fixnum_loop
.8345					_done_bin:
.8345	4c 51 83	jmp $8351	                jmp parser_common_fixnum
.8348					_not_binary:
.8348					_illegal_radix:
.8348	48		pha		                pha                             ; save the evil radix
.8349	a9 07		lda #$07	                lda #str_bad_radix
.834b	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.834e	4c 3d 84	jmp $843d	                jmp parser_common_panic
.8351					parser_common_fixnum:
.8351	a5 21		lda $21		                lda tmp0+1
.8353	c9 21		cmp #$21	                cmp #T_MINUS
.8355	f0 08		beq $835f	                beq _negative_number
.8357	a9 20		lda #$20	                lda #OT_FIXNUM
.8359	05 22		ora $22		                ora tmp1        ; construct tag byte with MSB of number
.835b	85 22		sta $22		                sta tmp1
.835d	80 00		bra $835f	                bra _add_fixnum_to_ast
.835f					_negative_number:
.835f					_add_fixnum_to_ast:
.835f	a4 23		ldy $23		                ldy tmp1+1
.8361	a5 22		lda $22		                lda tmp1
.8363	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8366					_num_done:
.8366	4c 57 82	jmp $8257	                jmp parser_loop
.8369					parser_not_num:
.8369	c9 13		cmp #$13	                cmp #T_STR_START
.836b	d0 46		bne $83b3	                bne parser_not_string
.836d	a5 19		lda $19		                lda hp_str+1    ; MSB of next free byte in string RAM segment
.836f	29 0f		and #$0f	                and #$0F        ; mask high nibble (paranoid)
.8371	09 40		ora #$40	                ora #OT_STRING  ; object tag nibble for strings
.8373	a4 18		ldy $18		                ldy hp_str      ; LSB goes in Y, MSB is in A
.8375	20 57 84	jsr $8457	                jsr parser_add_object_to_ast   ; Updates AST heap pointer
.8378	e8		inx		                inx             ; move to first character of string
.8379	a0 00		ldy #$00	                ldy #0
.837b					_string_loop:
.837b	bd 00 03	lda $0300,x	                lda tkb,x
.837e	c9 83		cmp #$83	                cmp #T_STR_END
.8380	f0 06		beq $8388	                beq _string_end
.8382	91 18		sta ($18),y	                sta (hp_str),y
.8384	c8		iny		                iny
.8385	e8		inx		                inx
.8386	80 f3		bra $837b	                bra _string_loop
.8388					_string_end:
.8388	a9 00		lda #$00	                lda #0
.838a	c8		iny		                iny
.838b	91 18		sta ($18),y	                sta (hp_str),y
.838d	98		tya		                tya
.838e	18		clc		                clc
.838f	65 18		adc $18		                adc hp_str
.8391	85 18		sta $18		                sta hp_str
.8393	90 02		bcc $8397	                bcc +
.8395	e6 19		inc $19		                inc hp_str+1
.8397					+
.8397	a9 00		lda #$00	                lda #0
.8399	92 18		sta ($18)	                sta (hp_str)
.839b	a0 01		ldy #$01	                ldy #1
.839d	91 18		sta ($18),y	                sta (hp_str),y
.839f	a5 18		lda $18		                lda hp_str
.83a1	85 16		sta $16		                sta strp
.83a3	a5 19		lda $19		                lda hp_str+1
.83a5	85 17		sta $17		                sta strp+1
.83a7	98		tya		                tya             ; #1
.83a8	1a		inc a		                inc a
.83a9	18		clc		                clc
.83aa	65 18		adc $18		                adc hp_str
.83ac	90 02		bcc $83b0	                bcc +
.83ae	e6 19		inc $19		                inc hp_str+1
.83b0					+
.83b0	4c 57 82	jmp $8257	                jmp parser_loop
.83b3					parser_not_string:
.83b3	c9 14		cmp #$14	                cmp #T_ID_START
.83b5	f0 03		beq $83ba	                beq parser_have_id
.83b7	4c 34 84	jmp $8434	                jmp parser_not_id               ; too far for BNE
.83ba					parser_have_id:
.83ba					_find_proc:
.83ba	e8		inx		                inx             ; point to first character
.83bb	a9 8c		lda #$8c	                lda #<proc_headers
.83bd	85 20		sta $20		                sta tmp0
.83bf	a9 88		lda #$88	                lda #>proc_headers
.83c1	85 21		sta $21		                sta tmp0+1
.83c3	8a		txa		                txa
.83c4	18		clc		                clc
.83c5	69 00		adc #$00	                adc #<tkb
.83c7	85 22		sta $22		                sta tmp1                ; address of mystery string in tmp1
.83c9	a9 03		lda #$03	                lda #>tkb
.83cb	90 01		bcc $83ce	                bcc +
.83cd	1a		inc a		                inc a
.83ce					+
.83ce	85 23		sta $23		                sta tmp1+1
.83d0					_find_proc_loop:
.83d0	a9 04		lda #$04	                lda #4
.83d2	18		clc		                clc
.83d3	65 20		adc $20		                adc tmp0
.83d5	85 24		sta $24		                sta tmp2                ; LSB address of the known string in tmp2
.83d7	a5 21		lda $21		                lda tmp0+1              ; MSB
.83d9	85 25		sta $25		                sta tmp2+1
.83db	90 02		bcc $83df	                bcc +
.83dd	e6 25		inc $25		                inc tmp2+1
.83df					+
.83df	a0 00		ldy #$00	                ldy #0
.83e1					_compare_loop:
.83e1	b1 22		lda ($22),y	                lda (tmp1),y            ; char of the mystery string
.83e3	c9 84		cmp #$84	                cmp #T_ID_END
.83e5	f0 0b		beq $83f2	                beq _mystery_string_done
.83e7	d1 24		cmp ($24),y	                cmp (tmp2),y            ; known character string
.83e9	d0 0b		bne $83f6	                bne _next_entry         ; chars don't match, next entry
.83eb	b1 24		lda ($24),y	                lda (tmp2),y
.83ed	f0 07		beq $83f6	                beq _next_entry
.83ef	c8		iny		                iny
.83f0	80 ef		bra $83e1	                bra _compare_loop
.83f2					_mystery_string_done:
.83f2	b1 24		lda ($24),y	                lda (tmp2),y
.83f4	f0 28		beq $841e	                beq _found_id           ; strings are both over, it's a match!
.83f6					_next_entry:
.83f6	b2 20		lda ($20)	                lda (tmp0)
.83f8	48		pha		                pha
.83f9	a0 01		ldy #$01	                ldy #1
.83fb	b1 20		lda ($20),y	                lda (tmp0),y
.83fd	85 21		sta $21		                sta tmp0+1
.83ff	68		pla		                pla
.8400	85 20		sta $20		                sta tmp0
.8402	05 21		ora $21		                ora tmp0+1
.8404	d0 ca		bne $83d0	                bne _find_proc_loop   ; concentrate and try again, Mrs. Dunham
.8406					_bad_word:
.8406	a9 00		lda #$00	                lda #str_unbound                ; "Unbound variable: "
.8408	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.840b					_bad_word_loop:
.840b	bd 00 03	lda $0300,x	                lda tkb,x
.840e	c9 84		cmp #$84	                cmp #T_ID_END
.8410	f0 06		beq $8418	                beq _bad_word_done
.8412	20 fb 85	jsr $85fb	                jsr help_emit_a
.8415	e8		inx		                inx
.8416	80 f3		bra $840b	                bra _bad_word_loop
.8418					_bad_word_done:
.8418	20 f9 85	jsr $85f9	                jsr help_emit_lf
.841b	4c 2d 80	jmp $802d	                jmp repl
.841e					_found_id:
.841e	98		tya		                tya
.841f	86 22		stx $22		                stx tmp1
.8421	18		clc		                clc
.8422	65 22		adc $22		                adc tmp1
.8424	aa		tax		                tax
.8425	a0 02		ldy #$02	                ldy #2
.8427	b1 20		lda ($20),y	                lda (tmp0),y    ; LSB of process object
.8429	48		pha		                pha
.842a	c8		iny		                iny
.842b	b1 20		lda ($20),y	                lda (tmp0),y    ; MSB with tag, goes in A
.842d	7a		ply		                ply             ; LSB goes in Y
.842e	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8431	4c 57 82	jmp $8257	                jmp parser_loop
.8434					parser_not_id:
.8434					paser_bad_token:
.8434	48		pha		                pha                             ; save the evil token
.8435	20 f9 85	jsr $85f9	                jsr help_emit_lf
.8438	a9 04		lda #$04	                lda #str_bad_token
.843a	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.843d					parser_common_panic:
.843d	68		pla		                pla
.843e	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii          ; print bad token as hex number
.8441	20 f9 85	jsr $85f9	                jsr help_emit_lf
.8444	4c 2d 80	jmp $802d	                jmp repl
.8447					parser_bad_digit:
.8447	48		pha		                pha                             ; save the bad digit
.8448	a9 06		lda #$06	                lda #str_bad_number
.844a	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.844d	80 ee		bra $843d	                bra parser_common_panic
.844f					function_not_available:
.844f	a9 08		lda #$08	                lda #str_cant_yet
.8451	20 1b 86	jsr $861b	                jsr help_print_string
.8454	4c 2d 80	jmp $802d	                jmp repl
.8457					parser_add_object_to_ast:
.8457	da		phx		                phx             ; save index to token buffer
.8458	48		pha		                pha             ; save MSB of the object (with tag)
.8459	5a		phy		                phy             ; save LSB of the object to top of stack
.845a	a5 13		lda $13		                lda hp_ast
.845c	85 20		sta $20		                sta tmp0
.845e	a5 14		lda $14		                lda hp_ast+1
.8460	85 21		sta $21		                sta tmp0+1
.8462	a9 00		lda #$00	                lda <#OC_EMPTY_LIST
.8464	a0 00		ldy #$00	                ldy #0
.8466	91 13		sta ($13),y	                sta (hp_ast),y
.8468	c8		iny		                iny
.8469	a9 00		lda #$00	                lda >#OC_EMPTY_LIST
.846b	91 13		sta ($13),y	                sta (hp_ast),y
.846d	c8		iny		                iny
.846e	68		pla		                pla             ; retrieve LSB of object, was in Y
.846f	91 13		sta ($13),y	                sta (hp_ast),y
.8471	c8		iny		                iny
.8472	68		pla		                pla             ; retrieve MSB (with tag), was in A
.8473	91 13		sta ($13),y	                sta (hp_ast),y
.8475	c8		iny		                iny
.8476	98		tya		                tya
.8477	18		clc		                clc
.8478	65 13		adc $13		                adc hp_ast
.847a	85 13		sta $13		                sta hp_ast
.847c	90 02		bcc $8480	                bcc _store_address
.847e	e6 14		inc $14		                inc hp_ast+1
.8480					_store_address:
.8480	a5 21		lda $21		                lda tmp0+1      ; original MSB of hp_ast, which is just an addr
.8482	29 0f		and #$0f	                and #$0F        ; mask whatever the high nibble was (paranoid)
.8484	09 80		ora #$80	                ora #OT_PAIR
.8486	a0 01		ldy #$01	                ldy #1
.8488	91 11		sta ($11),y	                sta (astp),y
.848a	a5 20		lda $20		                lda tmp0        ; original LSB of hp_ast
.848c	92 11		sta ($11)	                sta (astp)
.848e	85 11		sta $11		                sta astp        ; still have original LSB
.8490	a5 21		lda $21		                lda tmp0+1
.8492	85 12		sta $12		                sta astp+1      ; MSB, was tmp0+1
.8494	fa		plx		                plx             ; get back index for token buffer
.8495	60		rts		                rts
=$0000					OC_EMPTY_LIST     = $0000   ; end of list terminating object "()"
=$00aa					OC_PARENS_START   = $00AA   ; parens open '('
=$00ff					OC_PARENS_END     = $00FF   ; parens close ')'
=$1fff					OC_TRUE           = $1FFF   ; true bool #t, immediate
=$1000					OC_FALSE          = $1000   ; false bool #f, immediate
=$f000					OC_PROC_APPLY     = $F000   ; primitive procedure (apply)
=$f002					OC_PROC_QUOTE     = $F002   ; primitive procedure (quote)
.8496					parser_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.8496					eval:
.8496	20 62 87	jsr $8762	                jsr debug_dump_ast
.8499	a5 10		lda $10		                lda rsn_ast             ; RAM segment nibble, default $10
.849b	a0 02		ldy #$02	                ldy #2                  ; by definition
.849d	20 b0 86	jsr $86b0	                jsr help_walk_init      ; returns car in A and Y
.84a0					eval_loop:
.84a0	a2 ff		ldx #$ff	                ldx #ds_start           ; $FF by default
.84a2	86 00		stx $00		                stx dsp
.84a4	08		php		                php
.84a5	29 f0		and #$f0	                and #$f0
.84a7	4a		lsr a		                lsr
.84a8	4a		lsr a		                lsr
.84a9	4a		lsr a		                lsr             ; fourth LSR and ASL cancle each other out
.84aa	aa		tax		                tax
.84ab	7c 0b 85	jmp ($850b,x)	                jmp (eval_table,x)
.84ae					eval_next:
.84ae	ca		dex		                dex
.84af	ca		dex		                dex
.84b0	74 00		stz $00,x	                stz 0,x
.84b2	74 01		stz $01,x	                stz 1,x
.84b4	20 2b 85	jsr $852b	                jsr printer
.84b7	28		plp		                plp
.84b8	b0 05		bcs $84bf	                bcs eval_done           ; probably later a JMP
.84ba	20 b6 86	jsr $86b6	                jsr help_walk_next
.84bd	80 e1		bra $84a0	                bra eval_loop
.84bf					eval_done:
.84bf	4c 2d 80	jmp $802d	        jmp repl
.84c2					apply:
.84c2					proc_apply:
.84c2	b9 f8 86	lda $86f8,y	                lda exec_table_lsb,y
.84c5	85 05		sta $05		                sta jump
.84c7	b9 02 87	lda $8702,y	                lda exec_table_msb,y
.84ca	85 06		sta $06		                sta jump+1
.84cc	6c 05 00	jmp ($0005)	                jmp (jump)
.84cf					eval_push_car_to_stack:
.84cf	a6 00		ldx $00		                ldx dsp                 ; points to MSB of last entry
.84d1	ca		dex		                dex                     ; initially $FE
.84d2	ca		dex		                dex                     ; initially $FD
.84d3	a5 1c		lda $1c		                lda walk_car            ; LSB is pushed first, initially $FD
.84d5	95 00		sta $00,x	                sta 0,x
.84d7	a5 1d		lda $1d		                lda walk_car+1          ; MSB is pushed second, initially $FE
.84d9	95 01		sta $01,x	                sta 1,x
.84db	86 00		stx $00		                stx dsp                 ; We'll need X for jumps later
.84dd	60		rts		                rts
.84de					eval_0_meta:
.84de	c0 aa		cpy #$aa	                cpy #<OC_PARENS_START           ; defined in parser.asm
.84e0	d0 18		bne $84fa	                bne _not_parens_start
.84e2	20 b6 86	jsr $86b6	                jsr help_walk_next
.84e5	29 f0		and #$f0	                and #$F0
.84e7	c9 f0		cmp #$f0	                cmp #OT_PROC
.84e9	d0 03		bne $84ee	                bne _not_a_proc
.84eb	4c c2 84	jmp $84c2	                jmp proc_apply
.84ee					_not_a_proc:
.84ee	c9 e0		cmp #$e0	                cmp #OT_SPEC
.84f0	d0 00		bne $84f2	                bne _not_a_spec
.84f2					_not_a_spec:
.84f2					_not_legal_meta:
.84f2	a9 0f		lda #$0f	                lda #str_cant_apply
.84f4	20 1b 86	jsr $861b	                jsr help_print_string
.84f7	4c 2d 80	jmp $802d	                jmp repl
.84fa					_not_parens_start:
.84fa	c0 ff		cpy #$ff	                cpy #<OC_PARENS_END             ; from parser.asm
.84fc	d0 00		bne $84fe	                bne _not_parens_end
.84fe					_not_parens_end:
.84fe	c0 00		cpy #$00	                cpy #<OC_EMPTY_LIST
.8500	d0 f0		bne $84f2	                bne _not_legal_meta     ; temporary, TODO real error message
.8502					eval_1_bool:
.8502					eval_2_fixnum:
.8502					eval_3_char:
.8502					eval_4_string:
.8502					eval_f_proc:
.8502	20 cf 84	jsr $84cf	                jsr eval_push_car_to_stack
.8505	80 a7		bra $84ae	                bra eval_next
.8507					eval_5_bignum:
.8507					eval_6_UNDEFINED:
.8507					eval_7_UNDEFINED:
.8507					eval_8_pair:
.8507	80 a5		bra $84ae	                bra eval_next   ; paranoid, currently not reached
.8509					eval_9_UNDEFINED:
.8509					eval_A_UNDEFINED:
.8509					eval_B_UNDEFINED:
.8509					eval_C_UNDEFINED:
.8509					eval_D_UNDEFINED:
.8509					eval_e_spec:
.8509	80 a3		bra $84ae	                bra eval_next
.850b					eval_table:
>850b	de 84 02 85 02 85 02 85		        .word eval_0_meta, eval_1_bool, eval_2_fixnum, eval_3_char
>8513	02 85 ae 84 ae 84 ae 84		        .word eval_4_string, eval_next, eval_next, eval_next
>851b	07 85 ae 84 ae 84 ae 84		        .word eval_8_pair, eval_next, eval_next, eval_next
>8523	ae 84 ae 84 09 85 02 85		        .word eval_next, eval_next, eval_e_spec, eval_f_proc

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.852b					printer:
.852b	20 a2 87	jsr $87a2	                jsr debug_dump_ds
.852e	a2 fd		ldx #$fd	                ldx #ds_start-2
.8530	86 00		stx $00		                stx dsp         ; Sadly, we use X for two different things
.8532					printer_loop:
.8532	a6 00		ldx $00		                ldx dsp
.8534	b5 01		lda $01,x	                lda 1,x         ; by default the MSB at $00FE
.8536	a8		tay		                tay
.8537	f0 0d		beq $8546	                beq _check_for_end
.8539					_not_end:
.8539	98		tya		                tya
.853a	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.853c	4a		lsr a		                lsr
.853d	4a		lsr a		                lsr
.853e	4a		lsr a		                lsr     ; Fourth LSR and ASL cancle each other
.853f	aa		tax		                tax     ; This is why we save X as dsp
.8540	20 f9 85	jsr $85f9	                jsr help_emit_lf
.8543	7c b7 85	jmp ($85b7,x)	                jmp (printer_table,x)
.8546					_check_for_end:
.8546	b5 00		lda $00,x	                lda 0,x         ; LSB
.8548	d0 0d		bne $8557	                bne printer_0_meta
.854a	4c 53 85	jmp $8553	                jmp printer_done
.854d					printer_next:
.854d	c6 00		dec $00		                dec dsp
.854f	c6 00		dec $00		                dec dsp
.8551	80 df		bra $8532	                bra printer_loop
.8553					printer_done:
.8553	20 f9 85	jsr $85f9	                jsr help_emit_lf
.8556	60		rts		                rts
.8557					printer_0_meta:
.8557	80 f4		bra $854d	                bra printer_next
.8559					printer_1_bool:
.8559	a6 00		ldx $00		                ldx dsp
.855b	b5 01		lda $01,x	                lda 1,x         ; reload MSB to be safe
.855d	29 0f		and #$0f	                and #$0F        ; get rid of tag nibble
.855f	15 00		ora $00,x	                ora 0,x         ; OR with LSB
.8561	d0 04		bne $8567	                bne _bool_true          ; not a zero means true
.8563	a9 03		lda #$03	                lda #str_false
.8565	80 02		bra $8569	                bra _bool_printer
.8567					_bool_true:
.8567	a9 02		lda #$02	                lda #str_true
.8569					_bool_printer:
.8569	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.856c	80 df		bra $854d	                bra printer_next
.856e					printer_2_fixnum:
.856e	a6 00		ldx $00		                ldx dsp
.8570	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8572	29 0f		and #$0f	                and #$0F                ; Mask tag
.8574	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.8577	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8579	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.857c	80 cf		bra $854d	                bra printer_next
.857e					printer_3_char:
.857e					printer_4_string:
.857e	a6 00		ldx $00		                ldx dsp
.8580	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8582	29 0f		and #$0f	                and #$0F                ; mask tag
.8584	05 15		ora $15		                ora rsn_str             ; merge with section nibble instead
.8586	85 25		sta $25		                sta tmp2+1
.8588	b5 00		lda $00,x	                lda 0,x                 ; LSB
.858a	85 24		sta $24		                sta tmp2
.858c	a0 00		ldy #$00	                ldy #0
.858e					_string_loop:
.858e	b1 24		lda ($24),y	                lda (tmp2),y
.8590	f0 bb		beq $854d	                beq printer_next       ; string is zero terminated
.8592	20 fb 85	jsr $85fb	                jsr help_emit_a
.8595	c8		iny		                iny
.8596	80 f6		bra $858e	                bra _string_loop
.8598					printer_5_bignum:
.8598					printer_6_var:
.8598					printer_7_UNDEFINED:
.8598					printer_8_pair:
.8598					printer_9_UNDEFINED:
.8598					printer_a_UNDEFINED:
.8598					printer_b_UNDEFINED:
.8598					printer_c_UNDEFINED:
.8598					printer_d_UNDEFINED:
.8598					printer_e_special:
.8598	a9 0e		lda #$0e	                lda #str_special_prt            ; "#<special:$"
.859a	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.859d	80 05		bra $85a4	                bra print_common_exec
.859f					printer_f_proc:
.859f	a9 0d		lda #$0d	                lda #str_proc_prt               ; "#<procedure:$"
.85a1	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.85a4					print_common_exec:
.85a4	a6 00		ldx $00		                ldx dsp
.85a6	b5 01		lda $01,x	                lda 1,x                 ; MSB
.85a8	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.85ab	b5 00		lda $00,x	                lda 0,x                 ; LSB
.85ad	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.85b0	a9 3e		lda #$3e	                lda #'>'
.85b2	20 fb 85	jsr $85fb	                jsr help_emit_a
.85b5	80 96		bra $854d	                bra printer_next
.85b7					printer_table:
>85b7	57 85 59 85 6e 85 7e 85		        .word printer_0_meta, printer_1_bool, printer_2_fixnum, printer_3_char
>85bf	7e 85 98 85 98 85 4d 85		        .word printer_4_string, printer_5_bignum, printer_6_var, printer_next
>85c7	98 85 4d 85 4d 85 4d 85		        .word printer_8_pair, printer_next, printer_next, printer_next
>85cf	4d 85 4d 85 98 85 9f 85		        .word printer_next, printer_next, printer_e_special, printer_f_proc

;******  Return to file: platforms/../cthulhu.asm

.85d7					repl_empty_line:
.85d7	4c 2d 80	jmp $802d	                jmp repl
.85da					repl_quit:
.85da	a9 0a		lda #$0a	                lda #str_chant
.85dc	20 1b 86	jsr $861b	                jsr help_print_string
.85df	4c 2b f0	jmp $f02b	                jmp platform_quit

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.85e2					help_byte_to_ascii:
.85e2	48		pha		                pha
.85e3	4a		lsr a		                lsr             ; convert high nibble first
.85e4	4a		lsr a		                lsr
.85e5	4a		lsr a		                lsr
.85e6	4a		lsr a		                lsr
.85e7	20 eb 85	jsr $85eb	                jsr help_nibble_to_ascii
.85ea	68		pla		                pla
.85eb					help_nibble_to_ascii:
.85eb	29 0f		and #$0f	                and #$0F
.85ed	09 30		ora #$30	                ora #'0'
.85ef	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.85f1	90 02		bcc $85f5	                bcc +
.85f3	69 06		adc #$06	                adc #$06
.85f5	4c fb 85	jmp $85fb	+               jmp help_emit_a       ; JSR/RTS
.85f8					help_to_lowercase:
.85f8	60		rts		                rts
.85f9					help_emit_lf:
.85f9	a9 0a		lda #$0a	                lda #AscLF
.85fb					help_emit_a:
.85fb	6c 01 00	jmp ($0001)	                jmp (output)    ; JSR/RTS
.85fe					help_key_a:
.85fe	6c 03 00	jmp ($0003)	                jmp (input)             ; JSR/RTS
.8601					help_print_string_no_lf:
.8601	0a		asl a		                asl
.8602	a8		tay		                tay
.8603	b9 e8 88	lda $88e8,y	                lda string_table,y
.8606	85 20		sta $20		                sta tmp0                ; LSB
.8608	c8		iny		                iny
.8609	b9 e8 88	lda $88e8,y	                lda string_table,y
.860c	85 21		sta $21		                sta tmp0+1              ; MSB
.860e					help_print_common:
.860e	a0 00		ldy #$00	                ldy #0
.8610					_loop:
.8610	b1 20		lda ($20),y	                lda (tmp0),y
.8612	f0 06		beq $861a	                beq _done               ; strings are zero-terminated
.8614	20 fb 85	jsr $85fb	                jsr help_emit_a         ; allows vectoring via output
.8617	c8		iny		                iny
.8618	80 f6		bra $8610	                bra _loop
.861a					_done:
.861a	60		rts		                rts
.861b					help_print_string:
.861b	20 01 86	jsr $8601	                jsr help_print_string_no_lf
.861e	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.8620	4c fb 85	jmp $85fb	                jmp help_emit_a         ; JSR/RTS
.8623					help_is_decdigit:
.8623	c9 30		cmp #$30	                cmp #'0'
.8625	90 07		bcc $862e	                bcc _below_zero         ; A is < '0'
.8627	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.8629	b0 02		bcs $862d	                bcs _above_nine
.862b	38		sec		                sec
.862c	60		rts		                rts
.862d					_above_nine:
.862d	18		clc		                clc
.862e					_below_zero:
.862e	60		rts		                rts
.862f					help_is_delimiter:
.862f	20 71 86	jsr $8671	                jsr help_is_whitespace
.8632	b0 12		bcs $8646	                bcs _delimiter_done
.8634	18		clc		                clc
.8635	da		phx		                phx
.8636	ae 2e 8a	ldx $8a2e	                ldx s_delimiters        ; length of delimiter chars string
.8639					_delimiter_loop:
.8639	dd 2e 8a	cmp $8a2e,x	                cmp s_delimiters,X
.863c	f0 06		beq $8644	                beq _found_delimiter
.863e	ca		dex		                dex
.863f	d0 f8		bne $8639	                bne _delimiter_loop
.8641	fa		plx		                plx
.8642	18		clc		                clc
.8643	60		rts		                rts
.8644					_found_delimiter:
.8644	fa		plx		                plx
.8645					_is_delimiter:
.8645	38		sec		                sec
.8646					_delimiter_done:
.8646	60		rts		                rts
.8647					help_is_extended_alpha:
.8647	18		clc		                clc
.8648	da		phx		                phx
.8649	ae 3a 8a	ldx $8a3a	                ldx s_extended          ; length of extended chars string
.864c					_alpha_loop:
.864c	dd 3a 8a	cmp $8a3a,x	                cmp s_extended,X
.864f	f0 06		beq $8657	                beq _found_extended
.8651	ca		dex		                dex
.8652	d0 f8		bne $864c	                bne _alpha_loop
.8654	fa		plx		                plx
.8655	18		clc		                clc
.8656	60		rts		                rts
.8657					_found_extended:
.8657	fa		plx		                plx
.8658					_is_extrended:
.8658	38		sec		                sec
.8659					_extended_done:
.8659	60		rts		                rts
.865a					help_is_letter:
.865a	c9 41		cmp #$41	                cmp #'A'
.865c	90 0c		bcc $866a	                bcc _not_letter       ; too low
.865e	c9 5b		cmp #$5b	                cmp #'Z'+1
.8660	90 0a		bcc $866c	                bcc _uppercase
.8662	c9 61		cmp #$61	                cmp #'a'
.8664	90 04		bcc $866a	                bcc _not_letter       ; between upper- and lowercase
.8666	c9 7b		cmp #$7b	                cmp #'z'+1
.8668	90 05		bcc $866f	                bcc _is_letter
.866a					_not_letter:
.866a	18		clc		                clc
.866b	60		rts		                rts
.866c					_uppercase:
.866c	18		clc		                clc
.866d	69 20		adc #$20	                adc #'a'-'A'    ; 32, if you're curious
.866f					_is_letter:
.866f	38		sec		                sec             ; TODO testing
.8670	60		rts		                rts
.8671					help_is_whitespace:
.8671	38		sec		                sec             ; default is whitespace
.8672	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.8674	f0 11		beq $8687	                beq _done
.8676	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.8678	f0 0d		beq $8687	                beq _done
.867a	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.867c	f0 09		beq $8687	                beq _done
.867e	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.8680	f0 05		beq $8687	                beq _done
.8682	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.8684	f0 01		beq $8687	                beq _done
.8686	18		clc		                clc             ; If we end up here, it's not whitespace
.8687					_done:
.8687	60		rts		                rts
.8688					help_hexascii_to_value:
.8688	20 23 86	jsr $8623	                jsr help_is_decdigit
.868b	90 05		bcc $8692	                bcc _see_if_letter
.868d	38		sec		                sec
.868e	e9 30		sbc #$30	                sbc #'0'
.8690	80 0f		bra $86a1	                bra _done
.8692					_see_if_letter:
.8692	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.8694	90 17		bcc $86ad	                bcc _error
.8696	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.8698	b0 13		bcs $86ad	                bcs _error
.869a	c9 61		cmp #$61	                cmp #'a'
.869c	90 06		bcc $86a4	                bcc _uppercase
.869e	38		sec		                sec
.869f	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.86a1					_done:
.86a1	29 0f		and #$0f	                and #$0F        ; paranoid
.86a3	60		rts		                rts
.86a4					_uppercase:
.86a4	c9 47		cmp #$47	                cmp #'G'
.86a6	b0 05		bcs $86ad	                bcs _error
.86a8	38		sec		                sec
.86a9	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.86ab	80 f4		bra $86a1	                bra _done
.86ad					_error:
.86ad	a9 80		lda #$80	                lda #$80
.86af	60		rts		                rts
.86b0					help_walk_init:
.86b0	84 1a		sty $1a		                sty walk_curr           ; LSB
.86b2	85 1b		sta $1b		                sta walk_curr+1         ; MSB
.86b4	80 10		bra $86c6	                bra help_walk_common
.86b6					help_walk_next:
.86b6	b2 1a		lda ($1a)	                lda (walk_curr)
.86b8	48		pha		                pha
.86b9	a0 01		ldy #$01	                ldy #1
.86bb	b1 1a		lda ($1a),y	                lda (walk_curr),y       ; MSB
.86bd	29 0f		and #$0f	                and #$0F                ; mask the pair tag
.86bf	05 10		ora $10		                ora rsn_ast             ; replace by nibble for the AST
.86c1	85 1b		sta $1b		                sta walk_curr+1
.86c3	68		pla		                pla
.86c4	85 1a		sta $1a		                sta walk_curr           ; LSB
.86c6					help_walk_common:
.86c6	b2 1a		lda ($1a)	                lda (walk_curr)
.86c8	85 1e		sta $1e		                sta walk_cdr            ; LSB
.86ca	a0 01		ldy #$01	                ldy #1
.86cc	b1 1a		lda ($1a),y	                lda (walk_curr),y
.86ce	85 1f		sta $1f		                sta walk_cdr+1          ; MSB
.86d0	c8		iny		                iny
.86d1	18		clc		                clc                     ; default is not last pair
.86d2	05 1e		ora $1e		                ora walk_cdr            ; LSB
.86d4	d0 01		bne $86d7	                bne _store_car
.86d6	38		sec		                sec                     ; last pair, mark by setting carry flag
.86d7					_store_car:
.86d7	b1 1a		lda ($1a),y	                lda (walk_curr),y       ; LSB
.86d9	85 1c		sta $1c		                sta walk_car
.86db	48		pha		                pha                     ; We return this later in Y
.86dc	c8		iny		                iny
.86dd	b1 1a		lda ($1a),y	                lda (walk_curr),y       ; MSB
.86df	85 1d		sta $1d		                sta walk_car+1
.86e1	7a		ply		                ply
.86e2	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm

.86e3					proc_car:
.86e3					proc_cdr:
.86e3					proc_cons:
.86e3	4c ae 84	jmp $84ae	                jmp eval_next
.86e6					proc_exit:
.86e6	4c da 85	jmp $85da	                jmp repl_quit
.86e9					proc_newline:
.86e9	20 f9 85	jsr $85f9	                jsr help_emit_lf
.86ec	4c ae 84	jmp $84ae	                jmp eval_next
.86ef					proc_not:
.86ef	a5 1d		lda $1d		                lda walk_car+1          ; get MSB for object tag
.86f1	29 f0		and #$f0	                and #$F0                ; we only want the tag for now
.86f3	d0 00		bne $86f5	                bne _not_a_bool
.86f5					_not_a_bool:
.86f5					spec_and:
.86f5					spec_begin:
.86f5					spec_define:
.86f5					spec_if:
.86f5					spec_lambda:
.86f5					spec_let:
.86f5					spec_or:
.86f5					spec_quote:
.86f5					spec_set_e:
.86f5	4c ae 84	jmp $84ae	                jmp eval_next                   ; TODO for testing, protect table
.86f8					exec_table_lsb:
>86f8	c2				        .byte <proc_apply       ; 00
>86f9	f5				        .byte <spec_quote       ; 01
>86fa	e6				        .byte <proc_exit        ; 02
>86fb	e9				        .byte <proc_newline     ; 03
>86fc	e3				        .byte <proc_car         ; 04
>86fd	e3				        .byte <proc_cdr         ; 05
>86fe	e3				        .byte <proc_cons        ; 06
>86ff	f5				        .byte <spec_define      ; 07
>8700	f5				        .byte <spec_if          ; 08
>8701	ef				        .byte <proc_not         ; 09
.8702					exec_table_msb:
>8702	84				        .byte >proc_apply       ; 00
>8703	86				        .byte >spec_quote       ; 01
>8704	86				        .byte >proc_exit        ; 02
>8705	86				        .byte >proc_newline     ; 03
>8706	86				        .byte >proc_car         ; 04
>8707	86				        .byte >proc_cdr         ; 05
>8708	86				        .byte >proc_cons        ; 06
>8709	86				        .byte >spec_define      ; 07
>870a	86				        .byte >spec_if          ; 08
>870b	86				        .byte >proc_not         ; 09
.870c					proc_char_whitespace_p:
.870c					proc_display:
.870c					proc_read:
.870c					proc_read_char:
.870c					proc_read_line:
.870c					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../compounds.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.870c					debug_dump_input:
.870c	20 f9 85	jsr $85f9	                jsr help_emit_lf
.870f	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.8711	20 fc 87	jsr $87fc	                jsr debug_print_string_no_lf
.8714	a2 00		ldx #$00	                ldx #0
.8716					-
.8716	bd 00 02	lda $0200,x	                lda cib,x
.8719	f0 0b		beq $8726	                beq _done
.871b	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.871e	e8		inx		                inx
.871f	a9 20		lda #$20	                lda #' '
.8721	20 fb 85	jsr $85fb	                jsr help_emit_a
.8724	80 f0		bra $8716	                bra -
.8726					_done:
.8726	4c e2 85	jmp $85e2	                jmp help_byte_to_ascii          ; JSR/RTS
.8729					debug_dump_token:
.8729	20 f9 85	jsr $85f9	                jsr help_emit_lf
.872c	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.872e	20 fc 87	jsr $87fc	                jsr debug_print_string_no_lf
.8731	a2 00		ldx #$00	                ldx #0
.8733					-
.8733	bd 00 03	lda $0300,x	                lda tkb,x
.8736	c9 00		cmp #$00	                cmp #T_END
.8738	f0 0d		beq $8747	                beq _done
.873a	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.873d	e8		inx		                inx
.873e	a9 20		lda #$20	                lda #' '
.8740	20 fb 85	jsr $85fb	                jsr help_emit_a
.8743	e4 0e		cpx $0e		                cpx tkbp
.8745	d0 ec		bne $8733	                bne -
.8747					_done:
.8747	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.874a	4c f9 85	jmp $85f9	                jmp help_emit_lf                ; JSR/RTS
.874d					debug_dump_hp:
.874d	20 f9 85	jsr $85f9	                jsr help_emit_lf
.8750	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.8752	20 fc 87	jsr $87fc	                jsr debug_print_string_no_lf
.8755	a5 14		lda $14		                lda hp_ast+1
.8757	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.875a	a5 13		lda $13		                lda hp_ast
.875c	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.875f	4c f9 85	jmp $85f9	                jmp help_emit_lf                ; JSR/RTS
.8762					debug_dump_ast:
.8762	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST root: "
.8764	20 fc 87	jsr $87fc	                jsr debug_print_string_no_lf
.8767	a5 10		lda $10		                lda rsn_ast             ; RAM segment nibble
.8769	48		pha		                pha                     ; save MSB
.876a	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii  ; print MSB
.876d	a0 02		ldy #$02	                ldy #2                  ; By definition
.876f	98		tya		                tya
.8770	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii  ; print LSB
.8773	68		pla		                pla                     ; get MSB back
.8774	20 b0 86	jsr $86b0	                jsr help_walk_init
.8777					_debug_dump_ast_loop:
.8777	08		php		                php
.8778	a9 04		lda #$04	                lda #strd_dump_arrow            ; "--> "
.877a	20 fc 87	jsr $87fc	                jsr debug_print_string_no_lf
.877d	a5 1f		lda $1f		                lda walk_cdr+1
.877f	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii          ; MSB
.8782	a5 1e		lda $1e		                lda walk_cdr
.8784	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii          ; LSB
.8787	a9 3a		lda #$3a	                lda #':'
.8789	20 fb 85	jsr $85fb	                jsr help_emit_a
.878c	a5 1d		lda $1d		                lda walk_car+1
.878e	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii          ; MSB
.8791	a5 1c		lda $1c		                lda walk_car
.8793	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii          ; LSB
.8796	28		plp		                plp
.8797	b0 05		bcs $879e	                bcs _debug_dump_ast_done
.8799	20 b6 86	jsr $86b6	                jsr help_walk_next
.879c	80 d9		bra $8777	                bra _debug_dump_ast_loop
.879e					_debug_dump_ast_done:
.879e	20 f9 85	jsr $85f9	                jsr help_emit_lf
.87a1	60		rts		                rts
.87a2					debug_dump_ds:
.87a2	da		phx		                phx
.87a3	5a		phy		                phy
.87a4	a2 ff		ldx #$ff	                ldx #ds_start
.87a6	a9 00		lda #$00	                lda #00                         ; MSB always 00
.87a8	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87ab	a9 ff		lda #$ff	                lda #$FF
.87ad	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87b0	a9 3a		lda #$3a	                lda #':'
.87b2	20 fb 85	jsr $85fb	                jsr help_emit_a                 ; "00FF:"
.87b5	b5 00		lda $00,x	                lda 0,x
.87b7	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87ba	20 f9 85	jsr $85f9	                jsr help_emit_lf
.87bd					_loop:
.87bd	a9 00		lda #$00	                lda #00                         ; MSB by definition
.87bf	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87c2	ca		dex		                dex                             ; LSB
.87c3	ca		dex		                dex
.87c4	8a		txa		                txa
.87c5	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87c8	a9 3a		lda #$3a	                lda #':'
.87ca	20 fb 85	jsr $85fb	                jsr help_emit_a                 ; "00FD:"
.87cd	b5 01		lda $01,x	                lda 1,x                         ; MSB
.87cf	f0 0d		beq $87de	                beq _check_end
.87d1					_not_done:
.87d1	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87d4	b5 00		lda $00,x	                lda 0,x                         ; LSB
.87d6	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87d9	20 f9 85	jsr $85f9	                jsr help_emit_lf
.87dc	80 df		bra $87bd	                bra _loop
.87de					_check_end:
.87de	b5 00		lda $00,x	                lda 0,x                         ; LSB
.87e0	f0 04		beq $87e6	                beq _clean_up
.87e2	b5 01		lda $01,x	                lda 1,x
.87e4	80 eb		bra $87d1	                bra _not_done
.87e6					_clean_up:
.87e6	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87e9	a9 00		lda #$00	                lda #00
.87eb	20 e2 85	jsr $85e2	                jsr help_byte_to_ascii
.87ee					_done:
.87ee	7a		ply		                ply
.87ef	fa		plx		                plx
.87f0	60		rts		                rts
.87f1					debug_emit_a:
.87f1	48		pha		                pha
.87f2	20 f9 85	jsr $85f9	                jsr help_emit_lf
.87f5	68		pla		                pla
.87f6	20 fb 85	jsr $85fb	                jsr help_emit_a
.87f9	4c f9 85	jmp $85f9	                jmp help_emit_lf        ; JSR/RTS
.87fc					debug_print_string_no_lf:
.87fc	0a		asl a		                asl
.87fd	a8		tay		                tay
.87fe	b9 7e 88	lda $887e,y	                lda sd_table,y
.8801	85 20		sta $20		                sta tmp0                ; LSB
.8803	c8		iny		                iny
.8804	b9 7e 88	lda $887e,y	                lda sd_table,y
.8807	85 21		sta $21		                sta tmp0+1              ; MSB
.8809					debug_print_common:
.8809	a0 00		ldy #$00	                ldy #0
.880b					_loop:
.880b	b1 20		lda ($20),y	                lda (tmp0),y
.880d	f0 06		beq $8815	                beq _done               ; strings are zero-terminated
.880f	20 fb 85	jsr $85fb	                jsr help_emit_a         ; allows vectoring via output
.8812	c8		iny		                iny
.8813	80 f6		bra $880b	                bra _loop
.8815					_done:
.8815	60		rts		                rts
.8816					debug_print_string:
.8816	20 fc 87	jsr $87fc	                jsr debug_print_string_no_lf
.8819	4c f9 85	jmp $85f9	                jmp help_emit_lf        ; JSR/RTS
=0					strd_dump_token  = 0
=1					strd_dump_ast    = 1
=2					strd_dump_hp     = 2
=3					strd_dump_input  = 3
=4					strd_dump_arrow  = 4
=5					strd_dump_strtbl = 5
=6					strd_dump_str    = 6
>881c	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>8824	66 66 65 72 3a 20 00
>882b	41 53 54 20 72 6f 6f 74		s_dump_ast:     .null   "AST root: "
>8833	3a 20 00
>8836	41 53 54 20 68 65 61 70		s_dump_hp:      .null   "AST heap pointer: "
>883e	20 70 6f 69 6e 74 65 72 3a 20 00
>8849	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>8851	66 66 65 72 3a 20 00
>8858	20 2d 2d 3e 20 00		s_dump_arrow:   .null   " --> "
>885e	53 74 72 69 6e 67 20 74		s_dump_strtbl:  .null   "String table: "
>8866	61 62 6c 65 3a 20 00
>886d	53 74 72 69 6e 67 20 70		s_dump_str:     .null   "String pointer: "
>8875	6f 69 6e 74 65 72 3a 20 00
.887e					sd_table:
>887e	1c 88 2b 88 36 88 49 88		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input    ; 0-3
>8886	58 88 5e 88 6d 88		        .word s_dump_arrow, s_dump_strtbl, s_dump_str              ; 4-7

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					dsp     .byte ?      ;  Offset for Data Stack pointer
>0001					output:  .word ?     ; output port, addr of routine
>0003					input:   .word ?     ; input port, addr of routine
>0005					jump:    .word ?     ; target for indirect jumps, used by evaluator
>0007					input_f  .byte ?     ; input flag for Reader, see details there
>0008					ciblen:  .word ?     ; current size of input buffer
>000a					cibp:    .word ?     ; index of current char in input buffer
>000c					tkblen:  .word ?     ; current size of the token buffer
>000e					tkbp:    .word ?     ; index of current token in token buffer
>0010					rsn_ast  .byte ?     ; RAM segment nibble for AST segment (default 1)
>0011					astp     .word ?     ; pointer to current entry in AST
>0013					hp_ast   .word ?     ; next free byte in AST RAM segment
>0015					rsn_str  .byte ?     ; RAM segment nibble for strings (default 2)
>0016					strp     .word ?     ; pointer to current entry in string table
>0018					hp_str   .word ?     ; next free byte in string RAM segment
>001a					walk_curr   .word ?  ; Pointer (addr) to current pair in AST
>001c					walk_car    .word ?  ; Contents of current pair's car field
>001e					walk_cdr    .word ?  ; Contents of current pair's cdr field
>0020					tmp0:    .word ?     ; temporary storage, eg printing
>0022					tmp1:    .word ?     ; temporary storage
>0024					tmp2:    .word ?     ; temporary storage
=x'ff'					ds_start = <(zp_start + zp_size - 1) ; By default $00FF
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00   ; used for the empty list and terminators
=$10					OT_BOOL         = $10   ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20   ; used for fixed numbers; immediate
=$30					OT_CHAR         = $30   ; reserved for chars; immediate
=$40					OT_STRING       = $40   ; used for strings; interned
=$50					OT_BIGNUM       = $50   ; reserved for bignum
=$60					OT_VAR          = $60   ; used for variables
=$70					ot_undefined_07 = $70
=$80					OT_PAIR         = $80   ; used for pairs, so in cons cell cdr field
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					OT_SPEC         = $e0   ; special forms such as (lambda) or (if)
=$f0					OT_PROC         = $f0   ; built-in procedures

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.888c					proc_headers:
.888c					h_proc_apply:
>888c	96 88				        .word h_spec_quote      ; link to next entry in list (as 16-bit addr)
>888e	00				        .byte 00                ; offset in jump table  (LSB)
>888f	f0				        .byte OT_PROC           ; object tag
>8890	61 70 70 6c 79 00		        .null "apply"           ; lower-case string, zero terminated
.8896					h_spec_quote:
>8896	a0 88				        .word h_proc_car
>8898	01				        .byte 01
>8899	e0				        .byte OT_SPEC
>889a	71 75 6f 74 65 00		        .null "quote"
.88a0					h_proc_car:
>88a0	a8 88				        .word h_proc_cdr
>88a2	04				        .byte 04
>88a3	f0				        .byte OT_PROC
>88a4	63 61 72 00			        .null "car"
.88a8					h_proc_cdr:
>88a8	b0 88				        .word h_proc_cons
>88aa	05				        .byte 05
>88ab	f0				        .byte OT_PROC
>88ac	63 64 72 00			        .null "cdr"
.88b0					h_proc_cons:
>88b0	b9 88				        .word h_spec_define
>88b2	06				        .byte 06
>88b3	f0				        .byte OT_PROC
>88b4	63 6f 6e 73 00			        .null "cons"
.88b9					h_spec_define:
>88b9	c4 88				        .word h_spec_if
>88bb	07				        .byte 07
>88bc	e0				        .byte OT_SPEC
>88bd	64 65 66 69 6e 65 00		        .null "define"
.88c4					h_spec_if:
>88c4	cb 88				        .word h_proc_newline
>88c6	08				        .byte 08
>88c7	e0				        .byte OT_SPEC
>88c8	69 66 00			        .null "if"
.88cb					h_proc_newline:
>88cb	d7 88				        .word h_proc_not
>88cd	03				        .byte 03
>88ce	f0				        .byte OT_PROC
>88cf	6e 65 77 6c 69 6e 65 00		        .null "newline"
.88d7					h_proc_not:
>88d7	df 88				        .word h_proc_exit
>88d9	09				        .byte 09
>88da	f0				        .byte OT_PROC
>88db	6e 6f 74 00			        .null "not"
.88df					h_proc_exit:
>88df	00 00				        .word 0000              ; end lf list
>88e1	02				        .byte 02
>88e2	f0				        .byte OT_PROC
>88e3	65 78 69 74 00			        .null "exit"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound      = 0
=1					str_unspec       = 1
=2					str_true         = 2
=3					str_false        = 3
=4					str_bad_token    = 4
=5					str_bad_object   = 5
=6					str_bad_number   = 6
=7					str_bad_radix    = 7
=8					str_cant_yet     = 8    ; TODO temp during development
=9					str_UNUSED_1     = 9    ; TODO currently unused
=10					str_chant        = 10
=11					str_prompt       = 11
=12					str_UNUSED_2     = 12   ; TODO currently unused
=13					str_proc_prt     = 13
=14					str_special_prt  = 14
=15					str_cant_apply   = 15
.88e8					string_table:
>88e8	06 89 19 89 32 89 35 89		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>88f0	38 89 4c 89 67 89 7c 89		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>88f8	90 89 a9 89 b9 89 ed 89		        .word s_cant_yet, s_UNUSED_1, s_chant, s_prompt             ; 8-11
>8900	f0 89 00 8a 0d 8a		        .word s_UNUSED_2, s_proc_prt, s_special_prt                 ; 12-15
>8906	55 6e 62 6f 75 6e 64 20		s_unbound:      .null   "Unbound variable: "            ; REPL input error
>890e	76 61 72 69 61 62 6c 65 3a 20 00
>8919	55 6e 73 70 65 63 69 66		s_unspec:       .null   "Unspecified return value"      ; used eg with (display)
>8921	69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75 65
>8931	00
>8932	23 74 00			s_true:         .null   "#t"
>8935	23 66 00			s_false:        .null   "#f"
>8938	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>8940	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>894c	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>8954	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>8964	3a 20 00
>8967	49 6c 6c 2d 66 6f 72 6d		s_bad_number:   .null   "Ill-formed number: $"          ; from lexer
>896f	65 64 20 6e 75 6d 62 65 72 3a 20 24 00
>897c	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>8984	61 64 20 72 61 64 69 78 3a 20 24 00
>8990	41 4c 50 48 41 3a 20 43		s_cant_yet:     .null   "ALPHA: Can't do that yet"      ; from parser
>8998	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>89a8	00
>89a9	53 54 52 49 4e 47 20 55		s_UNUSED_1      .null   "STRING UNUSED 1"
>89b1	4e 55 53 45 44 20 31 00
>89b9	50 68 27 6e 67 6c 75 69		s_chant:        .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."
>89c1	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>89d1	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>89e1	61 67 6c 20 66 68 74 61 67 6e 2e 00
>89ed	3e 20 00			s_prompt:       .null   "> "
>89f0	53 54 52 49 4e 47 20 55		s_UNUSED_2      .null   "STRING UNUSED 2"
>89f8	4e 55 53 45 44 20 32 00
>8a00	23 3c 70 72 6f 63 65 64		s_proc_prt:     .null   "#<procedure:"                  ; from printer
>8a08	75 72 65 3a 00
>8a0d	23 3c 73 70 65 63 69 61		s_special_prt:  .null   "#<special:"                    ; from printer
>8a15	6c 3a 00
>8a18	4f 62 6a 65 63 74 20 6e		s_cant_apply:   .null   "Object not applicable"         ; from apply
>8a20	6f 74 20 61 70 70 6c 69 63 61 62 6c 65 00
>8a2e	0b 5b 5d 7b 7d 7c 60 22		s_delimiters:   .ptext "[]{}|`""';()"
>8a36	27 3b 28 29
>8a3a	12 21 24 25 26 2a 2b 2d		s_extended:     .ptext "!$%&*+-./:<=>?@^_~"
>8a42	2e 2f 3a 3c 3d 3e 3f 40 5e 5f 7e
>8a4d	61 62 63 64 65 66 67 68		s_letters:      .null "abcdefghijklmnopqrstuvwxyz"
>8a55	69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78
>8a65	79 7a 00
>8a68	30 31 32 33 34 35 36 37		s_digits:       .null "0123456789"
>8a70	38 39 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (13. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 31 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
