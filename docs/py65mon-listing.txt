
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Mon Apr  6 10:08:26 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 08		sta $08		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 09		sta $09		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 14		sta $14		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 15		sta $15		                sta hp+1
.8011	64 16		stz $16		                stz symtbl
.8013	64 17		stz $17		                stz symtbl+1
.8015	64 18		stz $18		                stz strtbl
.8017	64 19		stz $19		                stz strtbl+1
.8019	64 1a		stz $1a		                stz bnmtbl
.801b	64 1b		stz $1b		                stz bnmtbl+1
.801d	64 1c		stz $1c		                stz ast
.801f	64 1d		stz $1d		                stz ast+1
.8021	a9 21		lda #$21	                lda #<kernel_getc
.8023	85 0a		sta $0a		                sta input
.8025	a9 f0		lda #$f0	                lda #>kernel_putc
.8027	85 0b		sta $0b		                sta input+1
.8029					repl:
.8029	64 0c		stz $0c		                stz ciblen
.802b	64 0d		stz $0d		                stz ciblen+1
.802d					repl_read:
.802d	a0 00		ldy #$00	                ldy #0
.802f	a9 3e		lda #$3e	                lda #'>'
.8031	20 d8 81	jsr $81d8	                jsr help_emit_a
.8034	a9 20		lda #$20	                lda #' '
.8036	20 d8 81	jsr $81d8	                jsr help_emit_a
.8039					repl_read_loop:
.8039	20 db 81	jsr $81db	                jsr help_key_a
.803c	c9 0a		cmp #$0a	                cmp #AscLF
.803e	f0 17		beq $8057	                beq repl_read_eol
.8040	c9 0d		cmp #$0d	                cmp #AscCR
.8042	f0 13		beq $8057	                beq repl_read_eol
.8044	c9 08		cmp #$08	                cmp #AscBS
.8046	f0 16		beq $805e	                beq repl_read_backspace
.8048	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.804a	f0 12		beq $805e	                beq repl_read_backspace
.804c	99 00 02	sta $0200,y	                sta cib,y
.804f	c8		iny		                iny
.8050	20 d8 81	jsr $81d8	                jsr help_emit_a
.8053	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8055	d0 e2		bne $8039	                bne repl_read_loop    ; fall thru if buffer limit reached
.8057					repl_read_eol:
.8057					repl_read_buffer_full:
.8057	84 0c		sty $0c		                sty ciblen      ; Y contains number of chars accepted already
.8059	64 0d		stz $0d		                stz ciblen+1    ; we only accept 256 chars
.805b	4c 7d 80	jmp $807d	                jmp lexer
.805e					repl_read_backspace:
.805e	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8060	d0 06		bne $8068	                bne +
.8062	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8064	20 d8 81	jsr $81d8	                jsr help_emit_a
.8067	c8		iny		                iny
.8068					+
.8068	88		dey		                dey
.8069	a9 08		lda #$08	                lda #AscBS      ; move back one
.806b	20 d8 81	jsr $81d8	                jsr help_emit_a
.806e	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8070	20 d8 81	jsr $81d8	                jsr help_emit_a
.8073	a9 08		lda #$08	                lda #AscBS      ; move back over space
.8075	20 d8 81	jsr $81d8	                jsr help_emit_a
.8078	80 bf		bra $8039	                bra repl_read_loop
.807a					repl_done:
.807a	4c 29 80	jmp $8029	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../lexer.asm

.807d					lexer:
.807d	a0 00		ldy #$00	                ldy #0
.807f	64 0e		stz $0e		                stz cibp
.8081	64 0f		stz $0f		                stz cibp+1      ; MSB currently unused
.8083	64 12		stz $12		                stz tkbp
.8085	64 13		stz $13		                stz tkbp+1      ; MSB currently unused
.8087					lexer_loop:
.8087	b9 00 02	lda $0200,y	                lda cib,y
.808a	c9 40		cmp #$40	                cmp #'@'
.808c	d0 01		bne $808f	                bne +
.808e	00		brk #		                brk
.808f					+
.808f	20 d5 80	jsr $80d5	                jsr lexer_eat_whitespace
.8092					_test_parens:
.8092					_test_sharp:
.8092	c9 23		cmp #$23	                cmp #'#'
.8094	d0 1c		bne $80b2	                bne _post_sharp_test    ; TODO weird label, but keep during editing
.8096	c8		iny		                iny                     ; TODO see if we're past end of buffer
.8097	b9 00 02	lda $0200,y	                lda cib,y
.809a	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.809c	d0 08		bne $80a6	                bne _test_bool_false
.809e	a9 10		lda #$10	                lda #T_TRUE
.80a0	20 ca 80	jsr $80ca	                jsr lexer_add_token
.80a3	4c ba 80	jmp $80ba	                jmp lexer_next
.80a6					_test_bool_false:
.80a6	c9 66		cmp #$66	                cmp #'f'
.80a8	d0 08		bne $80b2	                bne _test_char
.80aa	a9 11		lda #$11	                lda #T_FALSE
.80ac	20 ca 80	jsr $80ca	                jsr lexer_add_token
.80af	4c ba 80	jmp $80ba	                jmp lexer_next
.80b2					_test_char:
.80b2					_test_vector:
.80b2					_test_radix:
.80b2					_post_sharp_test:
.80b2					_test_string:
.80b2					_test_number:
.80b2					_test_comment:
.80b2					lexer_error:
.80b2	a9 00		lda #$00	                lda #str_unbound
.80b4	20 f8 81	jsr $81f8	                jsr help_print_string
.80b7	4c 29 80	jmp $8029	                jmp repl
.80ba					lexer_next:
.80ba	c8		iny		                iny
.80bb	c4 0c		cpy $0c		                cpy ciblen
.80bd	f0 03		beq $80c2	                beq _end_of_input
.80bf	4c 87 80	jmp $8087	                jmp lexer_loop
.80c2					_end_of_input:
.80c2	a9 00		lda #$00	                lda #T_END
.80c4	20 ca 80	jsr $80ca	                jsr lexer_add_token
.80c7	4c d6 80	jmp $80d6	                jmp parser
.80ca					lexer_add_token:
.80ca	5a		phy		                phy             ; Could also store in cibp
.80cb	a4 12		ldy $12		                ldy tkbp
.80cd	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.80d0	c8		iny		                iny
.80d1	84 12		sty $12		                sty tkbp
.80d3	7a		ply		                ply
.80d4	60		rts		                rts
.80d5					lexer_eat_whitespace:
.80d5	60		rts		        rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01    ; '('
=$02					T_PAREN_CLOSED  = $02    ; ')'
=$03					T_SHARP         = $03    ; '#' - note '#f', '#t' and others are precprocessed
=$04					T_LETTER        = $04    ; 'a' ... 'z', followed by single-byte ASCII letter
=$10					T_TRUE          = $10   ; '#t'
=$11					T_FALSE         = $11   ; '#f'
=$12					T_STRING        = $12   ; followed by 16-bit (12-bit) pointer to string in table
=$13					T_FIXNUM        = $13   ; followed by 16-bit (12-bit) number
=$14					T_SYMBOL        = $14   ; followed by 16-bit (12-bit) pointer to symbol in table
=$15					T_BIGNUM        = $15   ; followed by 16-bit (12-bit) pointer to number in table

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../parser.asm

.80d6					parser:
.80d6	20 0b 82	jsr $820b	                jsr debug_dump_token
.80d9	64 1c		stz $1c		                stz ast
.80db	64 1d		stz $1d		                stz ast+1
.80dd	64 12		stz $12		                stz tkbp
.80df	64 13		stz $13		                stz tkbp+1      ; currently only using LSB
.80e1	a9 1c		lda #$1c	                lda <#ast
.80e3	85 1e		sta $1e		                sta astp
.80e5	a9 00		lda #$00	                lda >#ast       ; paranoid, MSB always 00 for zero page
.80e7	85 1f		sta $1f		                sta astp+1
.80e9	a2 00		ldx #$00	                ldx #0
.80eb					parser_loop:
.80eb	bd 00 03	lda $0300,x	                lda tkb,x
.80ee					_end_token:
.80ee	c9 00		cmp #$00	                cmp #T_END
.80f0	d0 00		bne $80f2	                bne _true_token
.80f2					_true_token:
.80f2	c9 10		cmp #$10	                cmp #T_TRUE
.80f4	d0 0a		bne $8100	                bne _false_token
.80f6	a9 ff		lda #$ff	                lda <#OC_TRUE
.80f8	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.80fa	20 25 81	jsr $8125	                jsr parser_add_object
.80fd	4c 1b 81	jmp $811b	                jmp parser_done
.8100					_false_token:
.8100	c9 11		cmp #$11	                cmp #T_FALSE
.8102	d0 0a		bne $810e	                bne paser_bad_token     ; TODO HIER ADD NEXT TOKEN TODO
.8104	a9 00		lda #$00	                lda <#OC_FALSE
.8106	a0 10		ldy #$10	                ldy >#OC_FALSE
.8108	20 25 81	jsr $8125	                jsr parser_add_object
.810b	4c 1b 81	jmp $811b	                jmp parser_done
.810e					paser_bad_token:
.810e	48		pha		                pha                             ; save the evil token
.810f	a9 04		lda #$04	                lda #str_bad_token
.8111	20 de 81	jsr $81de	                jsr help_print_string_no_lf
.8114	68		pla		                pla
.8115	20 d8 81	jsr $81d8	                jsr help_emit_a                 ; print bad token as hex number
.8118	4c 29 80	jmp $8029	                jmp repl
.811b					parser_done:
.811b	a9 00		lda #$00	                lda <#OC_END
.811d	a2 00		ldx #$00	                ldx >#OC_END
.811f	20 25 81	jsr $8125	                jsr parser_add_object
.8122	4c 5d 81	jmp $815d	                jmp eval                ; continue with evaluation
.8125					parser_add_object:
.8125	5a		phy		                phy             ; save MSB of the object
.8126	48		pha		                pha             ; save LSB of the object
.8127	a5 14		lda $14		                lda hp
.8129	85 02		sta $02		                sta tmp0
.812b	a5 15		lda $15		                lda hp+1
.812d	85 03		sta $03		                sta tmp0+1
.812f	a9 00		lda #$00	                lda <#OC_END
.8131	a0 00		ldy #$00	                ldy #0
.8133	91 14		sta ($14),y	                sta (hp),y
.8135	c8		iny		                iny
.8136	a9 00		lda #$00	                lda >#OC_END
.8138	91 14		sta ($14),y	                sta (hp),y
.813a	c8		iny		                iny
.813b	68		pla		                pla             ; retrieve LSB
.813c	91 14		sta ($14),y	                sta (hp),y
.813e	c8		iny		                iny
.813f	68		pla		                pla             ; retrieve MSB, was in Y
.8140	91 14		sta ($14),y	                sta (hp),y
.8142	c8		iny		                iny
.8143	98		tya		                tya
.8144	18		clc		                clc
.8145	65 14		adc $14		                adc hp
.8147	85 14		sta $14		                sta hp
.8149	90 02		bcc $814d	                bcc +
.814b	e6 15		inc $15		                inc hp+1
.814d					+
.814d	a5 02		lda $02		                lda tmp0        ; original LSB of hp
.814f	aa		tax		                tax             ; We'll need it again in a second
.8150	92 1e		sta ($1e)	                sta (astp)
.8152	a0 01		ldy #$01	                ldy #1
.8154	a5 03		lda $03		                lda tmp0+1      ; original MSB of hp
.8156	91 1e		sta ($1e),y	                sta (astp),y
.8158	85 1f		sta $1f		                sta astp+1      ; MSB, was tmp0+1
.815a	86 1e		stx $1e		                stx astp        ; LSB, was tmp0
.815c	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../eval.asm

.815d					eval:
.815d	20 42 82	jsr $8242	                jsr debug_dump_ast
.8160	20 2e 82	jsr $822e	                jsr debug_dump_hp
.8163					eval_done:
.8163	4c 66 81	jmp $8166	                jmp printer

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../printer.asm

.8166					printer:
.8166	20 42 82	jsr $8242	        jsr debug_dump_ast
.8169	a9 0a		lda #$0a	        lda #AscLF
.816b	20 d8 81	jsr $81d8	        jsr help_emit_a
.816e	a5 1c		lda $1c		                lda ast
.8170	85 04		sta $04		                sta tmp1
.8172	a5 1d		lda $1d		                lda ast+1
.8174	85 05		sta $05		                sta tmp1+1
.8176					printer_loop:
.8176	a0 03		ldy #$03	                ldy #3                  ; MSB of the next node entry down ...
.8178	b1 04		lda ($04),y	                lda (tmp1),y            ; ...  which contains the tag nibble
.817a	29 f0		and #$f0	                and #$f0                ; mask all but tag nibble
.817c					_check_for_meta:
.817c	c9 00		cmp #$00	                cmp #ot_meta
.817e	d0 07		bne $8187	                bne _not_meta
.8180	12 04		ora ($04)	                ora (tmp1)              ; LSB
.8182	d0 19		bne $819d	                bne printer_error       ; We're in trouble, panic and re-REPL
.8184	4c be 81	jmp $81be	                jmp printer_done
.8187					_not_meta:
.8187	c9 10		cmp #$10	                cmp #ot_bool
.8189	d0 12		bne $819d	                bne _not_bool
.818b	a0 02		ldy #$02	                ldy #2
.818d	b1 04		lda ($04),y	                lda (tmp1),y            ; LSB
.818f	d0 04		bne $8195	                bne _bool_true          ; not a zero means true
.8191	a9 03		lda #$03	                lda #str_false
.8193	80 02		bra $8197	                bra _bool_printer
.8195					_bool_true:
.8195	a9 02		lda #$02	                lda #str_true
.8197					_bool_printer:
.8197	20 f8 81	jsr $81f8	                jsr help_print_string
.819a	4c b0 81	jmp $81b0	                jmp printer_next
.819d					_not_bool:
.819d					printer_error:
.819d	a5 05		lda $05		                lda str_bad_object
.819f	20 de 81	jsr $81de	                jsr help_print_string_no_lf
.81a2	a0 01		ldy #$01	                ldy #1
.81a4	b1 04		lda ($04),y	                lda (tmp1),y
.81a6	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.81a9	b2 04		lda ($04)	                lda (tmp1)
.81ab	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.81ae	80 0e		bra $81be	                bra printer_done
.81b0					printer_next:
.81b0	b2 04		lda ($04)	                lda (tmp1)              ; LSB of next entry
.81b2	aa		tax		                tax
.81b3	a0 01		ldy #$01	                ldy #1
.81b5	b1 04		lda ($04),y	                lda (tmp1),y            ; MSB of next entry
.81b7	85 05		sta $05		                sta tmp1+1
.81b9	86 04		stx $04		                stx tmp1
.81bb	4c 76 81	jmp $8176	                jmp printer_loop
.81be					printer_done:
.81be	4c 7a 80	jmp $807a	                jmp repl_done

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.81c1					help_byte_to_ascii:
.81c1	48		pha		                pha
.81c2	4a		lsr a		                lsr             ; convert high nibble first
.81c3	4a		lsr a		                lsr
.81c4	4a		lsr a		                lsr
.81c5	4a		lsr a		                lsr
.81c6	20 ca 81	jsr $81ca	                jsr help_nibble_to_ascii
.81c9	68		pla		                pla
.81ca					help_nibble_to_ascii:
.81ca	29 0f		and #$0f	                and #$0F
.81cc	09 30		ora #$30	                ora #'0'
.81ce	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.81d0	90 02		bcc $81d4	                bcc +
.81d2	69 06		adc #$06	                adc #$06
.81d4	4c d8 81	jmp $81d8	+               jmp help_emit_a       ; JSR/RTS
.81d7					help_to_lowercase:
.81d7	60		rts		                rts
.81d8					help_emit_a:
.81d8	6c 08 00	jmp ($0008)	                jmp (output)    ; JSR/RTS
.81db					help_key_a:
.81db	6c 0a 00	jmp ($000a)	                jmp (input)             ; JSR/RTS
.81de					help_print_string_no_lf:
.81de	0a		asl a		                asl
.81df	a8		tay		                tay
.81e0	b9 fa 82	lda $82fa,y	                lda string_table,y
.81e3	85 02		sta $02		                sta tmp0                ; LSB
.81e5	c8		iny		                iny
.81e6	b9 fa 82	lda $82fa,y	                lda string_table,y
.81e9	85 03		sta $03		                sta tmp0+1              ; MSB
.81eb					help_print_common:
.81eb	a0 00		ldy #$00	                ldy #0
.81ed					_loop:
.81ed	b1 02		lda ($02),y	                lda (tmp0),y
.81ef	f0 06		beq $81f7	                beq _done               ; strings are zero-terminated
.81f1	20 d8 81	jsr $81d8	                jsr help_emit_a         ; allows vectoring via output
.81f4	c8		iny		                iny
.81f5	80 f6		bra $81ed	                bra _loop
.81f7					_done:
.81f7	60		rts		                rts
.81f8					help_print_string:
.81f8	20 de 81	jsr $81de	                jsr help_print_string_no_lf
.81fb	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.81fd	4c d8 81	jmp $81d8	                jmp help_emit_a         ; JSR/RTS
.8200					help_is_whitespace:
.8200	60		rts		        rts
.8201					help_is_delimiter:
.8201	60		rts		        rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.8202					proc_char_whitespace_p:
.8202					proc_newline:
.8202	64 00		stz $00		                stz return
.8204	64 01		stz $01		                stz return+1
.8206	a9 0a		lda #$0a	                lda #AscLF
.8208	4c d8 81	jmp $81d8	                jmp help_emit_a         ; JSR/RTS
.820b					proc_display:
.820b					proc_read:
.820b					proc_read_char:
.820b					proc_read_line:
.820b					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.820b					debug_dump_token:
.820b	a9 0a		lda #$0a	                lda #AscLF
.820d	20 d8 81	jsr $81d8	                jsr help_emit_a
.8210	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.8212	20 a2 82	jsr $82a2	                jsr debug_print_string_no_lf
.8215	a2 00		ldx #$00	                ldx #0
.8217					-
.8217	bd 00 03	lda $0300,x	                lda tkb,x
.821a	c9 00		cmp #$00	                cmp #T_END
.821c	f0 0d		beq $822b	                beq _done
.821e	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.8221	e8		inx		                inx
.8222	a9 20		lda #$20	                lda #' '
.8224	20 d8 81	jsr $81d8	                jsr help_emit_a
.8227	e4 12		cpx $12		                cpx tkbp
.8229	d0 ec		bne $8217	                bne -
.822b					_done:
.822b	4c c1 81	jmp $81c1	                jmp help_byte_to_ascii          ; JSR/RTS
.822e					debug_dump_hp:
.822e	a9 0a		lda #$0a	                lda #AscLF
.8230	20 d8 81	jsr $81d8	                jsr help_emit_a
.8233	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.8235	20 a2 82	jsr $82a2	                jsr debug_print_string_no_lf
.8238	a5 15		lda $15		                lda hp+1
.823a	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.823d	a5 14		lda $14		                lda hp
.823f	4c c1 81	jmp $81c1	                jmp help_byte_to_ascii          ; JSR/RTS
.8242					debug_dump_ast:
.8242	a9 0a		lda #$0a	                lda #AscLF
.8244	20 d8 81	jsr $81d8	                jsr help_emit_a
.8247	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.8249	20 a2 82	jsr $82a2	                jsr debug_print_string_no_lf
.824c	a5 1d		lda $1d		                lda ast+1
.824e	85 05		sta $05		                sta tmp1+1
.8250	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.8253	a5 1c		lda $1c		                lda ast
.8255	85 04		sta $04		                sta tmp1
.8257	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.825a					_loop:
.825a	a9 20		lda #$20	                lda #' '
.825c	20 d8 81	jsr $81d8	                jsr help_emit_a
.825f	a0 01		ldy #$01	                ldy #1
.8261	b1 04		lda ($04),y	                lda (tmp1),y
.8263	85 07		sta $07		                sta tmp2+1
.8265	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii          ; MSB
.8268	b2 04		lda ($04)	                lda (tmp1)
.826a	85 06		sta $06		                sta tmp2                        ; pointer to next entry, LSB
.826c	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii          ; LSB
.826f	a9 3a		lda #$3a	                lda #':'
.8271	20 d8 81	jsr $81d8	                jsr help_emit_a
.8274	a0 03		ldy #$03	                ldy #3
.8276	b1 04		lda ($04),y	                lda (tmp1),y
.8278	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.827b	a0 02		ldy #$02	                ldy #2
.827d	b1 04		lda ($04),y	                lda (tmp1),y
.827f	20 c1 81	jsr $81c1	                jsr help_byte_to_ascii
.8282	a5 06		lda $06		                lda tmp2
.8284	05 07		ora $07		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.8286	f0 0a		beq $8292	                beq _done
.8288	a5 06		lda $06		                lda tmp2
.828a	85 04		sta $04		                sta tmp1
.828c	a5 07		lda $07		                lda tmp2+1
.828e	85 05		sta $05		                sta tmp1+1
.8290	80 c8		bra $825a	                bra _loop
.8292					_done:
.8292	60		rts		                rts
.8293					debug_emit_a:
.8293	48		pha		                pha
.8294	a9 0a		lda #$0a	                lda #AscLF
.8296	20 d8 81	jsr $81d8	                jsr help_emit_a
.8299	68		pla		                pla
.829a	20 d8 81	jsr $81d8	                jsr help_emit_a
.829d	a9 0a		lda #$0a	                lda #AscLF
.829f	4c d8 81	jmp $81d8	                jmp help_emit_a         ; JSR/RTS
.82a2					debug_print_string_no_lf:
.82a2	0a		asl a		                asl
.82a3	a8		tay		                tay
.82a4	b9 e8 82	lda $82e8,y	                lda sd_table,y
.82a7	85 02		sta $02		                sta tmp0                ; LSB
.82a9	c8		iny		                iny
.82aa	b9 e8 82	lda $82e8,y	                lda sd_table,y
.82ad	85 03		sta $03		                sta tmp0+1              ; MSB
.82af					debug_print_common:
.82af	a0 00		ldy #$00	                ldy #0
.82b1					_loop:
.82b1	b1 02		lda ($02),y	                lda (tmp0),y
.82b3	f0 06		beq $82bb	                beq _done               ; strings are zero-terminated
.82b5	20 d8 81	jsr $81d8	                jsr help_emit_a         ; allows vectoring via output
.82b8	c8		iny		                iny
.82b9	80 f6		bra $82b1	                bra _loop
.82bb					_done:
.82bb	60		rts		                rts
.82bc					debug_print_string:
.82bc	20 a2 82	jsr $82a2	                jsr debug_print_string_no_lf
.82bf	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.82c1	4c d8 81	jmp $81d8	                jmp help_emit_a         ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
>82c4	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>82cc	66 66 65 72 3a 20 00
>82d3	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>82d9	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>82e1	6e 74 65 72 3a 20 00
.82e8					sd_table:
>82e8	c4 82 d3 82 d9 82		        .word s_dump_token, s_dump_ast, s_dump_hp              ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
=$10					        AscCP   = $10  ; CTRL-p
=$0e					        AscCN   = $0e  ; CTRL-n
>0000					return:  .word ?     ; return value: result of a procedure
>0002					tmp0:    .word ?     ; temporary storage, eg printing
>0004					tmp1:    .word ?     ; temporary storage
>0006					tmp2:    .word ?     ; temporary storage
>0008					output:  .word ?     ; output port, addr of routine
>000a					input:   .word ?     ; input port, addr of routine
>000c					ciblen:  .word ?     ; current size of input buffer
>000e					cibp:    .word ?     ; index of current char in input buffer
>0010					tkblen:  .word ?     ; current size of the token buffer
>0012					tkbp:    .word ?     ; index of current token in token buffer
>0014					hp:      .word ?     ; pointer to next free heap entry
>0016					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0018					strtbl:  .word ?     ; pointer to first entry in string table in heap
>001a					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001c					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001e					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					ot_meta         = $00    ; used for end of input and other markers
=$10					ot_bool         = $10    ; used for #t and #f; immediate
=$20					ot_fixnum       = $20    ; used for fixed numbers; immediate
=$30					ot_bignum       = $30    ; used for bignum
=$40					ot_char         = $40    ; used for chars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.82ee					h_newline:
>82ee	00 00				        .addr 0000              ; end of header list
>82f0	02 82				        .addr proc_newline
>82f2	07				        .byte 7
>82f3	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
.82fa					string_table:
>82fa	06 83 19 83 33 83 36 83		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>8302	39 83 4c 83			        .word s_bad_token, s_bad_object                 ; 4-7
>8306	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable:"            ; REPL input error
>830e	20 76 61 72 69 61 62 6c 65 3a 00
>8319	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8321	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8331	65 00
>8333	23 74 00			s_true:         .null   "#t"
>8336	23 66 00			s_false:        .null   "#f"
>8339	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: "            ; from parser
>8341	61 64 20 74 6f 6b 65 6e 3a 20 00
>834c	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>8354	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>8364	3a 20 00
>8367	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>836f	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
