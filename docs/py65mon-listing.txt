
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Sun Apr  5 14:51:35 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 08		sta $08		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 09		sta $09		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 14		sta $14		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 15		sta $15		                sta hp+1
.8011	a9 00		lda #$00	                lda #0
.8013	64 16		stz $16		                stz symtbl
.8015	64 17		stz $17		                stz symtbl+1
.8017	64 18		stz $18		                stz strtbl
.8019	64 19		stz $19		                stz strtbl+1
.801b	64 1a		stz $1a		                stz bnmtbl
.801d	64 1b		stz $1b		                stz bnmtbl+1
.801f	a9 21		lda #$21	                lda #<kernel_getc
.8021	85 0a		sta $0a		                sta input
.8023	a9 f0		lda #$f0	                lda #>kernel_putc
.8025	85 0b		sta $0b		                sta input+1
.8027					repl:
.8027	64 0c		stz $0c		                stz ciblen
.8029	64 0d		stz $0d		                stz ciblen+1
.802b					repl_read:
.802b	a0 00		ldy #$00	                ldy #0
.802d	a9 3e		lda #$3e	                lda #'>'
.802f	20 20 81	jsr $8120	                jsr help_emit_a
.8032	a9 20		lda #$20	                lda #' '
.8034	20 20 81	jsr $8120	                jsr help_emit_a
.8037					repl_read_loop:
.8037	20 23 81	jsr $8123	                jsr help_key_a
.803a	c9 0a		cmp #$0a	                cmp #AscLF
.803c	f0 19		beq $8057	                beq repl_read_eol
.803e	c9 0d		cmp #$0d	                cmp #AscCR
.8040	f0 15		beq $8057	                beq repl_read_eol
.8042	c9 08		cmp #$08	                cmp #AscBS
.8044	f0 18		beq $805e	                beq repl_read_backspace
.8046	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.8048	f0 14		beq $805e	                beq repl_read_backspace
.804a	99 00 02	sta $0200,y	                sta cib,y
.804d	c8		iny		                iny
.804e	20 20 81	jsr $8120	                jsr help_emit_a
.8051	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8053	d0 e2		bne $8037	                bne repl_read_loop    ; fall through if buffer limit reached
.8055	80 00		bra $8057	                bra repl_read_buffer_full
.8057					repl_read_eol:
.8057					repl_read_buffer_full:
.8057	84 0c		sty $0c		                sty ciblen      ; Y contains number of chars accepted already
.8059	64 0d		stz $0d		                stz ciblen+1    ; we only accept 256 chars
.805b	4c b0 80	jmp $80b0	                jmp lexer
.805e					repl_read_backspace:
.805e	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8060	d0 06		bne $8068	                bne +
.8062	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8064	20 20 81	jsr $8120	                jsr help_emit_a
.8067	c8		iny		                iny
.8068					+
.8068	88		dey		                dey
.8069	a9 08		lda #$08	                lda #AscBS      ; move back one
.806b	20 20 81	jsr $8120	                jsr help_emit_a
.806e	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8070	20 20 81	jsr $8120	                jsr help_emit_a
.8073	a9 08		lda #$08	                lda #AscBS      ; move back over space
.8075	20 20 81	jsr $8120	                jsr help_emit_a
.8078	80 bd		bra $8037	                bra repl_read_loop
.807a					parser:
.807a	20 53 81	jsr $8153	                jsr debug_dump_token
.807d	a9 70		lda #$70	                lda #'p'
.807f	20 76 81	jsr $8176	                jsr debug_emit_a
.8082					eval:
.8082	a9 65		lda #$65	                lda #'e'
.8084	20 76 81	jsr $8176	                jsr debug_emit_a
.8087					repl_print:
.8087	a5 00		lda $00		                lda return
.8089	05 01		ora $01		                ora return+1
.808b	d0 08		bne $8095	                bne _print_object
.808d	a9 01		lda #$01	                lda #str_unspec
.808f	20 40 81	jsr $8140	                jsr help_print_string
.8092	4c ad 80	jmp $80ad	                jmp repl_done
.8095					_print_object:
.8095	a5 01		lda $01		                lda return+1            ; MSB
.8097	29 f0		and #$f0	                and #$f0                ; we just want the tag in the top nibble
.8099	c9 10		cmp #$10	                cmp #ot_bool
.809b	d0 10		bne $80ad	                bne _print_fixnum
.809d	a5 00		lda $00		                lda return              ; $00 is false, $ff is true
.809f	d0 04		bne $80a5	                bne _true
.80a1	a9 03		lda #$03	                lda #str_false
.80a3	80 02		bra $80a7	                bra _print_bool
.80a5					_true
.80a5	a9 02		lda #$02	                lda #str_true
.80a7					_print_bool:
.80a7	20 40 81	jsr $8140	                jsr help_print_string
.80aa	4c ad 80	jmp $80ad	                jmp repl_done
.80ad					_print_fixnum:
.80ad					repl_done:
.80ad	4c 27 80	jmp $8027	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../lexer.asm

.80b0					lexer:
.80b0	a0 00		ldy #$00	                ldy #0
.80b2	84 12		sty $12		                sty tkbp
.80b4	84 13		sty $13		                sty tkbp+1      ; MSB currently unused
.80b6	84 0e		sty $0e		                sty cibp
.80b8	84 0f		sty $0f		                sty cibp+1      ; MSB currently unused
.80ba					lexer_loop:
.80ba	b9 00 02	lda $0200,y	                lda cib,y
.80bd	c9 40		cmp #$40	                cmp #'@'
.80bf	d0 01		bne $80c2	                bne +
.80c1	00		brk #		                brk
.80c2					+
.80c2	20 08 81	jsr $8108	                jsr lexer_eat_whitespace
.80c5					_test_parens:
.80c5					_test_sharp:
.80c5	c9 23		cmp #$23	                cmp #'#'
.80c7	d0 1c		bne $80e5	                bne _post_sharp_test    ; TODO weird label, but keep during editing
.80c9	c8		iny		                iny                     ; TODO see if we're past end of buffer
.80ca	b9 00 02	lda $0200,y	                lda cib,y
.80cd	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.80cf	d0 08		bne $80d9	                bne _test_bool_false
.80d1	a9 10		lda #$10	                lda #T_TRUE
.80d3	20 fd 80	jsr $80fd	                jsr lexer_add_token
.80d6	4c ed 80	jmp $80ed	                jmp lexer_next
.80d9					_test_bool_false:
.80d9	c9 66		cmp #$66	                cmp #'f'
.80db	d0 08		bne $80e5	                bne _test_char
.80dd	a9 11		lda #$11	                lda #T_FALSE
.80df	20 fd 80	jsr $80fd	                jsr lexer_add_token
.80e2	4c ed 80	jmp $80ed	                jmp lexer_next
.80e5					_test_char:
.80e5					_test_vector:
.80e5					_test_radix:
.80e5					_post_sharp_test:
.80e5					_test_string:
.80e5					_test_number:
.80e5					_test_comment:
.80e5					lexer_error:
.80e5	a9 00		lda #$00	                lda #str_unbound
.80e7	20 40 81	jsr $8140	                jsr help_print_string
.80ea	4c 27 80	jmp $8027	                jmp repl
.80ed					lexer_next:
.80ed	c8		iny		                iny
.80ee	c4 0c		cpy $0c		                cpy ciblen
.80f0	f0 03		beq $80f5	                beq _end_of_input
.80f2	4c ba 80	jmp $80ba	                jmp lexer_loop
.80f5					_end_of_input:
.80f5	a9 00		lda #$00	                lda #T_END
.80f7	20 fd 80	jsr $80fd	                jsr lexer_add_token
.80fa	4c 7a 80	jmp $807a	                jmp parser
.80fd					lexer_add_token:
.80fd	5a		phy		                phy             ; Could also store in cibp
.80fe	a4 12		ldy $12		                ldy tkbp
.8100	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.8103	c8		iny		                iny
.8104	84 12		sty $12		                sty tkbp
.8106	7a		ply		                ply
.8107	60		rts		                rts
.8108					lexer_eat_whitespace:
.8108	60		rts		        rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01    ; '('
=$02					T_PAREN_CLOSED  = $02    ; ')'
=$03					T_SHARP         = $03    ; '#' - note '#f', '#t' and others are precprocessed
=$04					T_LETTER        = $04    ; 'a' ... 'z', followed by single-byte ASCII letter
=$10					T_TRUE          = $10   ; '#t'
=$11					T_FALSE         = $11   ; '#f'
=$12					T_STRING        = $12   ; followed by 16-bit (12-bit) pointer to string in table
=$13					T_FIXNUM        = $13   ; followed by 16-bit (12-bit) number
=$14					T_SYMBOL        = $14   ; followed by 16-bit (12-bit) pointer to symbol in table
=$15					T_BIGNUM        = $15   ; followed by 16-bit (12-bit) pointer to number in table

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.8109					help_byte_to_ascii:
.8109	48		pha		                pha
.810a	4a		lsr a		                lsr             ; convert high nibble first
.810b	4a		lsr a		                lsr
.810c	4a		lsr a		                lsr
.810d	4a		lsr a		                lsr
.810e	20 12 81	jsr $8112	                jsr help_nibble_to_ascii
.8111	68		pla		                pla
.8112					help_nibble_to_ascii:
.8112	29 0f		and #$0f	                and #$0F
.8114	09 30		ora #$30	                ora #'0'
.8116	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.8118	90 02		bcc $811c	                bcc +
.811a	69 06		adc #$06	                adc #$06
.811c	4c 20 81	jmp $8120	+               jmp help_emit_a       ; JSR/RTS
.811f					help_to_lowercase:
.811f	60		rts		                rts
.8120					help_emit_a:
.8120	6c 08 00	jmp ($0008)	                jmp (output)    ; JSR/RTS
.8123					help_key_a:
.8123	6c 0a 00	jmp ($000a)	                jmp (input)             ; JSR/RTS
.8126					help_print_string_no_lf:
.8126	0a		asl a		                asl
.8127	a8		tay		                tay
.8128	b9 91 81	lda $8191,y	                lda string_table,y
.812b	85 02		sta $02		                sta tmp0                ; LSB
.812d	c8		iny		                iny
.812e	b9 91 81	lda $8191,y	                lda string_table,y
.8131	85 03		sta $03		                sta tmp0+1              ; MSB
.8133					help_print_common:
.8133	a0 00		ldy #$00	                ldy #0
.8135					_loop:
.8135	b1 02		lda ($02),y	                lda (tmp0),y
.8137	f0 06		beq $813f	                beq _done               ; strings are zero-terminated
.8139	20 20 81	jsr $8120	                jsr help_emit_a         ; allows vectoring via output
.813c	c8		iny		                iny
.813d	80 f6		bra $8135	                bra _loop
.813f					_done:
.813f	60		rts		                rts
.8140					help_print_string:
.8140	20 26 81	jsr $8126	                jsr help_print_string_no_lf
.8143	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.8145	4c 20 81	jmp $8120	                jmp help_emit_a         ; JSR/RTS
.8148					help_is_whitespace:
.8148	60		rts		        rts
.8149					help_is_delimiter:
.8149	60		rts		        rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.814a					proc_char_whitespace_p:
.814a					proc_newline:
.814a	64 00		stz $00		                stz return
.814c	64 01		stz $01		                stz return+1
.814e	a9 0a		lda #$0a	                lda #AscLF
.8150	4c 20 81	jmp $8120	                jmp help_emit_a         ; JSR/RTS
.8153					proc_display:
.8153					proc_read:
.8153					proc_read_char:
.8153					proc_read_line:
.8153					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.8153					debug_dump_token:
.8153	a9 0a		lda #$0a	                lda #AscLF
.8155	20 20 81	jsr $8120	                jsr help_emit_a
.8158	a2 00		ldx #$00	                ldx #0
.815a					-
.815a	bd 00 03	lda $0300,x	                lda tkb,x
.815d	20 09 81	jsr $8109	                jsr help_byte_to_ascii  ; LSB
.8160	e8		inx		                inx
.8161	bd 00 03	lda $0300,x	                lda tkb,x
.8164	20 09 81	jsr $8109	                jsr help_byte_to_ascii  ; MSB
.8167	e8		inx		                inx
.8168	a9 20		lda #$20	                lda #' '
.816a	20 20 81	jsr $8120	                jsr help_emit_a
.816d	e4 12		cpx $12		                cpx tkbp
.816f	d0 e9		bne $815a	                bne -
.8171	a9 0a		lda #$0a	                lda #AscLF
.8173	4c 20 81	jmp $8120	                jmp help_emit_a         ; JSR/RTS
.8176					debug_emit_a:
.8176	48		pha		                pha
.8177	a9 0a		lda #$0a	                lda #AscLF
.8179	20 20 81	jsr $8120	                jsr help_emit_a
.817c	68		pla		                pla
.817d	20 20 81	jsr $8120	                jsr help_emit_a
.8180	a9 0a		lda #$0a	                lda #AscLF
.8182	4c 20 81	jmp $8120	                jmp help_emit_a         ; JSR/RTS

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
=$10					        AscCP   = $10  ; CTRL-p
=$0e					        AscCN   = $0e  ; CTRL-n
>0000					return:  .word ?     ; return value: result of a procedure
>0002					tmp0:    .word ?     ; temporary storage, eg printing
>0004					tmp1:    .word ?     ; temporary storage
>0006					tmp2:    .word ?     ; temporary storage
>0008					output:  .word ?     ; output port, addr of routine
>000a					input:   .word ?     ; input port, addr of routine
>000c					ciblen:  .word ?     ; current size of input buffer
>000e					cibp:    .word ?     ; pointer (index?) to current char in input buffer
>0010					tkblen:  .word ?     ; current size of the token buffer
>0012					tkbp:    .word ?     ; pointer (index?) to current token in token buffer
>0014					hp:      .word ?     ; pointer to next free heap entry
>0016					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0018					strtbl:  .word ?     ; pointer to first entry in string table in heap
>001a					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001c					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					ot_meta         = $00    ; used for end of input and other markers
=$10					ot_bool         = $10    ; used for #t and #f; immediate
=$20					ot_fixnum       = $20    ; used for fixed numbers; immediate
=$30					ot_bignum       = $30    ; used for bignum
=$40					ot_char         = $40    ; used for cars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0
=$0000					oc_end   = $0000        ; end of input for tokens and objects
=$1fff					oc_true  = $1fff        ; true bool #t, immediate
=$1000					oc_false = $1000        ; false bool #f, immediate

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8185					h_newline:
>8185	00 00				        .addr 0000              ; end of header list
>8187	4a 81				        .addr proc_newline
>8189	07				        .byte 7
>818a	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound = 0
=1					str_unspec  = 1
=2					str_true    = 2
=3					str_false   = 3
.8191					string_table:
>8191	99 81 ac 81 c6 81 c9 81		        .word s_unbound, s_unspec, s_true, s_false ; 0-3
>8199	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable:"            ; REPL input error
>81a1	20 76 61 72 69 61 62 6c 65 3a 00
>81ac	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>81b4	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>81c4	65 00
>81c6	23 74 00			s_true:         .null   "#t"
>81c9	23 66 00			s_false:        .null   "#f"
>81cc	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>81d4	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
