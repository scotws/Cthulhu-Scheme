
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Sun Apr 19 15:35:41 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=true					STRING_CR_TO_LF = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$10					RAM_SEGMENT_AST  = $10   ; $1000 to $1FFF Abstract Symbol Tree (AST)
=$20					RAM_SEGMENT_STR  = $20   ; $2000 to $2FFF String Table and strings
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 10		lda #$10	                lda #RAM_SEGMENT_AST    ; AST, default nibble $10
.800b	85 13		sta $13		                sta rsn_ast
.800d	a9 20		lda #$20	                lda #RAM_SEGMENT_STR    ; Strings, default nibble $20
.800f	85 18		sta $18		                sta rsn_str
.8011	a0 02		ldy #$02	                ldy #$02          ; First free byte is one word down
.8013	84 1b		sty $1b		                sty hp_str
.8015	a5 18		lda $18		                lda rsn_str     ; MSB of RAM segment for strings
.8017	85 1c		sta $1c		                sta hp_str+1
.8019	85 1a		sta $1a		                sta strp+1
.801b	64 19		stz $19		                stz strp        ; LSB
.801d	a9 00		lda #$00	                lda #00
.801f	a8		tay		                tay
.8020	92 1b		sta ($1b)	                sta (hp_str)
.8022	c8		iny		                iny
.8023	91 1b		sta ($1b),y	                sta (hp_str),y
.8025	a9 21		lda #$21	                lda #<kernel_getc
.8027	85 08		sta $08		                sta input
.8029	a9 f0		lda #$f0	                lda #>kernel_putc
.802b	85 09		sta $09		                sta input+1
.802d					repl:

;******  Processing file: platforms/../reader.asm

.802d					reader:
.802d	64 0a		stz $0a		                stz input_f
.802f	64 0b		stz $0b		                stz ciblen
.8031	64 0c		stz $0c		                stz ciblen+1
.8033	a9 0b		lda #$0b	                lda #str_prompt
.8035	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.8038	a0 00		ldy #$00	                ldy #0
.803a					reader_loop:
.803a	20 7a 84	jsr $847a	                        jsr help_key_a
.803d	c9 0a		cmp #$0a	                        cmp #AscLF
.803f	f0 3b		beq $807c	                        beq reader_got_eol
.8041	c9 0d		cmp #$0d	                        cmp #AscCR
.8043	f0 37		beq $807c	                        beq reader_got_eol
.8045					_not_an_eol:
.8045					_not_a_parens:
.8045	c9 3b		cmp #$3b	                        cmp #$3B                ; semicolon
.8047	d0 08		bne $8051	                        bne _not_a_comment
.8049	aa		tax		                        tax                     ; Save semicolon char
.804a	a9 80		lda #$80	                        lda #$80                ; Get ready to set bit 7
.804c	04 0a		tsb $0a		                        tsb input_f             ; 65c02 only
.804e	8a		txa		                        txa
.804f	80 1d		bra $806e	                        bra reader_comment_continue     ; saves char
.8051					_not_a_comment:
.8051	c9 22		cmp #$22	                        cmp #$22                ; quotation mark '"'
.8053	d0 0a		bne $805f	                        bne _not_a_string
.8055	aa		tax		                        tax                     ; Save quotation mark char
.8056	a5 0a		lda $0a		                        lda input_f
.8058	49 40		eor #$40	                        eor #%01000000          ; flip bit 6
.805a	85 0a		sta $0a		                        sta input_f
.805c	8a		txa		                        txa
.805d	80 0f		bra $806e	                        bra reader_string_continue      ; saves char
.805f					_not_a_string:
.805f	c9 08		cmp #$08	                        cmp #AscBS
.8061	f0 2e		beq $8091	                        beq reader_backspace
.8063	c9 7f		cmp #$7f	                        cmp #AscDEL             ; Is the same as CTRL-h
.8065	f0 2a		beq $8091	                        beq reader_backspace
.8067	c9 04		cmp #$04	                        cmp #$04
.8069	d0 03		bne $806e	                        bne reader_normal_char
.806b	4c 4e 84	jmp $844e	                        jmp repl_quit
.806e					reader_normal_char:
.806e					reader_comment_continue:
.806e					reader_string_continue:
.806e	20 77 84	jsr $8477	                        jsr help_emit_a
.8071	99 00 02	sta $0200,y	                        sta cib,y
.8074	c8		iny		                        iny
.8075	cc 00 01	cpy $0100	                        cpy cib_size
.8078	90 34		bcc $80ae	                        bcc reader_buffer_full
.807a	80 be		bra $803a	                        bra reader_loop
.807c					reader_got_eol:
.807c	a5 0a		lda $0a		                        lda input_f             ; bit 7 marks comment
.807e	30 09		bmi $8089	                        bmi _eol_in_comment
.8080	29 7f		and #$7f	                        and #%01111111          ; input_f already in A
.8082	d0 09		bne $808d	                        bne _eol_in_parens_or_string
.8084	20 77 84	jsr $8477	                        jsr help_emit_a
.8087	80 25		bra $80ae	                        bra reader_input_done
.8089					_eol_in_comment:
.8089	a9 80		lda #$80	                        lda #$80
.808b	14 0a		trb $0a		                        trb input_f             ; bit 7 marks comment, now clear
.808d					_eol_in_parens_or_string:
.808d	a9 0a		lda #$0a	                        lda #AscLF
.808f	80 dd		bra $806e	                        bra reader_comment_continue       ; stores LF
.8091					reader_backspace:
.8091	c0 00		cpy #$00	                        cpy #0          ; buffer empty?
.8093	d0 06		bne $809b	                        bne _skip_bell
.8095	a9 07		lda #$07	                        lda #AscBELL
.8097	20 77 84	jsr $8477	                        jsr help_emit_a
.809a	c8		iny		                        iny
.809b					_skip_bell:
.809b	88		dey		                        dey
.809c	a9 08		lda #$08	                        lda #AscBS      ; move back one
.809e	20 77 84	jsr $8477	                        jsr help_emit_a
.80a1	a9 20		lda #$20	                        lda #AscSP      ; print a space (rubout)
.80a3	20 77 84	jsr $8477	                        jsr help_emit_a
.80a6	a9 08		lda #$08	                        lda #AscBS      ; move back over space
.80a8	20 77 84	jsr $8477	                        jsr help_emit_a
.80ab	4c 3a 80	jmp $803a	                        jmp reader_loop
.80ae					reader_input_done:
.80ae					reader_buffer_full:
.80ae	84 0b		sty $0b		                        sty ciblen      ; Y contains number of chars accepted already
.80b0	a9 00		lda #$00	                        lda #0
.80b2	85 0c		sta $0c		                        sta ciblen+1    ; we only accept 254 chars for now
.80b4	99 00 02	sta $0200,y	                        sta cib,y

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../lexer.asm

.80b7					lexer:
.80b7	20 f0 84	jsr $84f0	                jsr debug_dump_input
.80ba	a0 00		ldy #$00	                ldy #0
.80bc	64 0d		stz $0d		                stz cibp
.80be	64 0e		stz $0e		                stz cibp+1      ; MSB currently unused
.80c0	64 11		stz $11		                stz tkbp
.80c2	64 12		stz $12		                stz tkbp+1      ; MSB currently unused
.80c4	98		tya		                tya
.80c5	19 00 02	ora $0200,y	                ora cib,y
.80c8	d0 03		bne $80cd	                bne lexer_loop
.80ca	4c 4b 84	jmp $844b	                jmp repl_empty_line
.80cd					lexer_loop:
.80cd	b9 00 02	lda $0200,y	                lda cib,y
.80d0	c9 3b		cmp #$3b	                cmp #$3B        ; semicolon
.80d2	d0 0f		bne $80e3	                bne _no_comment
.80d4					_comment_loop:
.80d4	c8		iny		                iny
.80d5	b9 00 02	lda $0200,y	                lda cib,y
.80d8	c9 0a		cmp #$0a	                cmp #AscLF
.80da	f0 04		beq $80e0	                beq _comment_done
.80dc	c9 0d		cmp #$0d	                cmp #AscCR
.80de	d0 f4		bne $80d4	                bne _comment_loop
.80e0					_comment_done:
.80e0	4c c7 81	jmp $81c7	                jmp lexer_next
.80e3					_no_comment:
.80e3	20 b1 84	jsr $84b1	                jsr help_is_whitespace
.80e6	90 03		bcc $80eb	                bcc _not_whitespace
.80e8	4c c7 81	jmp $81c7	                jmp lexer_next
.80eb					_not_whitespace:
.80eb					_test_parens:
.80eb					_test_done:
.80eb	d0 03		bne $80f0	                bne _not_done
.80ed	4c cf 81	jmp $81cf	                jmp lexer_end_of_input          ; not the same as lexer_done
.80f0					_not_done:
.80f0	c9 23		cmp #$23	                cmp #'#'
.80f2	f0 03		beq $80f7	                beq _got_sharp
.80f4	4c 94 81	jmp $8194	                jmp lexer_not_sharp             ; too far for branch
.80f7					_got_sharp:
.80f7	c8		iny		                iny
.80f8	b9 00 02	lda $0200,y	                lda cib,y
.80fb	c9 74		cmp #$74	                cmp #'t'        ; We're optimists so we check for true first
.80fd	d0 08		bne $8107	                bne _not_true
.80ff	a9 10		lda #$10	                lda #T_TRUE
.8101	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8104	4c c7 81	jmp $81c7	                jmp lexer_next
.8107					_not_true:
.8107	c9 66		cmp #$66	                cmp #'f'
.8109	d0 08		bne $8113	                bne _not_false
.810b	a9 11		lda #$11	                lda #T_FALSE
.810d	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8110	4c c7 81	jmp $81c7	                jmp lexer_next
.8113					_not_false:
.8113	c9 5c		cmp #$5c	                cmp #'\'
.8115	d0 00		bne $8117	                bne _no_backslash
.8117					_not_single_char:
.8117					_not_named_char:
.8117					_no_backslash:
.8117					_not_vector:
.8117	c9 78		cmp #$78	                cmp #'x'        ; #x is hexadecimal
.8119	d0 04		bne $811f	                bne _not_hexnum
.811b	a9 10		lda #$10	                lda #$10        ; Base 16
.811d	80 13		bra $8132	                bra lexer_got_number
.811f					_not_hexnum:
.811f	c9 62		cmp #$62	                cmp #'b'        ; #b is binary
.8121	d0 04		bne $8127	                bne _not_binnum
.8123	a9 02		lda #$02	                lda #$02        ; Base 2
.8125	80 0b		bra $8132	                bra lexer_got_number
.8127					_not_binnum:
.8127	c9 64		cmp #$64	                cmp #'d'        ; #d is explicit decimal
.8129	d0 04		bne $812f	                bne _illegal_radix
.812b	a9 0a		lda #$0a	                lda #$0A        ; Base 10
.812d	80 03		bra $8132	                bra lexer_got_number
.812f					_illegal_radix:
.812f	4c 8c 81	jmp $818c	                jmp lexer_illegal_radix
.8132					lexer_got_number:
.8132	48		pha		                pha                     ; Save the radix for the moment
.8133	a9 12		lda #$12	                lda #T_NUM_START
.8135	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8138	68		pla		                pla
.8139	20 d7 81	jsr $81d7	                jsr lexer_add_token
.813c	a6 11		ldx $11		                ldx tkbp        ; get index of where length will be
.813e	86 00		stx $00		                stx tmp0
.8140	a9 00		lda #$00	                lda #0          ; dummy length value
.8142	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8145	c8		iny		                iny             ; Y is still the input buffer index
.8146	b9 00 02	lda $0200,y	                lda cib,y
.8149	a2 00		ldx #$00	                ldx #0          ; X counts length of string
.814b	c9 2d		cmp #$2d	                cmp #'-'
.814d	d0 09		bne $8158	                bne _check_for_plus
.814f	a9 ff		lda #$ff	                lda #T_MINUS
.8151	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8154	c8		iny		                iny             ; skip minus character
.8155	e8		inx		                inx             ; string now has length of 1
.8156	80 0b		bra $8163	                bra _sign_done
.8158					_check_for_plus:
.8158	c9 2b		cmp #$2b	                cmp #'+'
.815a	d0 01		bne $815d	                bne _default_plus
.815c	c8		iny		                iny
.815d					_default_plus:
.815d	a9 ee		lda #$ee	                lda #T_PLUS
.815f	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8162	e8		inx		                inx             ; string now has length of 1
.8163					_sign_done:
.8163	b9 00 02	lda $0200,y	                lda cib,y
.8166	f0 24		beq $818c	                beq lexer_terminator_too_early  ; 00 terminates input
.8168	20 ab 84	jsr $84ab	                jsr help_is_delimiter
.816b	b0 1f		bcs $818c	                bcs lexer_delimiter_too_early
.816d					_number_loop:
.816d	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8170	e8		inx		                inx             ; String one character longer
.8171	c8		iny		                iny             ; Next character
.8172	b9 00 02	lda $0200,y	                lda cib,y
.8175	f0 07		beq $817e	                beq _legal_terminator
.8177	20 ab 84	jsr $84ab	                jsr help_is_delimiter
.817a	b0 02		bcs $817e	                bcs _number_done
.817c	80 ef		bra $816d	                bra _number_loop
.817e					_legal_terminator:
.817e					_number_done:
.817e	a9 82		lda #$82	                lda #T_NUM_END
.8180	20 d7 81	jsr $81d7	                jsr lexer_add_token
.8183	8a		txa		                txa             ; number of chars was in X
.8184	a6 00		ldx $00		                ldx tmp0        ; index of length byte in token stream
.8186	9d 00 03	sta $0300,x	                sta tkb,x
.8189	4c c8 81	jmp $81c8	                jmp lexer_next_same_char
.818c					lexer_illegal_radix:
.818c					lexer_terminator_too_early:
.818c					lexer_delimiter_too_early:
.818c	a9 06		lda #$06	                lda #str_bad_number
.818e	20 97 84	jsr $8497	                jsr help_print_string
.8191	4c 2d 80	jmp $802d	                jmp repl
.8194					lexer_not_octnum
.8194					lexer_not_sharp:
.8194					_not_decnum:
.8194	c9 22		cmp #$22	                cmp #$22        ; '"' ASCII value
.8196	d0 1f		bne $81b7	                bne _not_string
.8198	a9 13		lda #$13	                lda #T_STR_START
.819a	20 d7 81	jsr $81d7	                jsr lexer_add_token
.819d					_string_loop:
.819d	c8		iny		                iny
.819e	b9 00 02	lda $0200,y	                lda cib,y
.81a1	c9 22		cmp #$22	                cmp #$22        ; '"' closes string
.81a3	f0 0b		beq $81b0	                beq _string_done
.81a5	c9 0d		cmp #$0d	                cmp #AscCR
.81a7	d0 02		bne $81ab	                bne +
.81a9	a9 0a		lda #$0a	                lda #AscLF
.81ab					+
.81ab	20 d7 81	jsr $81d7	                jsr lexer_add_token
.81ae	80 ed		bra $819d	                bra _string_loop
.81b0					_string_done:
.81b0	a9 83		lda #$83	                lda #T_STR_END
.81b2	20 d7 81	jsr $81d7	                jsr lexer_add_token
.81b5	80 10		bra $81c7	                bra lexer_next
.81b7					_not_string:
.81b7					lexer_error:
.81b7	48		pha		                pha
.81b8	a9 00		lda #$00	                lda #str_unbound
.81ba	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.81bd	68		pla		                pla
.81be	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.81c1	20 75 84	jsr $8475	                jsr help_emit_lf
.81c4	4c 2d 80	jmp $802d	                jmp repl
.81c7					lexer_next:
.81c7	c8		iny		                iny
.81c8					lexer_next_same_char:
.81c8	c4 0b		cpy $0b		                cpy ciblen
.81ca	f0 03		beq $81cf	                beq lexer_end_of_input
.81cc	4c cd 80	jmp $80cd	                jmp lexer_loop
.81cf					lexer_end_of_input:
.81cf	a9 00		lda #$00	                lda #T_END
.81d1	20 d7 81	jsr $81d7	                jsr lexer_add_token
.81d4	4c e2 81	jmp $81e2	                jmp lexer_done
.81d7					lexer_add_token:
.81d7	5a		phy		                phy             ; Could also store in cibp
.81d8	a4 11		ldy $11		                ldy tkbp
.81da	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.81dd	c8		iny		                iny
.81de	84 11		sty $11		                sty tkbp
.81e0	7a		ply		                ply
.81e1	60		rts		                rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01   ; '('
=$02					T_PAREN_CLOSED  = $02   ; ')'
=$03					T_SHARP         = $03   ; '#' - note '#f', '#t' and others are precprocessed
=$10					T_TRUE       = $10   ; '#t'
=$11					T_FALSE      = $11   ; '#f'
=$12					T_NUM_START  = $12   ; Marks beginning of a number sequence
=$13					T_STR_START  = $13   ; Marks beginning of a string
=$82					T_NUM_END    = $82   ; Marks end of a number sequence, see T_NUM_START
=$83					T_STR_END    = $83   ; Marks end of a string, see T_STR_START
=$ee					T_PLUS       = $EE   ; Also used in number token sequence
=$ff					T_MINUS      = $FF   ; Also used in number token sequence
.81e2					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.81e2					parser:
.81e2	20 0d 85	jsr $850d	                jsr debug_dump_token
.81e5	64 16		stz $16		                stz hp_ast      ; LSB
.81e7	a5 13		lda $13		                lda rsn_ast     ; MSB of RAM segment for AST
.81e9	85 17		sta $17		                sta hp_ast+1
.81eb	64 14		stz $14		                stz astp
.81ed	64 15		stz $15		                stz astp+1
.81ef	64 11		stz $11		                stz tkbp
.81f1	64 12		stz $12		                stz tkbp+1      ; fake, currently only using LSB
.81f3	a2 ff		ldx #$ff	                ldx #$FF        ; index -1 at beginning
.81f5					parser_loop:
.81f5	e8		inx		                inx
.81f6	bd 00 03	lda $0300,x	                lda tkb,x
.81f9					_end_token:
.81f9	c9 00		cmp #$00	                cmp #T_END
.81fb	d0 03		bne $8200	                bne _not_end_token
.81fd	4c 76 83	jmp $8376	                jmp parser_done
.8200					_not_end_token:
.8200	c9 10		cmp #$10	                cmp #T_TRUE
.8202	d0 0a		bne $820e	                bne _not_true_token
.8204	a9 ff		lda #$ff	                lda <#OC_TRUE
.8206	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.8208	20 34 83	jsr $8334	                jsr parser_add_object_to_ast
.820b	4c f5 81	jmp $81f5	                jmp parser_loop
.820e					_not_true_token:
.820e	c9 11		cmp #$11	                cmp #T_FALSE
.8210	d0 0a		bne $821c	                bne _not_false_token
.8212	a9 00		lda #$00	                lda <#OC_FALSE
.8214	a0 10		ldy #$10	                ldy >#OC_FALSE
.8216	20 34 83	jsr $8334	                jsr parser_add_object_to_ast
.8219	4c f5 81	jmp $81f5	                jmp parser_loop
.821c					_not_false_token:
.821c	c9 12		cmp #$12	                cmp #T_NUM_START
.821e	f0 03		beq $8223	                beq +
.8220	4c c9 82	jmp $82c9	                jmp parser_not_num      ; too far for BNE
.8223					+
.8223	64 02		stz $02		                stz tmp1
.8225	64 03		stz $03		                stz tmp1+1
.8227	e8		inx		                inx             ; skip over T_NUM_START token
.8228	bd 00 03	lda $0300,x	                lda tkb,x
.822b	85 00		sta $00		                sta tmp0        ; radix
.822d	e8		inx		                inx
.822e	bd 00 03	lda $0300,x	                lda tkb,x
.8231	a8		tay		                tay             ; We need the length of the string later ...
.8232	88		dey		                dey             ; ... but we don't need to include the sign
.8233	e8		inx		                inx             ; Move to token for sign, T_PLUS or T_MINUS
.8234	bd 00 03	lda $0300,x	                lda tkb,x
.8237	85 01		sta $01		                sta tmp0+1      ; Just store sign for now
.8239	e8		inx		                inx             ; Move to first digit
.823a	a5 00		lda $00		                lda tmp0        ; radix
.823c	c9 0a		cmp #$0a	                cmp #$0a
.823e	d0 03		bne $8243	                bne _not_dec
.8240	4c b1 82	jmp $82b1	                jmp parser_common_fixnum
.8243					_not_dec:
.8243	c9 10		cmp #$10	                cmp #$10
.8245	d0 36		bne $827d	                bne _not_hex
.8247	98		tya		                tya
.8248	c9 04		cmp #$04	                cmp #$04
.824a	90 03		bcc $824f	                bcc _dec_fixnum
.824c	4c 2c 83	jmp $832c	                jmp function_not_available
.824f					_dec_fixnum:
.824f					_hex_fixnum_loop:
.824f	bd 00 03	lda $0300,x	                lda tkb,x
.8252	c9 82		cmp #$82	                cmp #T_NUM_END
.8254	f0 24		beq $827a	                beq _done_hex
.8256	20 c8 84	jsr $84c8	                jsr help_hexascii_to_value
.8259	10 03		bpl $825e	                bpl _legal_hex_digit
.825b	4c 24 83	jmp $8324	                jmp parser_bad_digit
.825e					_legal_hex_digit:
.825e	0a		asl a		                asl
.825f	0a		asl a		                asl
.8260	0a		asl a		                asl
.8261	0a		asl a		                asl
.8262	2a		rol a		                rol             ; bit 7 of A now in carry flag
.8263	26 03		rol $03		                rol tmp1+1      ; bit 7 of tmp1+1 now in carry flag
.8265	26 02		rol $02		                rol tmp1        ; now is bit 0 of tmp1
.8267	2a		rol a		                rol
.8268	26 03		rol $03		                rol tmp1+1
.826a	26 02		rol $02		                rol tmp1
.826c	2a		rol a		                rol
.826d	26 03		rol $03		                rol tmp1+1
.826f	26 02		rol $02		                rol tmp1
.8271	2a		rol a		                rol
.8272	26 03		rol $03		                rol tmp1+1
.8274	26 02		rol $02		                rol tmp1
.8276	e8		inx		                inx
.8277	88		dey		                dey
.8278	d0 d5		bne $824f	                bne _hex_fixnum_loop
.827a					_done_hex:
.827a	4c b1 82	jmp $82b1	                jmp parser_common_fixnum
.827d					_not_hex:
.827d	c9 02		cmp #$02	                cmp #$02
.827f	d0 28		bne $82a9	                bne _not_binary
.8281	98		tya		                tya
.8282	c9 0d		cmp #$0d	                cmp #$0D                ; "smaller than 13"
.8284	90 03		bcc $8289	                bcc _bin_fixnum
.8286	4c 2c 83	jmp $832c	                jmp function_not_available
.8289					_bin_fixnum:
.8289					_bin_fixnum_loop:
.8289	bd 00 03	lda $0300,x	                lda tkb,x
.828c	c9 30		cmp #$30	                cmp #'0'
.828e	f0 0b		beq $829b	                beq _legal_bit_char
.8290	c9 31		cmp #$31	                cmp #'1'
.8292	f0 07		beq $829b	                beq _legal_bit_char
.8294	c9 82		cmp #$82	                cmp #T_NUM_END
.8296	f0 0e		beq $82a6	                beq _done_bin
.8298	4c 24 83	jmp $8324	                jmp parser_bad_digit
.829b					_legal_bit_char:
.829b	29 01		and #$01	                and #$01                ; gives us $00 or $01
.829d	6a		ror a		                ror                     ; push the bit into carry flag
.829e	26 03		rol $03		                rol tmp1+1              ; rotate the carry flag into LSB ...
.82a0	26 02		rol $02		                rol tmp1                ; ... and highest bit of tmp1+1 to tmp1
.82a2	e8		inx		                inx                     ; next character
.82a3	88		dey		                dey                     ; decrease counter
.82a4	d0 e3		bne $8289	                bne _bin_fixnum_loop
.82a6					_done_bin:
.82a6	4c b1 82	jmp $82b1	                jmp parser_common_fixnum
.82a9					_not_binary:
.82a9					_illegal_radix:
.82a9	48		pha		                pha                             ; save the evil radix
.82aa	a9 07		lda #$07	                lda #str_bad_radix
.82ac	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.82af	80 69		bra $831a	                bra parser_common_panic         ; prints offending byte and LF
.82b1					parser_common_fixnum:
.82b1	a5 01		lda $01		                lda tmp0+1
.82b3	c9 ff		cmp #$ff	                cmp #T_MINUS
.82b5	f0 08		beq $82bf	                beq _negative_number
.82b7	a9 20		lda #$20	                lda #OT_FIXNUM
.82b9	05 02		ora $02		                ora tmp1        ; construct tag byte with MSB of number
.82bb	85 02		sta $02		                sta tmp1
.82bd	80 00		bra $82bf	                bra _add_fixnum_to_ast
.82bf					_negative_number:
.82bf					_add_fixnum_to_ast:
.82bf	a5 03		lda $03		                lda tmp1+1
.82c1	a4 02		ldy $02		                ldy tmp1
.82c3	20 34 83	jsr $8334	                jsr parser_add_object_to_ast
.82c6					_num_done:
.82c6	4c f5 81	jmp $81f5	                jmp parser_loop
.82c9					parser_not_num:
.82c9	c9 13		cmp #$13	                cmp #T_STR_START
.82cb	d0 47		bne $8314	                bne parser_not_string
.82cd	a5 1c		lda $1c		                lda hp_str+1    ; MSB of next free byte in string RAM segment
.82cf	29 0f		and #$0f	                and #$0F        ; mask high nibble (paranoid)
.82d1	09 50		ora #$50	                ora #OT_STRING  ; object tag nibble for strings
.82d3	a8		tay		                tay             ; MSB goes in Y
.82d4	a5 1b		lda $1b		                lda hp_str      ; LSB goes in A
.82d6	20 34 83	jsr $8334	                jsr parser_add_object_to_ast   ; Updates AST heap pointer
.82d9	e8		inx		                inx             ; move to first character of string
.82da	a0 00		ldy #$00	                ldy #0
.82dc					_string_loop:
.82dc	bd 00 03	lda $0300,x	                lda tkb,x
.82df	c9 83		cmp #$83	                cmp #T_STR_END
.82e1	f0 06		beq $82e9	                beq _string_end
.82e3	91 1b		sta ($1b),y	                sta (hp_str),y
.82e5	c8		iny		                iny
.82e6	e8		inx		                inx
.82e7	80 f3		bra $82dc	                bra _string_loop
.82e9					_string_end:
.82e9	a9 00		lda #$00	                lda #0
.82eb	c8		iny		                iny
.82ec	91 1b		sta ($1b),y	                sta (hp_str),y
.82ee	98		tya		                tya
.82ef	18		clc		                clc
.82f0	65 1b		adc $1b		                adc hp_str
.82f2	85 1b		sta $1b		                sta hp_str
.82f4	90 02		bcc $82f8	                bcc +
.82f6	e6 1c		inc $1c		                inc hp_str+1
.82f8					+
.82f8	a9 00		lda #$00	                lda #0
.82fa	92 1b		sta ($1b)	                sta (hp_str)
.82fc	a0 01		ldy #$01	                ldy #1
.82fe	91 1b		sta ($1b),y	                sta (hp_str),y
.8300	a5 1b		lda $1b		                lda hp_str
.8302	85 19		sta $19		                sta strp
.8304	a5 1c		lda $1c		                lda hp_str+1
.8306	85 1a		sta $1a		                sta strp+1
.8308	98		tya		                tya             ; #1
.8309	1a		inc a		                inc a
.830a	18		clc		                clc
.830b	65 1b		adc $1b		                adc hp_str
.830d	90 02		bcc $8311	                bcc +
.830f	e6 1c		inc $1c		                inc hp_str+1
.8311					+
.8311	4c f5 81	jmp $81f5	                jmp parser_loop
.8314					parser_not_string:
.8314					paser_bad_token:
.8314	48		pha		                pha                             ; save the evil token
.8315	a9 04		lda #$04	                lda #str_bad_token
.8317	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.831a					parser_common_panic:
.831a	68		pla		                pla
.831b	20 5e 84	jsr $845e	                jsr help_byte_to_ascii          ; print bad token as hex number
.831e	20 75 84	jsr $8475	                jsr help_emit_lf
.8321	4c 2d 80	jmp $802d	                jmp repl
.8324					parser_bad_digit:
.8324	48		pha		                pha
.8325	a9 06		lda #$06	                lda #str_bad_number
.8327	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.832a	80 ee		bra $831a	                bra parser_common_panic
.832c					function_not_available:
.832c	a9 08		lda #$08	                lda #str_cant_yet
.832e	20 97 84	jsr $8497	                jsr help_print_string
.8331	4c 2d 80	jmp $802d	                jmp repl
.8334					parser_add_object_to_ast:
.8334	da		phx		                phx             ; save index to token buffer
.8335	5a		phy		                phy             ; save MSB of the object (with tag)
.8336	48		pha		                pha             ; save LSB of the object
.8337	a5 16		lda $16		                lda hp_ast
.8339	85 00		sta $00		                sta tmp0
.833b	a5 17		lda $17		                lda hp_ast+1
.833d	85 01		sta $01		                sta tmp0+1
.833f	a9 00		lda #$00	                lda <#OC_END
.8341	a0 00		ldy #$00	                ldy #0
.8343	91 16		sta ($16),y	                sta (hp_ast),y
.8345	c8		iny		                iny
.8346	a9 00		lda #$00	                lda >#OC_END
.8348	91 16		sta ($16),y	                sta (hp_ast),y
.834a	c8		iny		                iny
.834b	68		pla		                pla             ; retrieve LSB
.834c	91 16		sta ($16),y	                sta (hp_ast),y
.834e	c8		iny		                iny
.834f	68		pla		                pla             ; retrieve MSB (with tag), was in Y
.8350	91 16		sta ($16),y	                sta (hp_ast),y
.8352	c8		iny		                iny
.8353	a9 00		lda #$00	                lda #0
.8355	91 16		sta ($16),y	                sta (hp_ast),y
.8357	c8		iny		                iny
.8358	91 16		sta ($16),y	                sta (hp_ast),y
.835a	c8		iny		                iny
.835b	98		tya		                tya
.835c	18		clc		                clc
.835d	65 16		adc $16		                adc hp_ast
.835f	85 16		sta $16		                sta hp_ast
.8361	90 02		bcc $8365	                bcc _store_address
.8363	e6 17		inc $17		                inc hp_ast+1
.8365					_store_address:
.8365	a5 00		lda $00		                lda tmp0        ; original LSB of hp
.8367	aa		tax		                tax             ; We'll need it again in a second
.8368	92 14		sta ($14)	                sta (astp)
.836a	a0 01		ldy #$01	                ldy #1
.836c	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp
.836e	91 14		sta ($14),y	                sta (astp),y
.8370	85 15		sta $15		                sta astp+1      ; MSB, was tmp0+1
.8372	86 14		stx $14		                stx astp        ; LSB, was tmp0
.8374	fa		plx		                plx             ; get back index for token buffer
.8375	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate
.8376					parser_done:
.8376	a9 00		lda #$00	                        lda <#OC_END
.8378	a2 00		ldx #$00	                        ldx >#OC_END
.837a	20 34 83	jsr $8334	                        jsr parser_add_object_to_ast

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.837d					eval:
.837d	20 40 85	jsr $8540	                jsr debug_dump_ast
.8380	20 2e 85	jsr $852e	                jsr debug_dump_hp
.8383	a5 13		lda $13		                lda rsn_ast     ; RAM segment nibble, default $10
.8385	85 02		sta $02		                sta tmp1
.8387	64 03		stz $03		                stz tmp1+1      ; Segment must start on 4 KiB line
.8389					eval_loop:
.8389	a0 03		ldy #$03	                ldy #3          ; MSB of the next node entry down ...
.838b	b1 02		lda ($02),y	                lda (tmp1),y    ; ...  which contains the tag nibble
.838d	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.838f	4a		lsr a		                lsr
.8390	4a		lsr a		                lsr
.8391	4a		lsr a		                lsr             ; Fourth LSR and ASL cancle each other
.8392	aa		tax		                tax
.8393	7c a5 83	jmp ($83a5,x)	                jmp (eval_table,X)
.8396					eval_next:
.8396	b2 02		lda ($02)	                lda (tmp1)              ; LSB of next entry
.8398	aa		tax		                tax
.8399	a0 01		ldy #$01	                ldy #1
.839b	b1 02		lda ($02),y	                lda (tmp1),y            ; MSB of next entry
.839d	85 03		sta $03		                sta tmp1+1
.839f	86 02		stx $02		                stx tmp1
.83a1	80 e6		bra $8389	                bra eval_loop
.83a3					eval_0_meta:
.83a3					eval_1_bool:
.83a3					eval_2_fixnum:
.83a3					eval_3_bignum:
.83a3					eval_4_char:
.83a3					eval_5_string:
.83a3	80 f1		bra $8396	                bra eval_next           ; paranoid, never reached
.83a5					eval_6_UNDEFINED:
.83a5					eval_7_UNDEFINED:
.83a5					eval_8_UNDEFINED:
.83a5					eval_9_UNDEFINED:
.83a5					eval_A_UNDEFINED:
.83a5					eval_B_UNDEFINED:
.83a5					eval_C_UNDEFINED:
.83a5					eval_D_UNDEFINED:
.83a5					eval_E_UNDEFINED:
.83a5					eval_F_UNDEFINED:
.83a5					eval_table:
>83a5	c5 83 96 83 96 83 96 83		        .word eval_done, eval_next, eval_next, eval_next
>83ad	96 83 96 83 96 83 96 83		        .word eval_next, eval_next, eval_next, eval_next
>83b5	96 83 96 83 96 83 96 83		        .word eval_next, eval_next, eval_next, eval_next
>83bd	96 83 96 83 96 83 96 83		        .word eval_next, eval_next, eval_next, eval_next
.83c5					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.83c5					printer:
.83c5	64 02		stz $02		                stz tmp1
.83c7	a5 13		lda $13		                lda rsn_ast     ; RAM segmet nibble
.83c9	85 03		sta $03		                sta tmp1+1
.83cb					printer_loop:
.83cb	20 75 84	jsr $8475	                jsr help_emit_lf
.83ce	a0 03		ldy #$03	                ldy #3          ; MSB of the next node entry down ...
.83d0	b1 02		lda ($02),y	                lda (tmp1),y    ; ...  which contains the tag nibble
.83d2	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.83d4	4a		lsr a		                lsr
.83d5	4a		lsr a		                lsr
.83d6	4a		lsr a		                lsr     ; Fourth LSR and ASL cancle each other
.83d7	aa		tax		                tax
.83d8	7c 2b 84	jmp ($842b,x)	                jmp (printer_table,X)
.83db					printer_next:
.83db	b2 02		lda ($02)	                lda (tmp1)      ; LSB of next entry
.83dd	aa		tax		                tax
.83de	a0 01		ldy #$01	                ldy #1
.83e0	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB of next entry
.83e2	85 03		sta $03		                sta tmp1+1
.83e4	86 02		stx $02		                stx tmp1
.83e6	4c cb 83	jmp $83cb	                jmp printer_loop
.83e9					printer_0_meta:
.83e9	80 60		bra $844b	                bra printer_done
.83eb					printer_1_bool:
.83eb	a0 02		ldy #$02	                ldy #2
.83ed	b1 02		lda ($02),y	                lda (tmp1),y            ; LSB
.83ef	d0 04		bne $83f5	                bne _bool_true          ; not a zero means true
.83f1	a9 03		lda #$03	                lda #str_false
.83f3	80 02		bra $83f7	                bra _bool_printer
.83f5					_bool_true:
.83f5	a9 02		lda #$02	                lda #str_true
.83f7					_bool_printer:
.83f7	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.83fa	80 df		bra $83db	                bra printer_next
.83fc					printer_2_fixnum:
.83fc	a0 03		ldy #$03	                ldy #3          ; tag nibble and high nibble of number
.83fe	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB nibble
.8400	29 0f		and #$0f	                and #$0F        ; Mask tag
.8402	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.8405	a0 02		ldy #$02	                ldy #2
.8407	b1 02		lda ($02),y	                lda (tmp1),y    ; LSB
.8409	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.840c	80 cd		bra $83db	                bra printer_next
.840e					printer_3_bignum:
.840e					printer_4_char:
.840e					printer_5_string:
.840e	a0 02		ldy #$02	                ldy #2
.8410	b1 02		lda ($02),y	                lda (tmp1),y    ; LSB of address in string heap
.8412	85 04		sta $04		                sta tmp2
.8414	c8		iny		                iny
.8415	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB with tag and high nibble of pointer
.8417	29 0f		and #$0f	                and #$0F        ; mask tag
.8419	05 18		ora $18		                ora rsn_str     ; merge with section nibble instead
.841b	85 05		sta $05		                sta tmp2+1
.841d	a0 00		ldy #$00	                ldy #0
.841f					_string_loop:
.841f	b1 04		lda ($04),y	                lda (tmp2),y
.8421	f0 b8		beq $83db	                beq printer_next       ; string is zero terminated
.8423	20 77 84	jsr $8477	                jsr help_emit_a
.8426	c8		iny		                iny
.8427	80 f6		bra $841f	                bra _string_loop
.8429					printer_6_UNDEFINED:
.8429					printer_7_UNDEFINED:
.8429					printer_8_UNDEFINED:
.8429					printer_9_UNDEFINED:
.8429					printer_A_UNDEFINED:
.8429					printer_B_UNDEFINED:
.8429					printer_C_UNDEFINED:
.8429					printer_D_UNDEFINED:
.8429					printer_E_UNDEFINED:
.8429					printer_F_UNDEFINED:
.8429	80 b0		bra $83db	                bra printer_next
.842b					printer_table:
>842b	4b 84 eb 83 fc 83 db 83		        .word printer_done, printer_1_bool, printer_2_fixnum, printer_next
>8433	db 83 0e 84 db 83 db 83		        .word printer_next, printer_5_string, printer_next, printer_next
>843b	db 83 db 83 db 83 db 83		        .word printer_next, printer_next, printer_next, printer_next
>8443	db 83 db 83 db 83 db 83		        .word printer_next, printer_next, printer_next, printer_next
.844b					printer_done:

;******  Return to file: platforms/../cthulhu.asm

.844b					repl_empty_line:
.844b	4c 2d 80	jmp $802d	                jmp repl
.844e					repl_quit:
.844e	20 75 84	jsr $8475	                jsr help_emit_lf
.8451	a9 09		lda #$09	                lda #str_end_input
.8453	20 97 84	jsr $8497	                jsr help_print_string
.8456	a9 0a		lda #$0a	                lda #str_chant
.8458	20 97 84	jsr $8497	                jsr help_print_string
.845b	4c 2b f0	jmp $f02b	                jmp platform_quit

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.845e					help_byte_to_ascii:
.845e	48		pha		                pha
.845f	4a		lsr a		                lsr             ; convert high nibble first
.8460	4a		lsr a		                lsr
.8461	4a		lsr a		                lsr
.8462	4a		lsr a		                lsr
.8463	20 67 84	jsr $8467	                jsr help_nibble_to_ascii
.8466	68		pla		                pla
.8467					help_nibble_to_ascii:
.8467	29 0f		and #$0f	                and #$0F
.8469	09 30		ora #$30	                ora #'0'
.846b	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.846d	90 02		bcc $8471	                bcc +
.846f	69 06		adc #$06	                adc #$06
.8471	4c 77 84	jmp $8477	+               jmp help_emit_a       ; JSR/RTS
.8474					help_to_lowercase:
.8474	60		rts		                rts
.8475					help_emit_lf:
.8475	a9 0a		lda #$0a	                lda #AscLF
.8477					help_emit_a:
.8477	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.847a					help_key_a:
.847a	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.847d					help_print_string_no_lf:
.847d	0a		asl a		                asl
.847e	a8		tay		                tay
.847f	b9 12 86	lda $8612,y	                lda string_table,y
.8482	85 00		sta $00		                sta tmp0                ; LSB
.8484	c8		iny		                iny
.8485	b9 12 86	lda $8612,y	                lda string_table,y
.8488	85 01		sta $01		                sta tmp0+1              ; MSB
.848a					help_print_common:
.848a	a0 00		ldy #$00	                ldy #0
.848c					_loop:
.848c	b1 00		lda ($00),y	                lda (tmp0),y
.848e	f0 06		beq $8496	                beq _done               ; strings are zero-terminated
.8490	20 77 84	jsr $8477	                jsr help_emit_a         ; allows vectoring via output
.8493	c8		iny		                iny
.8494	80 f6		bra $848c	                bra _loop
.8496					_done:
.8496	60		rts		                rts
.8497					help_print_string:
.8497	20 7d 84	jsr $847d	                jsr help_print_string_no_lf
.849a	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.849c	4c 77 84	jmp $8477	                jmp help_emit_a         ; JSR/RTS
.849f					help_is_decdigit:
.849f	c9 30		cmp #$30	                cmp #'0'
.84a1	90 07		bcc $84aa	                bcc _below_zero         ; A is < '0'
.84a3	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.84a5	b0 02		bcs $84a9	                bcs _above_nine
.84a7	38		sec		                sec
.84a8	60		rts		                rts
.84a9					_above_nine:
.84a9	18		clc		                clc
.84aa					_below_zero:
.84aa	60		rts		                rts
.84ab					help_is_delimiter:
.84ab	20 b1 84	jsr $84b1	                jsr help_is_whitespace
.84ae	b0 00		bcs $84b0	                bcs _delimiter_done
.84b0					_delimiter_done:
.84b0	60		rts		                rts
.84b1					help_is_whitespace:
.84b1	38		sec		                sec             ; default is whitespace
.84b2	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.84b4	f0 11		beq $84c7	                beq _done
.84b6	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.84b8	f0 0d		beq $84c7	                beq _done
.84ba	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.84bc	f0 09		beq $84c7	                beq _done
.84be	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.84c0	f0 05		beq $84c7	                beq _done
.84c2	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.84c4	f0 01		beq $84c7	                beq _done
.84c6	18		clc		                clc             ; If we end up here, it's not whitespace
.84c7					_done:
.84c7	60		rts		                rts
.84c8					help_hexascii_to_value:
.84c8	20 9f 84	jsr $849f	                jsr help_is_decdigit
.84cb	90 05		bcc $84d2	                bcc _see_if_letter
.84cd	38		sec		                sec
.84ce	e9 30		sbc #$30	                sbc #'0'
.84d0	80 0f		bra $84e1	                bra _done
.84d2					_see_if_letter:
.84d2	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.84d4	90 17		bcc $84ed	                bcc _error
.84d6	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.84d8	b0 13		bcs $84ed	                bcs _error
.84da	c9 61		cmp #$61	                cmp #'a'
.84dc	90 06		bcc $84e4	                bcc _uppercase
.84de	38		sec		                sec
.84df	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.84e1					_done:
.84e1	29 0f		and #$0f	                and #$0F        ; paranoid
.84e3	60		rts		                rts
.84e4					_uppercase:
.84e4	c9 47		cmp #$47	                cmp #'G'
.84e6	b0 05		bcs $84ed	                bcs _error
.84e8	38		sec		                sec
.84e9	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.84eb	80 f4		bra $84e1	                bra _done
.84ed					_error:
.84ed	a9 80		lda #$80	                lda #$80
.84ef	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.84f0					proc_char_whitespace_p:
.84f0					proc_newline:
.84f0					proc_display:
.84f0					proc_read:
.84f0					proc_read_char:
.84f0					proc_read_line:
.84f0					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.84f0					debug_dump_input:
.84f0	20 75 84	jsr $8475	                jsr help_emit_lf
.84f3	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.84f5	20 ab 85	jsr $85ab	                jsr debug_print_string_no_lf
.84f8	a2 00		ldx #$00	                ldx #0
.84fa					-
.84fa	bd 00 02	lda $0200,x	                lda cib,x
.84fd	f0 0b		beq $850a	                beq _done
.84ff	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.8502	e8		inx		                inx
.8503	a9 20		lda #$20	                lda #' '
.8505	20 77 84	jsr $8477	                jsr help_emit_a
.8508	80 f0		bra $84fa	                bra -
.850a					_done:
.850a	4c 5e 84	jmp $845e	                jmp help_byte_to_ascii          ; JSR/RTS
.850d					debug_dump_token:
.850d	20 75 84	jsr $8475	                jsr help_emit_lf
.8510	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.8512	20 ab 85	jsr $85ab	                jsr debug_print_string_no_lf
.8515	a2 00		ldx #$00	                ldx #0
.8517					-
.8517	bd 00 03	lda $0300,x	                lda tkb,x
.851a	c9 00		cmp #$00	                cmp #T_END
.851c	f0 0d		beq $852b	                beq _done
.851e	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.8521	e8		inx		                inx
.8522	a9 20		lda #$20	                lda #' '
.8524	20 77 84	jsr $8477	                jsr help_emit_a
.8527	e4 11		cpx $11		                cpx tkbp
.8529	d0 ec		bne $8517	                bne -
.852b					_done:
.852b	4c 5e 84	jmp $845e	                jmp help_byte_to_ascii          ; JSR/RTS
.852e					debug_dump_hp:
.852e	20 75 84	jsr $8475	                jsr help_emit_lf
.8531	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.8533	20 ab 85	jsr $85ab	                jsr debug_print_string_no_lf
.8536	a5 17		lda $17		                lda hp_ast+1
.8538	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.853b	a5 16		lda $16		                lda hp_ast
.853d	4c 5e 84	jmp $845e	                jmp help_byte_to_ascii          ; JSR/RTS
.8540					debug_dump_ast:
.8540	20 75 84	jsr $8475	                jsr help_emit_lf
.8543	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.8545	20 ab 85	jsr $85ab	                jsr debug_print_string_no_lf
.8548	a5 13		lda $13		                lda rsn_ast             ; RAM segment nibble
.854a	85 03		sta $03		                sta tmp1+1
.854c	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.854f	64 02		stz $02		                stz tmp1
.8551	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.8554					_loop:
.8554	a9 20		lda #$20	                lda #' '
.8556	20 77 84	jsr $8477	                jsr help_emit_a
.8559	a0 01		ldy #$01	                ldy #1
.855b	b1 02		lda ($02),y	                lda (tmp1),y
.855d	85 05		sta $05		                sta tmp2+1
.855f	20 5e 84	jsr $845e	                jsr help_byte_to_ascii          ; MSB
.8562	b2 02		lda ($02)	                lda (tmp1)
.8564	85 04		sta $04		                sta tmp2                        ; pointer to next entry, LSB
.8566	20 5e 84	jsr $845e	                jsr help_byte_to_ascii          ; LSB
.8569	a9 3a		lda #$3a	                lda #':'
.856b	20 77 84	jsr $8477	                jsr help_emit_a
.856e	a0 03		ldy #$03	                ldy #3
.8570	b1 02		lda ($02),y	                lda (tmp1),y                    ; MSB
.8572	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.8575	a0 02		ldy #$02	                ldy #2
.8577	b1 02		lda ($02),y	                lda (tmp1),y                    ; LSB
.8579	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.857c	a9 3a		lda #$3a	                lda #':'
.857e	20 77 84	jsr $8477	                jsr help_emit_a
.8581	a0 05		ldy #$05	                ldy #5
.8583	b1 02		lda ($02),y	                lda (tmp1),y
.8585	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.8588	a0 04		ldy #$04	                ldy #4
.858a	b1 02		lda ($02),y	                lda (tmp1),y
.858c	20 5e 84	jsr $845e	                jsr help_byte_to_ascii
.858f	a5 04		lda $04		                lda tmp2
.8591	05 05		ora $05		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.8593	f0 0a		beq $859f	                beq _done
.8595	a5 04		lda $04		                lda tmp2
.8597	85 02		sta $02		                sta tmp1
.8599	a5 05		lda $05		                lda tmp2+1
.859b	85 03		sta $03		                sta tmp1+1
.859d	80 b5		bra $8554	                bra _loop
.859f					_done:
.859f	60		rts		                rts
.85a0					debug_emit_a:
.85a0	48		pha		                pha
.85a1	20 75 84	jsr $8475	                jsr help_emit_lf
.85a4	68		pla		                pla
.85a5	20 77 84	jsr $8477	                jsr help_emit_a
.85a8	4c 75 84	jmp $8475	                jmp help_emit_lf        ; JSR/RTS
.85ab					debug_print_string_no_lf:
.85ab	0a		asl a		                asl
.85ac	a8		tay		                tay
.85ad	b9 fe 85	lda $85fe,y	                lda sd_table,y
.85b0	85 00		sta $00		                sta tmp0                ; LSB
.85b2	c8		iny		                iny
.85b3	b9 fe 85	lda $85fe,y	                lda sd_table,y
.85b6	85 01		sta $01		                sta tmp0+1              ; MSB
.85b8					debug_print_common:
.85b8	a0 00		ldy #$00	                ldy #0
.85ba					_loop:
.85ba	b1 00		lda ($00),y	                lda (tmp0),y
.85bc	f0 06		beq $85c4	                beq _done               ; strings are zero-terminated
.85be	20 77 84	jsr $8477	                jsr help_emit_a         ; allows vectoring via output
.85c1	c8		iny		                iny
.85c2	80 f6		bra $85ba	                bra _loop
.85c4					_done:
.85c4	60		rts		                rts
.85c5					debug_print_string:
.85c5	20 ab 85	jsr $85ab	                jsr debug_print_string_no_lf
.85c8	4c 75 84	jmp $8475	                jmp help_emit_lf        ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
=3					strd_dump_input = 3
>85cb	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>85d3	66 66 65 72 3a 20 00
>85da	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>85e0	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>85e8	6e 74 65 72 3a 20 00
>85ef	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>85f7	66 66 65 72 3a 20 00
.85fe					sd_table:
>85fe	cb 85 da 85 e0 85 ef 85		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input      ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					input_f  .byte ?     ; input flag for Reader, see details there
>000b					ciblen:  .word ?     ; current size of input buffer
>000d					cibp:    .word ?     ; index of current char in input buffer
>000f					tkblen:  .word ?     ; current size of the token buffer
>0011					tkbp:    .word ?     ; index of current token in token buffer
>0013					rsn_ast  .byte ?     ; RAM segment nibble for AST segment (default 1)
>0014					astp     .word ?     ; pointer to current entry in AST
>0016					hp_ast   .word ?     ; next free byte in AST RAM segment
>0018					rsn_str  .byte ?     ; RAM segment nibble for strings (default 2)
>0019					strp     .word ?     ; pointer to current entry in string table
>001b					hp_str   .word ?     ; next free byte in string RAM segment
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00    ; used for end of input and other markers
=$10					OT_BOOL         = $10    ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20    ; used for fixed numbers; immediate
=$30					OT_BIGNUM       = $30    ; used for bignum
=$40					OT_CHAR         = $40    ; used for chars; immediate
=$50					OT_STRING       = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8606					h_newline:
>8606	00 00				        .addr 0000              ; end of header list
>8608	f0 84				        .addr proc_newline
>860a	07				        .byte 7
>860b	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
=6					str_bad_number = 6
=7					str_bad_radix  = 7
=8					str_cant_yet   = 8      ; TODO temp during development
=9					str_end_input  = 9
=10					str_chant      = 10
=11					str_prompt     = 11
.8612					string_table:
>8612	2a 86 3e 86 58 86 5b 86		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>861a	5e 86 72 86 8d 86 a3 86		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>8622	b7 86 d0 86 ed 86 21 87		        .word s_cant_yet, s_end_input, s_chant, s_prompt             ; 8-11
>862a	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable: "           ; REPL input error
>8632	20 76 61 72 69 61 62 6c 65 3a 20 00
>863e	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8646	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8656	65 00
>8658	23 74 00			s_true:         .null   "#t"
>865b	23 66 00			s_false:        .null   "#f"
>865e	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>8666	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>8672	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>867a	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>868a	3a 20 00
>868d	3b 49 6c 6c 2d 66 6f 72		s_bad_number:   .null   ";Ill-formed number: $"         ; from lexer
>8695	6d 65 64 20 6e 75 6d 62 65 72 3a 20 24 00
>86a3	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>86ab	61 64 20 72 61 64 69 78 3a 20 24 00
>86b7	41 4c 50 48 41 3a 20 43		s_cant_yet      .null   "ALPHA: Can't do that yet"      ; from parser
>86bf	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>86cf	00
>86d0	45 6e 64 20 6f 66 20 69		s_end_input     .null   "End of input stream reached."  ; from reader
>86d8	6e 70 75 74 20 73 74 72 65 61 6d 20 72 65 61 63
>86e8	68 65 64 2e 00
>86ed	50 68 27 6e 67 6c 75 69		s_chant         .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."   ; from reader
>86f5	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>8705	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>8715	61 67 6c 20 66 68 74 61 67 6e 2e 00
>8721	3e 20 00			s_prompt        .null   "> "
>8724	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>872c	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (13. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 31 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
