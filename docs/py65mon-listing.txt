
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Mon Apr 13 15:56:06 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 12		sta $12		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 13		sta $13		                sta hp+1
.8011	64 14		stz $14		                stz symtbl
.8013	64 15		stz $15		                stz symtbl+1
.8015	64 16		stz $16		                stz strtbl
.8017	64 17		stz $17		                stz strtbl+1
.8019	64 18		stz $18		                stz bnmtbl
.801b	64 19		stz $19		                stz bnmtbl+1
.801d	64 1a		stz $1a		                stz ast
.801f	64 1b		stz $1b		                stz ast+1
.8021	a9 21		lda #$21	                lda #<kernel_getc
.8023	85 08		sta $08		                sta input
.8025	a9 f0		lda #$f0	                lda #>kernel_putc
.8027	85 09		sta $09		                sta input+1
.8029					repl:
.8029	64 0a		stz $0a		                stz ciblen
.802b	64 0b		stz $0b		                stz ciblen+1
.802d					repl_read:
.802d	a0 00		ldy #$00	                ldy #0
.802f	a9 3e		lda #$3e	                lda #'>'
.8031	20 74 83	jsr $8374	                jsr help_emit_a
.8034	a9 20		lda #$20	                lda #' '
.8036	20 74 83	jsr $8374	                jsr help_emit_a
.8039					repl_read_loop:
.8039	20 77 83	jsr $8377	                jsr help_key_a
.803c	c9 0a		cmp #$0a	                cmp #AscLF
.803e	f0 1b		beq $805b	                beq repl_read_eol
.8040	c9 0d		cmp #$0d	                cmp #AscCR
.8042	f0 17		beq $805b	                beq repl_read_eol
.8044	c9 08		cmp #$08	                cmp #AscBS
.8046	f0 31		beq $8079	                beq repl_read_backspace
.8048	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.804a	f0 2d		beq $8079	                beq repl_read_backspace
.804c	c9 04		cmp #$04	                cmp #$04
.804e	f0 17		beq $8067	                beq repl_input_end
.8050	99 00 02	sta $0200,y	                sta cib,y
.8053	c8		iny		                iny
.8054	20 74 83	jsr $8374	                jsr help_emit_a
.8057	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8059	d0 de		bne $8039	                bne repl_read_loop    ; fall thru if buffer limit reached
.805b					repl_read_eol:
.805b					repl_read_buffer_full:
.805b	84 0a		sty $0a		                sty ciblen      ; Y contains number of chars accepted already
.805d	a9 00		lda #$00	                lda #0
.805f	85 0b		sta $0b		                sta ciblen+1    ; we only accept 256 chars
.8061	99 00 02	sta $0200,y	                sta cib,y
.8064	4c 95 80	jmp $8095	                jmp lexer
.8067					repl_input_end:
.8067	a9 0a		lda #$0a	                lda #AscLF
.8069	20 74 83	jsr $8374	                jsr help_emit_a
.806c	a9 09		lda #$09	                lda #str_end_input
.806e	20 94 83	jsr $8394	                jsr help_print_string
.8071	a9 0a		lda #$0a	                lda #str_chant
.8073	20 94 83	jsr $8394	                jsr help_print_string
.8076	4c 2b f0	jmp $f02b	                jmp platform_quit
.8079					repl_read_backspace:
.8079	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.807b	d0 06		bne $8083	                bne +
.807d	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.807f	20 74 83	jsr $8374	                jsr help_emit_a
.8082	c8		iny		                iny
.8083					+
.8083	88		dey		                dey
.8084	a9 08		lda #$08	                lda #AscBS      ; move back one
.8086	20 74 83	jsr $8374	                jsr help_emit_a
.8089	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.808b	20 74 83	jsr $8374	                jsr help_emit_a
.808e	a9 08		lda #$08	                lda #AscBS      ; move back over space
.8090	20 74 83	jsr $8374	                jsr help_emit_a
.8093	80 a4		bra $8039	                bra repl_read_loop

;******  Processing file: platforms/../lexer.asm

.8095					lexer:
.8095	20 ed 83	jsr $83ed	                jsr debug_dump_input
.8098	a0 00		ldy #$00	                ldy #0
.809a	64 0c		stz $0c		                stz cibp
.809c	64 0d		stz $0d		                stz cibp+1      ; MSB currently unused
.809e	64 10		stz $10		                stz tkbp
.80a0	64 11		stz $11		                stz tkbp+1      ; MSB currently unused
.80a2					lexer_loop:
.80a2	b9 00 02	lda $0200,y	                lda cib,y
.80a5	20 ae 83	jsr $83ae	                jsr help_is_whitespace
.80a8	90 03		bcc $80ad	                bcc _not_whitespace
.80aa	4c 68 81	jmp $8168	                jmp lexer_next
.80ad					_not_whitespace:
.80ad					_test_parens:
.80ad					_test_done:
.80ad	d0 03		bne $80b2	                bne _not_done
.80af	4c 70 81	jmp $8170	                jmp lexer_end_of_input          ; not the same as lexer_done
.80b2					_not_done:
.80b2	c9 23		cmp #$23	                cmp #'#'
.80b4	f0 03		beq $80b9	                beq _got_sharp
.80b6	4c 56 81	jmp $8156	                jmp lexer_not_sharp             ; too far for branch
.80b9					_got_sharp:
.80b9	c8		iny		                iny
.80ba	b9 00 02	lda $0200,y	                lda cib,y
.80bd	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.80bf	d0 08		bne $80c9	                bne _not_true
.80c1	a9 10		lda #$10	                lda #T_TRUE
.80c3	20 78 81	jsr $8178	                jsr lexer_add_token
.80c6	4c 68 81	jmp $8168	                jmp lexer_next
.80c9					_not_true:
.80c9	c9 66		cmp #$66	                cmp #'f'
.80cb	d0 08		bne $80d5	                bne _not_false
.80cd	a9 11		lda #$11	                lda #T_FALSE
.80cf	20 78 81	jsr $8178	                jsr lexer_add_token
.80d2	4c 68 81	jmp $8168	                jmp lexer_next
.80d5					_not_false:
.80d5	c9 5c		cmp #$5c	                cmp #'\'
.80d7	d0 00		bne $80d9	                bne _no_backslash
.80d9					_not_single_char:
.80d9					_not_named_char:
.80d9					_no_backslash:
.80d9					_not_vector:
.80d9	c9 78		cmp #$78	                        cmp #'x'        ; #x is hexadecimal
.80db	d0 04		bne $80e1	                        bne _not_hexnum
.80dd	a9 10		lda #$10	                        lda #$10        ; Base 16
.80df	80 13		bra $80f4	                        bra lexer_got_number
.80e1					_not_hexnum:
.80e1	c9 62		cmp #$62	                        cmp #'b'        ; #b is binary
.80e3	d0 04		bne $80e9	                        bne _not_binnum
.80e5	a9 02		lda #$02	                        lda #$02        ; Base 2
.80e7	80 0b		bra $80f4	                        bra lexer_got_number
.80e9					_not_binnum:
.80e9	c9 64		cmp #$64	                        cmp #'d'        ; #d is explicit decimal
.80eb	d0 04		bne $80f1	                        bne _illegal_radix
.80ed	a9 0a		lda #$0a	                        lda #$0A        ; Base 10
.80ef	80 03		bra $80f4	                        bra lexer_got_number
.80f1					_illegal_radix:
.80f1	4c 4e 81	jmp $814e	                        jmp lexer_illegal_radix
.80f4					lexer_got_number:
.80f4	48		pha		                        pha                     ; Save the radix for the moment
.80f5	a9 12		lda #$12	                        lda #T_NUM_START
.80f7	20 78 81	jsr $8178	                        jsr lexer_add_token
.80fa	68		pla		                        pla
.80fb	20 78 81	jsr $8178	                        jsr lexer_add_token
.80fe	a6 10		ldx $10		                        ldx tkbp        ; get index of where length will be
.8100	86 00		stx $00		                        stx tmp0
.8102	a9 00		lda #$00	                        lda #0          ; dummy length value
.8104	20 78 81	jsr $8178	                        jsr lexer_add_token
.8107	c8		iny		                        iny             ; Y is still the input buffer index
.8108	b9 00 02	lda $0200,y	                        lda cib,y
.810b	a2 00		ldx #$00	                        ldx #0          ; X counts length of string
.810d	c9 2d		cmp #$2d	                        cmp #'-'
.810f	d0 09		bne $811a	                        bne _check_for_plus
.8111	a9 ff		lda #$ff	                        lda #T_MINUS
.8113	20 78 81	jsr $8178	                        jsr lexer_add_token
.8116	c8		iny		                        iny             ; skip minus character
.8117	e8		inx		                        inx             ; string now has length of 1
.8118	80 0b		bra $8125	                        bra _sign_done
.811a					_check_for_plus:
.811a	c9 2b		cmp #$2b	                        cmp #'+'
.811c	d0 01		bne $811f	                        bne _default_plus
.811e	c8		iny		                        iny
.811f					_default_plus:
.811f	a9 ee		lda #$ee	                        lda #T_PLUS
.8121	20 78 81	jsr $8178	                        jsr lexer_add_token
.8124	e8		inx		                        inx             ; string now has length of 1
.8125					_sign_done:
.8125	b9 00 02	lda $0200,y	                        lda cib,y
.8128	f0 24		beq $814e	                        beq lexer_terminator_too_early  ; 00 terminates input
.812a	20 a8 83	jsr $83a8	                        jsr help_is_delimiter
.812d	b0 1f		bcs $814e	                        bcs lexer_delimiter_too_early
.812f					_number_loop:
.812f	20 78 81	jsr $8178	                        jsr lexer_add_token
.8132	e8		inx		                        inx             ; String one character longer
.8133	c8		iny		                        iny             ; Next character
.8134	b9 00 02	lda $0200,y	                        lda cib,y
.8137	f0 07		beq $8140	                        beq _legal_terminator
.8139	20 a8 83	jsr $83a8	                        jsr help_is_delimiter
.813c	b0 02		bcs $8140	                        bcs _number_done
.813e	80 ef		bra $812f	                        bra _number_loop
.8140					_legal_terminator:
.8140					_number_done:
.8140	a9 82		lda #$82	                        lda #T_NUM_END
.8142	20 78 81	jsr $8178	                        jsr lexer_add_token
.8145	8a		txa		                        txa             ; number of chars was in X
.8146	a6 00		ldx $00		                        ldx tmp0        ; index of length byte in token stream
.8148	9d 00 03	sta $0300,x	                        sta tkb,x
.814b	4c 69 81	jmp $8169	                        jmp lexer_next_same_char
.814e					lexer_illegal_radix:
.814e					lexer_terminator_too_early:
.814e					lexer_delimiter_too_early:
.814e	a9 06		lda #$06	                lda #str_bad_number
.8150	20 94 83	jsr $8394	                jsr help_print_string
.8153	4c 29 80	jmp $8029	                jmp repl
.8156					lexer_not_octnum
.8156					lexer_not_sharp:
.8156					_not_decnum:
.8156					_not_string:
.8156					lexer_error:
.8156	48		pha		                pha
.8157	a9 00		lda #$00	                lda #str_unbound
.8159	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.815c	68		pla		                pla
.815d	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8160	a9 0a		lda #$0a	                lda #AscLF
.8162	20 74 83	jsr $8374	                jsr help_emit_a
.8165	4c 29 80	jmp $8029	                jmp repl
.8168					lexer_next:
.8168	c8		iny		                iny
.8169					lexer_next_same_char:
.8169	c4 0a		cpy $0a		                cpy ciblen
.816b	f0 03		beq $8170	                beq lexer_end_of_input
.816d	4c a2 80	jmp $80a2	                jmp lexer_loop
.8170					lexer_end_of_input:
.8170	a9 00		lda #$00	                lda #T_END
.8172	20 78 81	jsr $8178	                jsr lexer_add_token
.8175	4c 83 81	jmp $8183	                jmp lexer_done
.8178					lexer_add_token:
.8178	5a		phy		                phy             ; Could also store in cibp
.8179	a4 10		ldy $10		                ldy tkbp
.817b	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.817e	c8		iny		                iny
.817f	84 10		sty $10		                sty tkbp
.8181	7a		ply		                ply
.8182	60		rts		                rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01   ; '('
=$02					T_PAREN_CLOSED  = $02   ; ')'
=$03					T_SHARP         = $03   ; '#' - note '#f', '#t' and others are precprocessed
=$10					T_TRUE       = $10   ; '#t'
=$11					T_FALSE      = $11   ; '#f'
=$12					T_NUM_START  = $12   ; Marks beginning of a number sequence
=$82					T_NUM_END    = $82   ; Marks end of a number sequence, see T_NUM_START
=$ee					T_PLUS       = $EE   ; Also used in number token sequence
=$ff					T_MINUS      = $FF   ; Also used in number token sequence
.8183					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.8183					parser:
.8183	20 0c 84	jsr $840c	                jsr debug_dump_token
.8186	64 1a		stz $1a		                stz ast
.8188	64 1b		stz $1b		                stz ast+1
.818a	64 10		stz $10		                stz tkbp
.818c	64 11		stz $11		                stz tkbp+1      ; fake, currently only using LSB
.818e	a9 1a		lda #$1a	                lda <#ast
.8190	85 1c		sta $1c		                sta astp
.8192	a9 00		lda #$00	                lda >#ast       ; paranoid, MSB always 00 for zero page
.8194	85 1d		sta $1d		                sta astp+1
.8196	a2 ff		ldx #$ff	                ldx #$FF
.8198					parser_loop:
.8198	e8		inx		                inx
.8199	bd 00 03	lda $0300,x	                lda tkb,x
.819c					_end_token:
.819c	c9 00		cmp #$00	                cmp #T_END
.819e	d0 03		bne $81a3	                bne _not_end_token
.81a0	4c e1 82	jmp $82e1	                jmp parser_done
.81a3					_not_end_token:
.81a3	c9 10		cmp #$10	                cmp #T_TRUE
.81a5	d0 0a		bne $81b1	                bne _not_true_token
.81a7	a9 ff		lda #$ff	                lda <#OC_TRUE
.81a9	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.81ab	20 9f 82	jsr $829f	                jsr parser_add_object
.81ae	4c 98 81	jmp $8198	                jmp parser_loop
.81b1					_not_true_token:
.81b1	c9 11		cmp #$11	                cmp #T_FALSE
.81b3	d0 0a		bne $81bf	                bne _not_false_token
.81b5	a9 00		lda #$00	                lda <#OC_FALSE
.81b7	a0 10		ldy #$10	                ldy >#OC_FALSE
.81b9	20 9f 82	jsr $829f	                jsr parser_add_object
.81bc	4c 98 81	jmp $8198	                jmp parser_loop
.81bf					_not_false_token:
.81bf	c9 12		cmp #$12	                cmp #T_NUM_START
.81c1	f0 03		beq $81c6	                beq +
.81c3	4c 7d 82	jmp $827d	                jmp parser_not_num              ; Too far for BRA
.81c6					+
.81c6	64 02		stz $02		                stz tmp1
.81c8	64 03		stz $03		                stz tmp1+1
.81ca	e8		inx		                inx                     ; skip over T_NUM_START TOKEN
.81cb	bd 00 03	lda $0300,x	                lda tkb,x
.81ce	85 00		sta $00		                sta tmp0        ; radix
.81d0	e8		inx		                inx
.81d1	bd 00 03	lda $0300,x	                lda tkb,x
.81d4	a8		tay		                tay             ; we need the length of the string later ...
.81d5	88		dey		                dey             ; ... but we don't need to include the sign
.81d6	e8		inx		                inx             ; Move to token for sign, T_PLUS or T_MINUS
.81d7	bd 00 03	lda $0300,x	                lda tkb,x
.81da	85 01		sta $01		                sta tmp0+1      ; Just store sign for now
.81dc	e8		inx		                inx
.81dd	a5 00		lda $00		                lda tmp0        ; radix
.81df	c9 0a		cmp #$0a	                cmp #$0a
.81e1	d0 03		bne $81e6	                bne _not_dec
.81e3	4c 65 82	jmp $8265	                jmp parser_common_fixnum
.81e6					_not_dec:
.81e6	c9 10		cmp #$10	                cmp #$10
.81e8	d0 6d		bne $8257	                bne _not_hex
.81ea	98		tya		                tya
.81eb	c9 04		cmp #$04	                cmp #$04
.81ed	90 03		bcc $81f2	                bcc _dec_fixnum
.81ef	4c 97 82	jmp $8297	                jmp function_not_available
.81f2					_dec_fixnum:
.81f2	bd 00 03	lda $0300,x	                lda tkb,x
.81f5	20 c5 83	jsr $83c5	                jsr help_hexascii_to_value
.81f8	10 03		bpl $81fd	                bpl _legal_first_hex_digit
.81fa	4c 8f 82	jmp $828f	                jmp parser_bad_digit
.81fd					_legal_first_hex_digit:
.81fd	85 03		sta $03		                sta tmp1+1      ; MSB, lower nibble
.81ff	e8		inx		                inx
.8200	bd 00 03	lda $0300,x	                lda tkb,x
.8203	c9 82		cmp #$82	                cmp #T_NUM_END
.8205	f0 23		beq $822a	                beq _done_hex
.8207	20 c5 83	jsr $83c5	                jsr help_hexascii_to_value
.820a	10 03		bpl $820f	                bpl _legal_second_hex_digit
.820c	4c 8f 82	jmp $828f	                jmp parser_bad_digit
.820f					_legal_second_hex_digit:
.820f	0a		asl a		                asl
.8210	0a		asl a		                asl
.8211	0a		asl a		                asl
.8212	0a		asl a		                asl
.8213	05 03		ora $03		                ora tmp1+1      ; MSB, both nibbles
.8215	85 03		sta $03		                sta tmp1+1
.8217	e8		inx		                inx
.8218	bd 00 03	lda $0300,x	                lda tkb,x
.821b	c9 82		cmp #$82	                cmp #T_NUM_END
.821d	f0 0b		beq $822a	                beq _done_hex
.821f	20 c5 83	jsr $83c5	                jsr help_hexascii_to_value
.8222	10 03		bpl $8227	                bpl _legal_third_hex_digit
.8224	4c 8f 82	jmp $828f	                jmp parser_bad_digit
.8227					_legal_third_hex_digit:
.8227	85 02		sta $02		                sta tmp1        ; LSB, lower nibble, upper is for object tag
.8229	e8		inx		                inx
.822a					_done_hex:
.822a	c0 01		cpy #$01	                cpy #1
.822c	f0 26		beq $8254	                beq _done_hex_shuffle
.822e	c0 02		cpy #$02	                cpy #2
.8230	d0 0e		bne $8240	                bne _shuffle_three_digits
.8232	a5 03		lda $03		                lda tmp1+1      ; $21 for example
.8234	0a		asl a		                asl
.8235	69 80		adc #$80	                adc #$80
.8237	2a		rol a		                rol
.8238	0a		asl a		                asl
.8239	69 80		adc #$80	                adc #$80
.823b	2a		rol a		                rol
.823c	85 03		sta $03		                sta tmp1+1
.823e	80 14		bra $8254	                bra _done_hex_shuffle
.8240					_shuffle_three_digits:
.8240	a5 02		lda $02		                lda tmp1        ; $03
.8242	a8		tay		                tay
.8243	a5 03		lda $03		                lda tmp1+1      ; $21
.8245	29 0f		and #$0f	                and #$0f        ; $01
.8247	85 02		sta $02		                sta tmp1
.8249	a5 03		lda $03		                lda tmp1+1      ; $21
.824b	29 f0		and #$f0	                and #$f0        ; $20
.824d	85 03		sta $03		                sta tmp1+1
.824f	98		tya		                tya             ; $03
.8250	05 03		ora $03		                ora tmp1+1      ; $23
.8252	85 03		sta $03		                sta tmp1+1
.8254					_done_hex_shuffle:
.8254	4c 65 82	jmp $8265	                jmp parser_common_fixnum
.8257					_not_hex:
.8257	c9 02		cmp #$02	                cmp #$02
.8259	d0 02		bne $825d	                bne _not_binary
.825b	80 08		bra $8265	                bra parser_common_fixnum
.825d					_not_binary:
.825d					_illegal_radix:
.825d	48		pha		                pha                             ; save the evil radix
.825e	a9 07		lda #$07	                lda #str_bad_radix
.8260	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.8263	80 1e		bra $8283	                bra parser_common_panic         ; prints offending byte and LF
.8265					parser_common_fixnum:
.8265	a5 01		lda $01		                lda tmp0+1
.8267	c9 ff		cmp #$ff	                cmp #T_MINUS
.8269	f0 08		beq $8273	                beq _negative_number
.826b	a9 20		lda #$20	                lda #OT_FIXNUM
.826d	05 02		ora $02		                ora tmp1
.826f	85 02		sta $02		                sta tmp1
.8271	80 00		bra $8273	                bra _add_fixnum_to_ast
.8273					_negative_number:
.8273					_add_fixnum_to_ast:
.8273	a5 03		lda $03		                lda tmp1+1
.8275	a4 02		ldy $02		                ldy tmp1
.8277	20 9f 82	jsr $829f	                jsr parser_add_object
.827a					_num_end:
.827a	4c 98 81	jmp $8198	                jmp parser_loop
.827d					parser_not_num:
.827d					paser_bad_token:
.827d	48		pha		                pha                             ; save the evil token
.827e	a9 04		lda #$04	                lda #str_bad_token
.8280	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.8283					parser_common_panic:
.8283	68		pla		                pla
.8284	20 5d 83	jsr $835d	                jsr help_byte_to_ascii          ; print bad token as hex number
.8287	a9 0a		lda #$0a	                lda #AscLF
.8289	20 74 83	jsr $8374	                jsr help_emit_a
.828c	4c 29 80	jmp $8029	                jmp repl
.828f					parser_bad_digit:
.828f	48		pha		                pha
.8290	a9 06		lda #$06	                lda #str_bad_number
.8292	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.8295	80 ec		bra $8283	                bra parser_common_panic
.8297					function_not_available:
.8297	a9 08		lda #$08	                lda #str_cant_yet
.8299	20 94 83	jsr $8394	                jsr help_print_string
.829c	4c 29 80	jmp $8029	                jmp repl
.829f					parser_add_object:
.829f	da		phx		                phx             ; save index to token buffer
.82a0	5a		phy		                phy             ; save MSB of the object
.82a1	48		pha		                pha             ; save LSB of the object
.82a2	a5 12		lda $12		                lda hp
.82a4	85 00		sta $00		                sta tmp0
.82a6	a5 13		lda $13		                lda hp+1
.82a8	85 01		sta $01		                sta tmp0+1
.82aa	a9 00		lda #$00	                lda <#OC_END
.82ac	a0 00		ldy #$00	                ldy #0
.82ae	91 12		sta ($12),y	                sta (hp),y
.82b0	c8		iny		                iny
.82b1	a9 00		lda #$00	                lda >#OC_END
.82b3	91 12		sta ($12),y	                sta (hp),y
.82b5	c8		iny		                iny
.82b6	68		pla		                pla             ; retrieve LSB
.82b7	91 12		sta ($12),y	                sta (hp),y
.82b9	c8		iny		                iny
.82ba	68		pla		                pla             ; retrieve MSB, was in Y
.82bb	91 12		sta ($12),y	                sta (hp),y
.82bd	c8		iny		                iny
.82be	a9 00		lda #$00	                lda #0
.82c0	91 12		sta ($12),y	                sta (hp),y
.82c2	c8		iny		                iny
.82c3	91 12		sta ($12),y	                sta (hp),y
.82c5	c8		iny		                iny
.82c6	98		tya		                tya
.82c7	18		clc		                clc
.82c8	65 12		adc $12		                adc hp
.82ca	85 12		sta $12		                sta hp
.82cc	90 02		bcc $82d0	                bcc +
.82ce	e6 13		inc $13		                inc hp+1
.82d0					+
.82d0	a5 00		lda $00		                lda tmp0        ; original LSB of hp
.82d2	aa		tax		                tax             ; We'll need it again in a second
.82d3	92 1c		sta ($1c)	                sta (astp)
.82d5	a0 01		ldy #$01	                ldy #1
.82d7	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp
.82d9	91 1c		sta ($1c),y	                sta (astp),y
.82db	85 1d		sta $1d		                sta astp+1      ; MSB, was tmp0+1
.82dd	86 1c		stx $1c		                stx astp        ; LSB, was tmp0
.82df	fa		plx		                plx             ; get back index for token buffer
.82e0	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate
.82e1					parser_done:
.82e1	a9 00		lda #$00	                lda <#OC_END
.82e3	a2 00		ldx #$00	                ldx >#OC_END
.82e5	20 9f 82	jsr $829f	                jsr parser_add_object

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.82e8					eval:
.82e8	20 43 84	jsr $8443	                jsr debug_dump_ast
.82eb	20 2f 84	jsr $842f	                jsr debug_dump_hp
.82ee					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.82ee					printer:
.82ee	a5 1a		lda $1a		                lda ast
.82f0	85 02		sta $02		                sta tmp1
.82f2	a5 1b		lda $1b		                lda ast+1
.82f4	85 03		sta $03		                sta tmp1+1
.82f6					printer_loop:
.82f6	a9 0a		lda #$0a	                lda #AscLF
.82f8	20 74 83	jsr $8374	                jsr help_emit_a
.82fb	a0 03		ldy #$03	                ldy #3                  ; MSB of the next node entry down ...
.82fd	b1 02		lda ($02),y	                lda (tmp1),y            ; ...  which contains the tag nibble
.82ff	29 f0		and #$f0	                and #$f0                ; mask all but tag nibble
.8301					_check_for_meta:
.8301	c9 00		cmp #$00	                cmp #OT_META
.8303	d0 07		bne $830c	                bne _not_meta
.8305	12 02		ora ($02)	                ora (tmp1)              ; LSB
.8307	d0 30		bne $8339	                bne printer_error       ; We're in trouble, panic and re-REPL
.8309	4c 5a 83	jmp $835a	                jmp printer_done
.830c					_not_meta:
.830c	c9 10		cmp #$10	                cmp #OT_BOOL
.830e	d0 12		bne $8322	                bne _not_bool
.8310	a0 02		ldy #$02	                ldy #2
.8312	b1 02		lda ($02),y	                lda (tmp1),y            ; LSB
.8314	d0 04		bne $831a	                bne _bool_true          ; not a zero means true
.8316	a9 03		lda #$03	                lda #str_false
.8318	80 02		bra $831c	                bra _bool_printer
.831a					_bool_true:
.831a	a9 02		lda #$02	                lda #str_true
.831c					_bool_printer:
.831c	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.831f	4c 4c 83	jmp $834c	                jmp printer_next
.8322					_not_bool:
.8322	c9 20		cmp #$20	                cmp #OT_FIXNUM
.8324	d0 13		bne $8339	                bne _not_fixnum
.8326	a0 03		ldy #$03	                ldy #3          ; tag nibble and high nibble of number
.8328	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB nibble
.832a	29 0f		and #$0f	                and #$0F        ; Mask tab
.832c	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.832f	a0 02		ldy #$02	                ldy #2
.8331	b1 02		lda ($02),y	                lda (tmp1),y    ; LSB
.8333	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8336	4c 4c 83	jmp $834c	                jmp printer_next
.8339					_not_fixnum:
.8339					printer_error:
.8339	a5 05		lda $05		                lda str_bad_object
.833b	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.833e	a0 01		ldy #$01	                ldy #1
.8340	b1 02		lda ($02),y	                lda (tmp1),y
.8342	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8345	b2 02		lda ($02)	                lda (tmp1)
.8347	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.834a	80 0e		bra $835a	                bra printer_done
.834c					printer_next:
.834c	b2 02		lda ($02)	                lda (tmp1)              ; LSB of next entry
.834e	aa		tax		                tax
.834f	a0 01		ldy #$01	                ldy #1
.8351	b1 02		lda ($02),y	                lda (tmp1),y            ; MSB of next entry
.8353	85 03		sta $03		                sta tmp1+1
.8355	86 02		stx $02		                stx tmp1
.8357	4c f6 82	jmp $82f6	                jmp printer_loop
.835a					printer_done:

;******  Return to file: platforms/../cthulhu.asm

.835a					repl_done:
.835a	4c 29 80	jmp $8029	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.835d					help_byte_to_ascii:
.835d	48		pha		                pha
.835e	4a		lsr a		                lsr             ; convert high nibble first
.835f	4a		lsr a		                lsr
.8360	4a		lsr a		                lsr
.8361	4a		lsr a		                lsr
.8362	20 66 83	jsr $8366	                jsr help_nibble_to_ascii
.8365	68		pla		                pla
.8366					help_nibble_to_ascii:
.8366	29 0f		and #$0f	                and #$0F
.8368	09 30		ora #$30	                ora #'0'
.836a	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.836c	90 02		bcc $8370	                bcc +
.836e	69 06		adc #$06	                adc #$06
.8370	4c 74 83	jmp $8374	+               jmp help_emit_a       ; JSR/RTS
.8373					help_to_lowercase:
.8373	60		rts		                rts
.8374					help_emit_a:
.8374	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.8377					help_key_a:
.8377	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.837a					help_print_string_no_lf:
.837a	0a		asl a		                asl
.837b	a8		tay		                tay
.837c	b9 1f 85	lda $851f,y	                lda string_table,y
.837f	85 00		sta $00		                sta tmp0                ; LSB
.8381	c8		iny		                iny
.8382	b9 1f 85	lda $851f,y	                lda string_table,y
.8385	85 01		sta $01		                sta tmp0+1              ; MSB
.8387					help_print_common:
.8387	a0 00		ldy #$00	                ldy #0
.8389					_loop:
.8389	b1 00		lda ($00),y	                lda (tmp0),y
.838b	f0 06		beq $8393	                beq _done               ; strings are zero-terminated
.838d	20 74 83	jsr $8374	                jsr help_emit_a         ; allows vectoring via output
.8390	c8		iny		                iny
.8391	80 f6		bra $8389	                bra _loop
.8393					_done:
.8393	60		rts		                rts
.8394					help_print_string:
.8394	20 7a 83	jsr $837a	                jsr help_print_string_no_lf
.8397	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.8399	4c 74 83	jmp $8374	                jmp help_emit_a         ; JSR/RTS
.839c					help_is_decdigit:
.839c	c9 30		cmp #$30	                cmp #'0'
.839e	90 07		bcc $83a7	                bcc _below_zero         ; A is < '0'
.83a0	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.83a2	b0 02		bcs $83a6	                bcs _above_nine
.83a4	38		sec		                sec
.83a5	60		rts		                rts
.83a6					_above_nine:
.83a6	18		clc		                clc
.83a7					_below_zero:
.83a7	60		rts		                rts
.83a8					help_is_delimiter:
.83a8	20 ae 83	jsr $83ae	                jsr help_is_whitespace
.83ab	b0 00		bcs $83ad	                bcs _delimiter_done
.83ad					_delimiter_done:
.83ad	60		rts		                rts
.83ae					help_is_whitespace:
.83ae	38		sec		                sec             ; default is whitespace
.83af	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.83b1	f0 11		beq $83c4	                beq _done
.83b3	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.83b5	f0 0d		beq $83c4	                beq _done
.83b7	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.83b9	f0 09		beq $83c4	                beq _done
.83bb	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.83bd	f0 05		beq $83c4	                beq _done
.83bf	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.83c1	f0 01		beq $83c4	                beq _done
.83c3	18		clc		                clc             ; If we end up here, it's not whitespace
.83c4					_done:
.83c4	60		rts		                rts
.83c5					help_hexascii_to_value:
.83c5	20 9c 83	jsr $839c	                jsr help_is_decdigit
.83c8	90 05		bcc $83cf	                bcc _see_if_letter
.83ca	38		sec		                sec
.83cb	e9 30		sbc #$30	                sbc #'0'
.83cd	80 0f		bra $83de	                bra _done
.83cf					_see_if_letter:
.83cf	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.83d1	90 17		bcc $83ea	                bcc _error
.83d3	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.83d5	b0 13		bcs $83ea	                bcs _error
.83d7	c9 61		cmp #$61	                cmp #'a'
.83d9	90 06		bcc $83e1	                bcc _uppercase
.83db	38		sec		                sec
.83dc	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.83de					_done:
.83de	29 0f		and #$0f	                and #$0F        ; paranoid
.83e0	60		rts		                rts
.83e1					_uppercase:
.83e1	c9 47		cmp #$47	                cmp #'G'
.83e3	b0 05		bcs $83ea	                bcs _error
.83e5	38		sec		                sec
.83e6	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.83e8	80 f4		bra $83de	                bra _done
.83ea					_error:
.83ea	a9 80		lda #$80	                lda #$80
.83ec	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.83ed					proc_char_whitespace_p:
.83ed					proc_newline:
.83ed					proc_display:
.83ed					proc_read:
.83ed					proc_read_char:
.83ed					proc_read_line:
.83ed					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.83ed					debug_dump_input:
.83ed	a9 0a		lda #$0a	                lda #AscLF
.83ef	20 74 83	jsr $8374	                jsr help_emit_a
.83f2	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.83f4	20 b6 84	jsr $84b6	                jsr debug_print_string_no_lf
.83f7	a2 00		ldx #$00	                ldx #0
.83f9					-
.83f9	bd 00 02	lda $0200,x	                lda cib,x
.83fc	f0 0b		beq $8409	                beq _done
.83fe	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8401	e8		inx		                inx
.8402	a9 20		lda #$20	                lda #' '
.8404	20 74 83	jsr $8374	                jsr help_emit_a
.8407	80 f0		bra $83f9	                bra -
.8409					_done:
.8409	4c 5d 83	jmp $835d	                jmp help_byte_to_ascii          ; JSR/RTS
.840c					debug_dump_token:
.840c	a9 0a		lda #$0a	                lda #AscLF
.840e	20 74 83	jsr $8374	                jsr help_emit_a
.8411	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.8413	20 b6 84	jsr $84b6	                jsr debug_print_string_no_lf
.8416	a2 00		ldx #$00	                ldx #0
.8418					-
.8418	bd 00 03	lda $0300,x	                lda tkb,x
.841b	c9 00		cmp #$00	                cmp #T_END
.841d	f0 0d		beq $842c	                beq _done
.841f	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8422	e8		inx		                inx
.8423	a9 20		lda #$20	                lda #' '
.8425	20 74 83	jsr $8374	                jsr help_emit_a
.8428	e4 10		cpx $10		                cpx tkbp
.842a	d0 ec		bne $8418	                bne -
.842c					_done:
.842c	4c 5d 83	jmp $835d	                jmp help_byte_to_ascii          ; JSR/RTS
.842f					debug_dump_hp:
.842f	a9 0a		lda #$0a	                lda #AscLF
.8431	20 74 83	jsr $8374	                jsr help_emit_a
.8434	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.8436	20 b6 84	jsr $84b6	                jsr debug_print_string_no_lf
.8439	a5 13		lda $13		                lda hp+1
.843b	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.843e	a5 12		lda $12		                lda hp
.8440	4c 5d 83	jmp $835d	                jmp help_byte_to_ascii          ; JSR/RTS
.8443					debug_dump_ast:
.8443	a9 0a		lda #$0a	                lda #AscLF
.8445	20 74 83	jsr $8374	                jsr help_emit_a
.8448	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.844a	20 b6 84	jsr $84b6	                jsr debug_print_string_no_lf
.844d	a5 1b		lda $1b		                lda ast+1
.844f	85 03		sta $03		                sta tmp1+1
.8451	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8454	a5 1a		lda $1a		                lda ast
.8456	85 02		sta $02		                sta tmp1
.8458	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.845b					_loop:
.845b	a9 20		lda #$20	                lda #' '
.845d	20 74 83	jsr $8374	                jsr help_emit_a
.8460	a0 01		ldy #$01	                ldy #1
.8462	b1 02		lda ($02),y	                lda (tmp1),y
.8464	85 05		sta $05		                sta tmp2+1
.8466	20 5d 83	jsr $835d	                jsr help_byte_to_ascii          ; MSB
.8469	b2 02		lda ($02)	                lda (tmp1)
.846b	85 04		sta $04		                sta tmp2                        ; pointer to next entry, LSB
.846d	20 5d 83	jsr $835d	                jsr help_byte_to_ascii          ; LSB
.8470	a9 3a		lda #$3a	                lda #':'
.8472	20 74 83	jsr $8374	                jsr help_emit_a
.8475	a0 03		ldy #$03	                ldy #3
.8477	b1 02		lda ($02),y	                lda (tmp1),y
.8479	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.847c	a0 02		ldy #$02	                ldy #2
.847e	b1 02		lda ($02),y	                lda (tmp1),y
.8480	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8483	a9 3a		lda #$3a	                lda #':'
.8485	20 74 83	jsr $8374	                jsr help_emit_a
.8488	a0 05		ldy #$05	                ldy #5
.848a	b1 02		lda ($02),y	                lda (tmp1),y
.848c	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.848f	a0 04		ldy #$04	                ldy #4
.8491	b1 02		lda ($02),y	                lda (tmp1),y
.8493	20 5d 83	jsr $835d	                jsr help_byte_to_ascii
.8496	a5 04		lda $04		                lda tmp2
.8498	05 05		ora $05		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.849a	f0 0a		beq $84a6	                beq _done
.849c	a5 04		lda $04		                lda tmp2
.849e	85 02		sta $02		                sta tmp1
.84a0	a5 05		lda $05		                lda tmp2+1
.84a2	85 03		sta $03		                sta tmp1+1
.84a4	80 b5		bra $845b	                bra _loop
.84a6					_done:
.84a6	60		rts		                rts
.84a7					debug_emit_a:
.84a7	48		pha		                pha
.84a8	a9 0a		lda #$0a	                lda #AscLF
.84aa	20 74 83	jsr $8374	                jsr help_emit_a
.84ad	68		pla		                pla
.84ae	20 74 83	jsr $8374	                jsr help_emit_a
.84b1	a9 0a		lda #$0a	                lda #AscLF
.84b3	4c 74 83	jmp $8374	                jmp help_emit_a         ; JSR/RTS
.84b6					debug_print_string_no_lf:
.84b6	0a		asl a		                asl
.84b7	a8		tay		                tay
.84b8	b9 0b 85	lda $850b,y	                lda sd_table,y
.84bb	85 00		sta $00		                sta tmp0                ; LSB
.84bd	c8		iny		                iny
.84be	b9 0b 85	lda $850b,y	                lda sd_table,y
.84c1	85 01		sta $01		                sta tmp0+1              ; MSB
.84c3					debug_print_common:
.84c3	a0 00		ldy #$00	                ldy #0
.84c5					_loop:
.84c5	b1 00		lda ($00),y	                lda (tmp0),y
.84c7	f0 06		beq $84cf	                beq _done               ; strings are zero-terminated
.84c9	20 74 83	jsr $8374	                jsr help_emit_a         ; allows vectoring via output
.84cc	c8		iny		                iny
.84cd	80 f6		bra $84c5	                bra _loop
.84cf					_done:
.84cf	60		rts		                rts
.84d0					debug_print_string:
.84d0	20 b6 84	jsr $84b6	                jsr debug_print_string_no_lf
.84d3	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.84d5	4c 74 83	jmp $8374	                jmp help_emit_a         ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
=3					strd_dump_input = 3
>84d8	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>84e0	66 66 65 72 3a 20 00
>84e7	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>84ed	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>84f5	6e 74 65 72 3a 20 00
>84fc	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>8504	66 66 65 72 3a 20 00
.850b					sd_table:
>850b	d8 84 e7 84 ed 84 fc 84		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input      ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					ciblen:  .word ?     ; current size of input buffer
>000c					cibp:    .word ?     ; index of current char in input buffer
>000e					tkblen:  .word ?     ; current size of the token buffer
>0010					tkbp:    .word ?     ; index of current token in token buffer
>0012					hp:      .word ?     ; pointer to next free heap entry
>0014					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0016					strtbl:  .word ?     ; pointer to first entry in string table in heap
>0018					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001a					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001c					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00    ; used for end of input and other markers
=$10					OT_BOOL         = $10    ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20    ; used for fixed numbers; immediate
=$30					OT_BIGNUM       = $30    ; used for bignum
=$40					OT_CHAR         = $40    ; used for chars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8513					h_newline:
>8513	00 00				        .addr 0000              ; end of header list
>8515	ed 83				        .addr proc_newline
>8517	07				        .byte 7
>8518	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
=6					str_bad_number = 6
=7					str_bad_radix  = 7
=8					str_cant_yet   = 8      ; TODO temp during development
=9					str_end_input  = 9
=10					str_chant      = 10
.851f					string_table:
>851f	35 85 49 85 63 85 66 85		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>8527	69 85 7d 85 98 85 ab 85		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>852f	bf 85 d8 85 f5 85		        .word s_cant_yet, s_end_input, s_chant                       ; 8-11
>8535	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable: "           ; REPL input error
>853d	20 76 61 72 69 61 62 6c 65 3a 20 00
>8549	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8551	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8561	65 00
>8563	23 74 00			s_true:         .null   "#t"
>8566	23 66 00			s_false:        .null   "#f"
>8569	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>8571	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>857d	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>8585	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>8595	3a 20 00
>8598	3b 49 6c 6c 2d 66 6f 72		s_bad_number:   .null   ";Ill-formed number"            ; from lexer
>85a0	6d 65 64 20 6e 75 6d 62 65 72 00
>85ab	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>85b3	61 64 20 72 61 64 69 78 3a 20 24 00
>85bf	41 4c 50 48 41 3a 20 43		s_cant_yet      .null   "ALPHA: Can't do that yet"      ; from parser
>85c7	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>85d7	00
>85d8	45 6e 64 20 6f 66 20 69		s_end_input     .null   "End of input stream reached."  ; from reader
>85e0	6e 70 75 74 20 73 74 72 65 61 6d 20 72 65 61 63
>85f0	68 65 64 2e 00
>85f5	50 68 27 6e 67 6c 75 69		s_chant         .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."   ; from reader
>85fd	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>860d	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>861d	61 67 6c 20 66 68 74 61 67 6e 2e 00
>8629	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>8631	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
