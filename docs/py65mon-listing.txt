
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Thu Apr 23 10:24:11 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=true					STRING_CR_TO_LF = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$10					RAM_SEGMENT_AST  = $10   ; $1000 to $1FFF Abstract Symbol Tree (AST)
=$20					RAM_SEGMENT_STR  = $20   ; $2000 to $2FFF String Table and strings
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 10		lda #$10	                lda #RAM_SEGMENT_AST    ; AST, default nibble $10
.800b	85 15		sta $15		                sta rsn_ast
.800d	a9 20		lda #$20	                lda #RAM_SEGMENT_STR    ; Strings, default nibble $20
.800f	85 1a		sta $1a		                sta rsn_str
.8011	a0 02		ldy #$02	                ldy #$02          ; First free byte is one word down
.8013	84 1d		sty $1d		                sty hp_str
.8015	a5 1a		lda $1a		                lda rsn_str     ; MSB of RAM segment for strings
.8017	85 1e		sta $1e		                sta hp_str+1
.8019	85 1c		sta $1c		                sta strp+1
.801b	64 1b		stz $1b		                stz strp        ; LSB
.801d	a9 00		lda #$00	                lda #00
.801f	a8		tay		                tay
.8020	92 1d		sta ($1d)	                sta (hp_str)
.8022	c8		iny		                iny
.8023	91 1d		sta ($1d),y	                sta (hp_str),y
.8025	a9 21		lda #$21	                lda #<kernel_getc
.8027	85 08		sta $08		                sta input
.8029	a9 f0		lda #$f0	                lda #>kernel_putc
.802b	85 09		sta $09		                sta input+1
.802d					repl:

;******  Processing file: platforms/../reader.asm

.802d					reader:
.802d	64 0c		stz $0c		                stz input_f
.802f	64 0d		stz $0d		                stz ciblen
.8031	64 0e		stz $0e		                stz ciblen+1
.8033	a9 0b		lda #$0b	                lda #str_prompt
.8035	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.8038	a0 00		ldy #$00	                ldy #0
.803a					reader_loop:
.803a	20 7a 85	jsr $857a	                        jsr help_key_a
.803d	c9 0a		cmp #$0a	                        cmp #AscLF
.803f	f0 3b		beq $807c	                        beq reader_got_eol
.8041	c9 0d		cmp #$0d	                        cmp #AscCR
.8043	f0 37		beq $807c	                        beq reader_got_eol
.8045					_not_an_eol:
.8045					_not_a_parens:
.8045	c9 3b		cmp #$3b	                        cmp #$3B                ; semicolon
.8047	d0 08		bne $8051	                        bne _not_a_comment
.8049	aa		tax		                        tax                     ; Save semicolon char
.804a	a9 80		lda #$80	                        lda #$80                ; Get ready to set bit 7
.804c	04 0c		tsb $0c		                        tsb input_f             ; 65c02 only
.804e	8a		txa		                        txa
.804f	80 1d		bra $806e	                        bra reader_comment_continue     ; saves char
.8051					_not_a_comment:
.8051	c9 22		cmp #$22	                        cmp #$22                ; quotation mark '"'
.8053	d0 0a		bne $805f	                        bne _not_a_string
.8055	aa		tax		                        tax                     ; Save quotation mark char
.8056	a5 0c		lda $0c		                        lda input_f
.8058	49 40		eor #$40	                        eor #%01000000          ; flip bit 6
.805a	85 0c		sta $0c		                        sta input_f
.805c	8a		txa		                        txa
.805d	80 0f		bra $806e	                        bra reader_string_continue      ; saves char
.805f					_not_a_string:
.805f	c9 08		cmp #$08	                        cmp #AscBS
.8061	f0 2e		beq $8091	                        beq reader_backspace
.8063	c9 7f		cmp #$7f	                        cmp #AscDEL             ; Is the same as CTRL-h
.8065	f0 2a		beq $8091	                        beq reader_backspace
.8067	c9 04		cmp #$04	                        cmp #$04
.8069	d0 03		bne $806e	                        bne reader_normal_char
.806b	4c 4e 85	jmp $854e	                        jmp repl_quit
.806e					reader_normal_char:
.806e					reader_comment_continue:
.806e					reader_string_continue:
.806e	20 77 85	jsr $8577	                        jsr help_emit_a
.8071	99 00 02	sta $0200,y	                        sta cib,y
.8074	c8		iny		                        iny
.8075	cc 00 01	cpy $0100	                        cpy cib_size
.8078	90 34		bcc $80ae	                        bcc reader_buffer_full
.807a	80 be		bra $803a	                        bra reader_loop
.807c					reader_got_eol:
.807c	a5 0c		lda $0c		                        lda input_f             ; bit 7 marks comment
.807e	30 09		bmi $8089	                        bmi _eol_in_comment
.8080	29 7f		and #$7f	                        and #%01111111          ; input_f already in A
.8082	d0 09		bne $808d	                        bne _eol_in_parens_or_string
.8084	20 77 85	jsr $8577	                        jsr help_emit_a
.8087	80 25		bra $80ae	                        bra reader_input_done
.8089					_eol_in_comment:
.8089	a9 80		lda #$80	                        lda #$80
.808b	14 0c		trb $0c		                        trb input_f             ; bit 7 marks comment, now clear
.808d					_eol_in_parens_or_string:
.808d	a9 0a		lda #$0a	                        lda #AscLF
.808f	80 dd		bra $806e	                        bra reader_comment_continue       ; stores LF
.8091					reader_backspace:
.8091	c0 00		cpy #$00	                        cpy #0          ; buffer empty?
.8093	d0 06		bne $809b	                        bne _skip_bell
.8095	a9 07		lda #$07	                        lda #AscBELL
.8097	20 77 85	jsr $8577	                        jsr help_emit_a
.809a	c8		iny		                        iny
.809b					_skip_bell:
.809b	88		dey		                        dey
.809c	a9 08		lda #$08	                        lda #AscBS      ; move back one
.809e	20 77 85	jsr $8577	                        jsr help_emit_a
.80a1	a9 20		lda #$20	                        lda #AscSP      ; print a space (rubout)
.80a3	20 77 85	jsr $8577	                        jsr help_emit_a
.80a6	a9 08		lda #$08	                        lda #AscBS      ; move back over space
.80a8	20 77 85	jsr $8577	                        jsr help_emit_a
.80ab	4c 3a 80	jmp $803a	                        jmp reader_loop
.80ae					reader_input_done:
.80ae					reader_buffer_full:
.80ae	84 0d		sty $0d		                        sty ciblen      ; Y contains number of chars accepted already
.80b0	a9 00		lda #$00	                        lda #0
.80b2	85 0e		sta $0e		                        sta ciblen+1    ; we only accept 254 chars for now
.80b4	99 00 02	sta $0200,y	                        sta cib,y

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../lexer.asm

.80b7					lexer:
.80b7	20 77 86	jsr $8677	                jsr debug_dump_input
.80ba	a0 00		ldy #$00	                ldy #0
.80bc	64 0f		stz $0f		                stz cibp
.80be	64 10		stz $10		                stz cibp+1      ; MSB currently unused
.80c0	64 13		stz $13		                stz tkbp
.80c2	64 14		stz $14		                stz tkbp+1      ; MSB currently unused
.80c4	98		tya		                tya
.80c5	19 00 02	ora $0200,y	                ora cib,y
.80c8	d0 03		bne $80cd	                bne lexer_loop
.80ca	4c 4b 85	jmp $854b	                jmp repl_empty_line
.80cd					lexer_loop:
.80cd	b9 00 02	lda $0200,y	                lda cib,y
.80d0	c9 3b		cmp #$3b	                cmp #$3B        ; semicolon
.80d2	d0 0f		bne $80e3	                bne _no_comment
.80d4					_comment_loop:
.80d4	c8		iny		                iny
.80d5	b9 00 02	lda $0200,y	                lda cib,y
.80d8	c9 0a		cmp #$0a	                cmp #AscLF
.80da	f0 04		beq $80e0	                beq _comment_done
.80dc	c9 0d		cmp #$0d	                cmp #AscCR
.80de	d0 f4		bne $80d4	                bne _comment_loop
.80e0					_comment_done:
.80e0	4c 27 82	jmp $8227	                jmp lexer_next
.80e3					_no_comment:
.80e3	20 ed 85	jsr $85ed	                jsr help_is_whitespace
.80e6	90 03		bcc $80eb	                bcc _not_whitespace
.80e8	4c 27 82	jmp $8227	                jmp lexer_next
.80eb					_not_whitespace:
.80eb					_test_parens:
.80eb	c9 28		cmp #$28	                cmp #'('        ; check for open parens
.80ed	d0 08		bne $80f7	                bne _not_parens_start
.80ef	a9 aa		lda #$aa	                lda #T_PAREN_START
.80f1	20 37 82	jsr $8237	                jsr lexer_add_token
.80f4	4c 27 82	jmp $8227	                jmp lexer_next
.80f7					_not_parens_start:
.80f7	c9 29		cmp #$29	                cmp #')'        ; check for close parens
.80f9	d0 08		bne $8103	                bne _not_parens_end
.80fb	a9 ff		lda #$ff	                lda #T_PAREN_END
.80fd	20 37 82	jsr $8237	                jsr lexer_add_token
.8100	4c 27 82	jmp $8227	                jmp lexer_next
.8103					_not_parens_end:
.8103	c9 27		cmp #$27	                cmp #$27                ; "'" tick for (quote)
.8105	d0 08		bne $810f	                bne _not_tick
.8107	a9 01		lda #$01	                lda #T_TICK
.8109	20 37 82	jsr $8237	                jsr lexer_add_token
.810c	4c 27 82	jmp $8227	                jmp lexer_next
.810f					_not_tick:
.810f	d0 03		bne $8114	                bne _not_done
.8111	4c 2f 82	jmp $822f	                jmp lexer_end_of_input          ; not the same as lexer_done
.8114					_not_done:
.8114	c9 23		cmp #$23	                cmp #'#'
.8116	f0 03		beq $811b	                beq _got_sharp
.8118	4c b8 81	jmp $81b8	                jmp lexer_not_sharp             ; too far for branch
.811b					_got_sharp:
.811b	c8		iny		                iny
.811c	b9 00 02	lda $0200,y	                lda cib,y
.811f	c9 74		cmp #$74	                cmp #'t'        ; We're optimists so we check for true first
.8121	d0 08		bne $812b	                bne _not_true
.8123	a9 02		lda #$02	                lda #T_TRUE
.8125	20 37 82	jsr $8237	                jsr lexer_add_token
.8128	4c 27 82	jmp $8227	                jmp lexer_next
.812b					_not_true:
.812b	c9 66		cmp #$66	                cmp #'f'
.812d	d0 08		bne $8137	                bne _not_false
.812f	a9 03		lda #$03	                lda #T_FALSE
.8131	20 37 82	jsr $8237	                jsr lexer_add_token
.8134	4c 27 82	jmp $8227	                jmp lexer_next
.8137					_not_false:
.8137	c9 5c		cmp #$5c	                cmp #'\'
.8139	d0 00		bne $813b	                bne _no_backslash
.813b					_not_single_char:
.813b					_not_named_char:
.813b					_no_backslash:
.813b					_not_vector:
.813b	c9 78		cmp #$78	                cmp #'x'        ; #x is hexadecimal
.813d	d0 04		bne $8143	                bne _not_hexnum
.813f	a9 10		lda #$10	                lda #$10        ; Base 16
.8141	80 13		bra $8156	                bra lexer_got_number
.8143					_not_hexnum:
.8143	c9 62		cmp #$62	                cmp #'b'        ; #b is binary
.8145	d0 04		bne $814b	                bne _not_binnum
.8147	a9 02		lda #$02	                lda #$02        ; Base 2
.8149	80 0b		bra $8156	                bra lexer_got_number
.814b					_not_binnum:
.814b	c9 64		cmp #$64	                cmp #'d'        ; #d is explicit decimal
.814d	d0 04		bne $8153	                bne _illegal_radix
.814f	a9 0a		lda #$0a	                lda #$0A        ; Base 10
.8151	80 03		bra $8156	                bra lexer_got_number
.8153					_illegal_radix:
.8153	4c b0 81	jmp $81b0	                jmp lexer_illegal_radix
.8156					lexer_got_number:
.8156	48		pha		                pha                     ; Save the radix for the moment
.8157	a9 12		lda #$12	                lda #T_NUM_START
.8159	20 37 82	jsr $8237	                jsr lexer_add_token
.815c	68		pla		                pla
.815d	20 37 82	jsr $8237	                jsr lexer_add_token
.8160	a6 13		ldx $13		                ldx tkbp        ; get index of where length will be
.8162	86 00		stx $00		                stx tmp0
.8164	a9 00		lda #$00	                lda #0          ; dummy length value
.8166	20 37 82	jsr $8237	                jsr lexer_add_token
.8169	c8		iny		                iny             ; Y is still the input buffer index
.816a	b9 00 02	lda $0200,y	                lda cib,y
.816d	a2 00		ldx #$00	                ldx #0          ; X counts length of string
.816f	c9 2d		cmp #$2d	                cmp #'-'
.8171	d0 09		bne $817c	                bne _check_for_plus
.8173	a9 21		lda #$21	                lda #T_MINUS
.8175	20 37 82	jsr $8237	                jsr lexer_add_token
.8178	c8		iny		                iny             ; skip minus character
.8179	e8		inx		                inx             ; string now has length of 1
.817a	80 0b		bra $8187	                bra _sign_done
.817c					_check_for_plus:
.817c	c9 2b		cmp #$2b	                cmp #'+'
.817e	d0 01		bne $8181	                bne _default_plus
.8180	c8		iny		                iny
.8181					_default_plus:
.8181	a9 20		lda #$20	                lda #T_PLUS
.8183	20 37 82	jsr $8237	                jsr lexer_add_token
.8186	e8		inx		                inx             ; string now has length of 1
.8187					_sign_done:
.8187	b9 00 02	lda $0200,y	                lda cib,y
.818a	f0 24		beq $81b0	                beq lexer_terminator_too_early  ; 00 terminates input
.818c	20 ab 85	jsr $85ab	                jsr help_is_delimiter
.818f	b0 1f		bcs $81b0	                bcs lexer_delimiter_too_early
.8191					_number_loop:
.8191	20 37 82	jsr $8237	                jsr lexer_add_token
.8194	e8		inx		                inx             ; String one character longer
.8195	c8		iny		                iny             ; Next character
.8196	b9 00 02	lda $0200,y	                lda cib,y
.8199	f0 07		beq $81a2	                beq _legal_terminator
.819b	20 ab 85	jsr $85ab	                jsr help_is_delimiter
.819e	b0 02		bcs $81a2	                bcs _number_done
.81a0	80 ef		bra $8191	                bra _number_loop
.81a2					_legal_terminator:
.81a2					_number_done:
.81a2	a9 82		lda #$82	                lda #T_NUM_END
.81a4	20 37 82	jsr $8237	                jsr lexer_add_token
.81a7	8a		txa		                txa             ; number of chars was in X
.81a8	a6 00		ldx $00		                ldx tmp0        ; index of length byte in token stream
.81aa	9d 00 03	sta $0300,x	                sta tkb,x
.81ad	4c 28 82	jmp $8228	                jmp lexer_next_same_char
.81b0					lexer_illegal_radix:
.81b0					lexer_terminator_too_early:
.81b0					lexer_delimiter_too_early:
.81b0	a9 06		lda #$06	                lda #str_bad_number
.81b2	20 97 85	jsr $8597	                jsr help_print_string
.81b5	4c 2d 80	jmp $802d	                jmp repl
.81b8					lexer_not_octnum
.81b8					lexer_not_sharp:
.81b8					_not_decnum:
.81b8	c9 22		cmp #$22	                cmp #$22        ; '"' ASCII value
.81ba	d0 1f		bne $81db	                bne _not_string
.81bc	a9 13		lda #$13	                lda #T_STR_START
.81be	20 37 82	jsr $8237	                jsr lexer_add_token
.81c1					_string_loop:
.81c1	c8		iny		                iny
.81c2	b9 00 02	lda $0200,y	                lda cib,y
.81c5	c9 22		cmp #$22	                cmp #$22        ; '"' closes string
.81c7	f0 0b		beq $81d4	                beq _string_done
.81c9	c9 0d		cmp #$0d	                cmp #AscCR
.81cb	d0 02		bne $81cf	                bne +
.81cd	a9 0a		lda #$0a	                lda #AscLF
.81cf					+
.81cf	20 37 82	jsr $8237	                jsr lexer_add_token
.81d2	80 ed		bra $81c1	                bra _string_loop
.81d4					_string_done:
.81d4	a9 83		lda #$83	                lda #T_STR_END
.81d6	20 37 82	jsr $8237	                jsr lexer_add_token
.81d9	80 4c		bra $8227	                bra lexer_next
.81db					_not_string:
.81db	c9 2e		cmp #$2e	                cmp #'.'
.81dd	d0 07		bne $81e6	                bne _not_dot
.81df	a9 05		lda #$05	                lda #T_DOT
.81e1	20 37 82	jsr $8237	                jsr lexer_add_token
.81e4	80 41		bra $8227	                bra lexer_next
.81e6					_not_dot:
.81e6	20 d6 85	jsr $85d6	                jsr help_is_letter
.81e9	b0 05		bcs $81f0	                bcs _id_found
.81eb	20 c3 85	jsr $85c3	                jsr help_is_extended_alpha
.81ee	90 27		bcc $8217	                bcc _not_an_id
.81f0					_id_found:
.81f0	48		pha		                pha                     ; Save copy of the first character
.81f1	a9 14		lda #$14	                lda #T_ID_START
.81f3	20 37 82	jsr $8237	                jsr lexer_add_token
.81f6	68		pla		                pla
.81f7					_id_loop:
.81f7	20 37 82	jsr $8237	                jsr lexer_add_token
.81fa	c8		iny		                iny                     ; next character
.81fb	c4 0d		cpy $0d		                cpy ciblen
.81fd	f0 11		beq $8210	                beq _id_end_of_line     ; Line can just be over
.81ff	b9 00 02	lda $0200,y	                lda cib,y
.8202	f0 0c		beq $8210	                beq _id_end_of_line     ; EOL can terminate input
.8204	20 ab 85	jsr $85ab	                jsr help_is_delimiter
.8207	90 ee		bcc $81f7	                bcc _id_loop
.8209					_id_done:
.8209	a9 84		lda #$84	                lda #T_ID_END
.820b	20 37 82	jsr $8237	                jsr lexer_add_token
.820e	80 18		bra $8228	                bra lexer_next_same_char        ; deal with delimiter
.8210					_id_end_of_line:
.8210	a9 84		lda #$84	                lda #T_ID_END
.8212	20 37 82	jsr $8237	                jsr lexer_add_token
.8215	80 18		bra $822f	                bra lexer_end_of_input
.8217					_not_an_id:
.8217					lexer_error:
.8217	48		pha		                pha
.8218	a9 00		lda #$00	                lda #str_unbound
.821a	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.821d	68		pla		                pla
.821e	20 5e 85	jsr $855e	                jsr help_byte_to_ascii
.8221	20 75 85	jsr $8575	                jsr help_emit_lf
.8224	4c 2d 80	jmp $802d	                jmp repl
.8227					lexer_next:
.8227	c8		iny		                iny
.8228					lexer_next_same_char:
.8228	c4 0d		cpy $0d		                cpy ciblen
.822a	f0 03		beq $822f	                beq lexer_end_of_input
.822c	4c cd 80	jmp $80cd	                jmp lexer_loop
.822f					lexer_end_of_input:
.822f	a9 00		lda #$00	                lda #T_END
.8231	20 37 82	jsr $8237	                jsr lexer_add_token
.8234	4c 42 82	jmp $8242	                jmp lexer_done
.8237					lexer_add_token:
.8237	5a		phy		                phy             ; Could also store in cibp
.8238	a4 13		ldy $13		                ldy tkbp
.823a	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.823d	c8		iny		                iny
.823e	84 13		sty $13		                sty tkbp
.8240	7a		ply		                ply
.8241	60		rts		                rts
=$00					T_END           = $00   ; Terminates token stream
=$01					T_TICK          = $01   ; "'" - tick character
=$02					T_TRUE          = $02   ; '#t'
=$03					T_FALSE         = $03   ; '#f'
=$04					T_SHARP         = $04   ; '#' - note '#f', '#t' and others are precprocessed
=$05					T_DOT           = $05   ; "." - dot/period, used for pairs
=$12					T_NUM_START     = $12   ; Marks beginning of a number sequence
=$13					T_STR_START     = $13   ; Marks beginning of a string
=$14					T_ID_START      = $14   ; Marks beginning of an identifier
=$20					T_PLUS          = $20   ; '+' Also used in number token sequence
=$21					T_MINUS         = $21   ; '-' Also used in number token sequence
=$22					T_STAR          = $22   ; '*' Also used for math
=$23					T_SLASH         = $23   ; '\' Also used for math
=$82					T_NUM_END       = $82   ; Marks end of a number sequence, see T_NUM_START
=$83					T_STR_END       = $83   ; Marks end of a string, see T_STR_START
=$84					T_ID_END        = $84   ; Makrs end of an identifier, see T_ID_START
=$aa					T_PAREN_START   = $AA   ; '(' - parens open
=$ff					T_PAREN_END     = $FF   ; ')' - parens closed
.8242					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.8242					parser:
.8242	20 94 86	jsr $8694	                jsr debug_dump_token
.8245	a9 02		lda #$02	                lda #$02        ; Skip dummy cdr at beginning of RAM
.8247	85 18		sta $18		                sta hp_ast
.8249	a5 15		lda $15		                lda rsn_ast     ; MSB of RAM segment for AST
.824b	85 19		sta $19		                sta hp_ast+1
.824d	85 17		sta $17		                sta astp+1      ; still have MSB of RAM segment
.824f	64 16		stz $16		                stz astp
.8251	64 13		stz $13		                stz tkbp
.8253	64 14		stz $14		                stz tkbp+1      ; fake, currently only using LSB
.8255	a2 ff		ldx #$ff	                ldx #$FF        ; index -1 at beginning
.8257					parser_loop:
.8257	e8		inx		                inx
.8258	bd 00 03	lda $0300,x	                lda tkb,x
.825b	c9 01		cmp #$01	                cmp #T_TICK
.825d	d0 0a		bne $8269	                bne _not_tick
.825f	a9 02		lda #$02	                lda #<OC_PROC_QUOTE
.8261	a0 f0		ldy #$f0	                ldy #>OC_PROC_QUOTE
.8263	20 3c 84	jsr $843c	                jsr parser_add_object_to_ast
.8266	4c 57 82	jmp $8257	                jmp parser_loop
.8269					_not_tick:
.8269	c9 aa		cmp #$aa	                cmp #T_PAREN_START
.826b	d0 00		bne $826d	                bne _not_paren_start
.826d					_not_paren_start:
.826d	c9 ff		cmp #$ff	                cmp #T_PAREN_END
.826f	d0 00		bne $8271	                bne _not_paren_end
.8271					_not_paren_end:
.8271	c9 00		cmp #$00	                cmp #T_END
.8273	d0 03		bne $8278	                bne _not_end_token
.8275	4c 7b 84	jmp $847b	                jmp parser_done
.8278					_not_end_token:
.8278	c9 02		cmp #$02	                cmp #T_TRUE
.827a	d0 0a		bne $8286	                bne _not_true_token
.827c	a9 ff		lda #$ff	                lda <#OC_TRUE
.827e	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.8280	20 3c 84	jsr $843c	                jsr parser_add_object_to_ast
.8283	4c 57 82	jmp $8257	                jmp parser_loop
.8286					_not_true_token:
.8286	c9 03		cmp #$03	                cmp #T_FALSE
.8288	d0 0a		bne $8294	                bne _not_false_token
.828a	a9 00		lda #$00	                lda <#OC_FALSE
.828c	a0 10		ldy #$10	                ldy >#OC_FALSE
.828e	20 3c 84	jsr $843c	                jsr parser_add_object_to_ast
.8291	4c 57 82	jmp $8257	                jmp parser_loop
.8294					_not_false_token:
.8294	c9 12		cmp #$12	                cmp #T_NUM_START
.8296	f0 03		beq $829b	                beq +
.8298	4c 42 83	jmp $8342	                jmp parser_not_num      ; too far for BNE
.829b					+
.829b	64 02		stz $02		                stz tmp1
.829d	64 03		stz $03		                stz tmp1+1
.829f	e8		inx		                inx             ; skip over T_NUM_START token
.82a0	bd 00 03	lda $0300,x	                lda tkb,x
.82a3	85 00		sta $00		                sta tmp0        ; radix
.82a5	e8		inx		                inx
.82a6	bd 00 03	lda $0300,x	                lda tkb,x
.82a9	a8		tay		                tay             ; We need the length of the string later ...
.82aa	88		dey		                dey             ; ... but we don't need to include the sign
.82ab	e8		inx		                inx             ; Move to token for sign, T_PLUS or T_MINUS
.82ac	bd 00 03	lda $0300,x	                lda tkb,x
.82af	85 01		sta $01		                sta tmp0+1      ; Just store sign for now
.82b1	e8		inx		                inx             ; Move to first digit
.82b2	a5 00		lda $00		                lda tmp0        ; radix
.82b4	c9 0a		cmp #$0a	                cmp #$0a
.82b6	d0 03		bne $82bb	                bne _not_dec
.82b8	4c 2a 83	jmp $832a	                jmp parser_common_fixnum
.82bb					_not_dec:
.82bb	c9 10		cmp #$10	                cmp #$10
.82bd	d0 36		bne $82f5	                bne _not_hex
.82bf	98		tya		                tya
.82c0	c9 04		cmp #$04	                cmp #$04
.82c2	90 03		bcc $82c7	                bcc _dec_fixnum
.82c4	4c 34 84	jmp $8434	                jmp function_not_available
.82c7					_dec_fixnum:
.82c7					_hex_fixnum_loop:
.82c7	bd 00 03	lda $0300,x	                lda tkb,x
.82ca	c9 82		cmp #$82	                cmp #T_NUM_END
.82cc	f0 24		beq $82f2	                beq _done_hex
.82ce	20 04 86	jsr $8604	                jsr help_hexascii_to_value
.82d1	10 03		bpl $82d6	                bpl _legal_hex_digit
.82d3	4c 2c 84	jmp $842c	                jmp parser_bad_digit
.82d6					_legal_hex_digit:
.82d6	0a		asl a		                asl
.82d7	0a		asl a		                asl
.82d8	0a		asl a		                asl
.82d9	0a		asl a		                asl
.82da	2a		rol a		                rol             ; bit 7 of A now in carry flag
.82db	26 03		rol $03		                rol tmp1+1      ; bit 7 of tmp1+1 now in carry flag
.82dd	26 02		rol $02		                rol tmp1        ; now is bit 0 of tmp1
.82df	2a		rol a		                rol
.82e0	26 03		rol $03		                rol tmp1+1
.82e2	26 02		rol $02		                rol tmp1
.82e4	2a		rol a		                rol
.82e5	26 03		rol $03		                rol tmp1+1
.82e7	26 02		rol $02		                rol tmp1
.82e9	2a		rol a		                rol
.82ea	26 03		rol $03		                rol tmp1+1
.82ec	26 02		rol $02		                rol tmp1
.82ee	e8		inx		                inx
.82ef	88		dey		                dey
.82f0	d0 d5		bne $82c7	                bne _hex_fixnum_loop
.82f2					_done_hex:
.82f2	4c 2a 83	jmp $832a	                jmp parser_common_fixnum
.82f5					_not_hex:
.82f5	c9 02		cmp #$02	                cmp #$02
.82f7	d0 28		bne $8321	                bne _not_binary
.82f9	98		tya		                tya
.82fa	c9 0d		cmp #$0d	                cmp #$0D                ; "smaller than 13"
.82fc	90 03		bcc $8301	                bcc _bin_fixnum
.82fe	4c 34 84	jmp $8434	                jmp function_not_available
.8301					_bin_fixnum:
.8301					_bin_fixnum_loop:
.8301	bd 00 03	lda $0300,x	                lda tkb,x
.8304	c9 30		cmp #$30	                cmp #'0'
.8306	f0 0b		beq $8313	                beq _legal_bit_char
.8308	c9 31		cmp #$31	                cmp #'1'
.830a	f0 07		beq $8313	                beq _legal_bit_char
.830c	c9 82		cmp #$82	                cmp #T_NUM_END
.830e	f0 0e		beq $831e	                beq _done_bin
.8310	4c 2c 84	jmp $842c	                jmp parser_bad_digit
.8313					_legal_bit_char:
.8313	29 01		and #$01	                and #$01                ; gives us $00 or $01
.8315	6a		ror a		                ror                     ; push the bit into carry flag
.8316	26 03		rol $03		                rol tmp1+1              ; rotate the carry flag into LSB ...
.8318	26 02		rol $02		                rol tmp1                ; ... and highest bit of tmp1+1 to tmp1
.831a	e8		inx		                inx                     ; next character
.831b	88		dey		                dey                     ; decrease counter
.831c	d0 e3		bne $8301	                bne _bin_fixnum_loop
.831e					_done_bin:
.831e	4c 2a 83	jmp $832a	                jmp parser_common_fixnum
.8321					_not_binary:
.8321					_illegal_radix:
.8321	48		pha		                pha                             ; save the evil radix
.8322	a9 07		lda #$07	                lda #str_bad_radix
.8324	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.8327	4c 22 84	jmp $8422	                jmp parser_common_panic
.832a					parser_common_fixnum:
.832a	a5 01		lda $01		                lda tmp0+1
.832c	c9 21		cmp #$21	                cmp #T_MINUS
.832e	f0 08		beq $8338	                beq _negative_number
.8330	a9 20		lda #$20	                lda #OT_FIXNUM
.8332	05 02		ora $02		                ora tmp1        ; construct tag byte with MSB of number
.8334	85 02		sta $02		                sta tmp1
.8336	80 00		bra $8338	                bra _add_fixnum_to_ast
.8338					_negative_number:
.8338					_add_fixnum_to_ast:
.8338	a5 03		lda $03		                lda tmp1+1
.833a	a4 02		ldy $02		                ldy tmp1
.833c	20 3c 84	jsr $843c	                jsr parser_add_object_to_ast
.833f					_num_done:
.833f	4c 57 82	jmp $8257	                jmp parser_loop
.8342					parser_not_num:
.8342	c9 13		cmp #$13	                cmp #T_STR_START
.8344	d0 47		bne $838d	                bne parser_not_string
.8346	a5 1e		lda $1e		                lda hp_str+1    ; MSB of next free byte in string RAM segment
.8348	29 0f		and #$0f	                and #$0F        ; mask high nibble (paranoid)
.834a	09 50		ora #$50	                ora #OT_STRING  ; object tag nibble for strings
.834c	a8		tay		                tay             ; MSB goes in Y
.834d	a5 1d		lda $1d		                lda hp_str      ; LSB goes in A
.834f	20 3c 84	jsr $843c	                jsr parser_add_object_to_ast   ; Updates AST heap pointer
.8352	e8		inx		                inx             ; move to first character of string
.8353	a0 00		ldy #$00	                ldy #0
.8355					_string_loop:
.8355	bd 00 03	lda $0300,x	                lda tkb,x
.8358	c9 83		cmp #$83	                cmp #T_STR_END
.835a	f0 06		beq $8362	                beq _string_end
.835c	91 1d		sta ($1d),y	                sta (hp_str),y
.835e	c8		iny		                iny
.835f	e8		inx		                inx
.8360	80 f3		bra $8355	                bra _string_loop
.8362					_string_end:
.8362	a9 00		lda #$00	                lda #0
.8364	c8		iny		                iny
.8365	91 1d		sta ($1d),y	                sta (hp_str),y
.8367	98		tya		                tya
.8368	18		clc		                clc
.8369	65 1d		adc $1d		                adc hp_str
.836b	85 1d		sta $1d		                sta hp_str
.836d	90 02		bcc $8371	                bcc +
.836f	e6 1e		inc $1e		                inc hp_str+1
.8371					+
.8371	a9 00		lda #$00	                lda #0
.8373	92 1d		sta ($1d)	                sta (hp_str)
.8375	a0 01		ldy #$01	                ldy #1
.8377	91 1d		sta ($1d),y	                sta (hp_str),y
.8379	a5 1d		lda $1d		                lda hp_str
.837b	85 1b		sta $1b		                sta strp
.837d	a5 1e		lda $1e		                lda hp_str+1
.837f	85 1c		sta $1c		                sta strp+1
.8381	98		tya		                tya             ; #1
.8382	1a		inc a		                inc a
.8383	18		clc		                clc
.8384	65 1d		adc $1d		                adc hp_str
.8386	90 02		bcc $838a	                bcc +
.8388	e6 1e		inc $1e		                inc hp_str+1
.838a					+
.838a	4c 57 82	jmp $8257	                jmp parser_loop
.838d					parser_not_string:
.838d	c9 14		cmp #$14	                cmp #T_ID_START
.838f	f0 03		beq $8394	                beq parser_have_id
.8391	4c 19 84	jmp $8419	                jmp parser_not_id               ; too far for BNE
.8394					parser_have_id:
.8394					_find_proc:
.8394	e8		inx		                inx             ; point to first character
.8395	a9 a2		lda #$a2	                lda #<proc_headers
.8397	85 00		sta $00		                sta tmp0
.8399	a9 87		lda #$87	                lda #>proc_headers
.839b	85 01		sta $01		                sta tmp0+1
.839d	8a		txa		                txa
.839e	18		clc		                clc
.839f	69 00		adc #$00	                adc #<tkb
.83a1	85 02		sta $02		                sta tmp1                ; address of mystery string in tmp1
.83a3	a9 03		lda #$03	                lda #>tkb
.83a5	90 01		bcc $83a8	                bcc +
.83a7	1a		inc a		                inc a
.83a8					+
.83a8	85 03		sta $03		                sta tmp1+1
.83aa					_find_proc_loop:
.83aa	a9 04		lda #$04	                lda #4
.83ac	18		clc		                clc
.83ad	65 00		adc $00		                adc tmp0
.83af	85 04		sta $04		                sta tmp2                ; LSB address of the known string in tmp2
.83b1	a5 01		lda $01		                lda tmp0+1              ; MSB
.83b3	85 05		sta $05		                sta tmp2+1
.83b5	90 02		bcc $83b9	                bcc +
.83b7	e6 05		inc $05		                inc tmp2+1
.83b9					+
.83b9	a0 00		ldy #$00	                ldy #0
.83bb					_compare_loop:
.83bb	b1 02		lda ($02),y	                lda (tmp1),y            ; char of the mystery string
.83bd	c9 84		cmp #$84	                cmp #T_ID_END
.83bf	f0 0b		beq $83cc	                beq _mystery_string_done
.83c1	d1 04		cmp ($04),y	                cmp (tmp2),y            ; known character string
.83c3	d0 0b		bne $83d0	                bne _next_entry         ; chars don't match, next entry
.83c5	b1 04		lda ($04),y	                lda (tmp2),y
.83c7	f0 07		beq $83d0	                beq _next_entry
.83c9	c8		iny		                iny
.83ca	80 ef		bra $83bb	                bra _compare_loop
.83cc					_mystery_string_done:
.83cc	b1 04		lda ($04),y	                lda (tmp2),y
.83ce	f0 28		beq $83f8	                beq _found_id           ; strings are both over, it's a match!
.83d0					_next_entry:
.83d0	b2 00		lda ($00)	                lda (tmp0)
.83d2	48		pha		                pha
.83d3	a0 01		ldy #$01	                ldy #1
.83d5	b1 00		lda ($00),y	                lda (tmp0),y
.83d7	85 01		sta $01		                sta tmp0+1
.83d9	68		pla		                pla
.83da	85 00		sta $00		                sta tmp0
.83dc	05 01		ora $01		                ora tmp0+1
.83de	d0 ca		bne $83aa	                bne _find_proc_loop   ; concentrate and try again, Mrs. Dunham
.83e0					_bad_word:
.83e0	a9 00		lda #$00	                lda #str_unbound                ; ";Unbound variable: "
.83e2	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.83e5					_bad_word_loop:
.83e5	bd 00 03	lda $0300,x	                lda tkb,x
.83e8	c9 84		cmp #$84	                cmp #T_ID_END
.83ea	f0 06		beq $83f2	                beq _bad_word_done
.83ec	20 77 85	jsr $8577	                jsr help_emit_a
.83ef	e8		inx		                inx
.83f0	80 f3		bra $83e5	                bra _bad_word_loop
.83f2					_bad_word_done:
.83f2	20 75 85	jsr $8575	                jsr help_emit_lf
.83f5	4c 2d 80	jmp $802d	                jmp repl
.83f8					_found_id:
.83f8	98		tya		                tya
.83f9	86 02		stx $02		                stx tmp1
.83fb	18		clc		                clc
.83fc	65 02		adc $02		                adc tmp1
.83fe	aa		tax		                tax
.83ff	a9 02		lda #$02	                lda #2
.8401	18		clc		                clc
.8402	65 00		adc $00		                adc tmp0
.8404	85 00		sta $00		                sta tmp0        ; LSB of process object
.8406	90 02		bcc $840a	                bcc +
.8408	e6 01		inc $01		                inc tmp0+1      ; We are pointing to next address
.840a					+
.840a	a5 01		lda $01		                lda tmp0+1
.840c	29 0f		and #$0f	                and #$0F        ; Mask useless high nibble of MSB
.840e	09 f0		ora #$f0	                ora #OT_PROC
.8410	a8		tay		                tay             ; TODO MSB currently still in Y
.8411	a5 00		lda $00		                lda tmp0        ; TODO LSB currently still in A
.8413	20 3c 84	jsr $843c	                jsr parser_add_object_to_ast
.8416	4c 57 82	jmp $8257	                jmp parser_loop
.8419					parser_not_id:
.8419					paser_bad_token:
.8419	48		pha		                pha                             ; save the evil token
.841a	20 75 85	jsr $8575	                jsr help_emit_lf
.841d	a9 04		lda #$04	                lda #str_bad_token
.841f	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.8422					parser_common_panic:
.8422	68		pla		                pla
.8423	20 5e 85	jsr $855e	                jsr help_byte_to_ascii          ; print bad token as hex number
.8426	20 75 85	jsr $8575	                jsr help_emit_lf
.8429	4c 2d 80	jmp $802d	                jmp repl
.842c					parser_bad_digit:
.842c	48		pha		                pha                             ; save the bad digit
.842d	a9 06		lda #$06	                lda #str_bad_number
.842f	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.8432	80 ee		bra $8422	                bra parser_common_panic
.8434					function_not_available:
.8434	a9 08		lda #$08	                lda #str_cant_yet
.8436	20 97 85	jsr $8597	                jsr help_print_string
.8439	4c 2d 80	jmp $802d	                jmp repl
.843c					parser_add_object_to_ast:
.843c	da		phx		                phx             ; save index to token buffer
.843d	5a		phy		                phy             ; save MSB of the object (with tag)
.843e	48		pha		                pha             ; save LSB of the object
.843f	a5 18		lda $18		                lda hp_ast
.8441	85 00		sta $00		                sta tmp0
.8443	a5 19		lda $19		                lda hp_ast+1
.8445	85 01		sta $01		                sta tmp0+1
.8447	a9 00		lda #$00	                lda <#OC_EMPTY_LIST
.8449	a0 00		ldy #$00	                ldy #0
.844b	91 18		sta ($18),y	                sta (hp_ast),y
.844d	c8		iny		                iny
.844e	a9 00		lda #$00	                lda >#OC_EMPTY_LIST
.8450	91 18		sta ($18),y	                sta (hp_ast),y
.8452	c8		iny		                iny
.8453	68		pla		                pla             ; retrieve LSB of object, was in A
.8454	91 18		sta ($18),y	                sta (hp_ast),y
.8456	c8		iny		                iny
.8457	68		pla		                pla             ; retrieve MSB (with tag), was in Y
.8458	91 18		sta ($18),y	                sta (hp_ast),y
.845a	c8		iny		                iny
.845b	98		tya		                tya
.845c	18		clc		                clc
.845d	65 18		adc $18		                adc hp_ast
.845f	85 18		sta $18		                sta hp_ast
.8461	90 02		bcc $8465	                bcc _store_address
.8463	e6 19		inc $19		                inc hp_ast+1
.8465					_store_address:
.8465	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp_ast, which is just an addr
.8467	29 0f		and #$0f	                and #$0F        ; mask whatever the high nibble was (paranoid)
.8469	09 80		ora #$80	                ora #OT_PAIR
.846b	a0 01		ldy #$01	                ldy #1
.846d	91 16		sta ($16),y	                sta (astp),y
.846f	a5 00		lda $00		                lda tmp0        ; original LSB of hp_ast
.8471	92 16		sta ($16)	                sta (astp)
.8473	85 16		sta $16		                sta astp        ; still have original LSB
.8475	a5 01		lda $01		                lda tmp0+1
.8477	85 17		sta $17		                sta astp+1      ; MSB, was tmp0+1
.8479	fa		plx		                plx             ; get back index for token buffer
.847a	60		rts		                rts
=$0000					OC_EMPTY_LIST = $0000   ; end of list terminating object "()"
=$1fff					OC_TRUE       = $1fff   ; true bool #t, immediate
=$1000					OC_FALSE      = $1000   ; false bool #f, immediate
=$f000					OC_PROC_APPLY = $F000   ; primitive procedure (apply)
=$f002					OC_PROC_QUOTE = $F002   ; primitive procedure (quote)
.847b					parser_done:
.847b	a9 7a		lda #$7a	                lda #'z'
.847d	20 07 87	jsr $8707	                jsr debug_emit_a

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.8480					eval:
.8480	20 c7 86	jsr $86c7	                jsr debug_dump_ast
.8483	20 b5 86	jsr $86b5	                jsr debug_dump_hp
.8486	a5 15		lda $15		                lda rsn_ast             ; RAM segment nibble, default $10
.8488	a0 02		ldy #$02	                ldy #2                  ; by definition
.848a	20 2c 86	jsr $862c	                jsr help_walk_init      ; returns car in A and Y
.848d					eval_loop:
.848d	08		php		                php
.848e	29 f0		and #$f0	                and #$f0
.8490	4a		lsr a		                lsr
.8491	4a		lsr a		                lsr
.8492	4a		lsr a		                lsr             ; fourth LSR and ASL cancle each other out
.8493	aa		tax		                tax
.8494	7c af 84	jmp ($84af,x)	                jmp (eval_table,X)
.8497					eval_next:
.8497	28		plp		                plp
.8498	b0 35		bcs $84cf	                bcs eval_done           ; probably later a JMP
.849a	20 32 86	jsr $8632	                jsr help_walk_next
.849d	80 ee		bra $848d	                bra eval_loop
.849f					eval_0_meta:
.849f					eval_1_bool:
.849f					eval_2_fixnum:
.849f					eval_3_bignum:
.849f					eval_4_char:
.849f					eval_5_string:
.849f	80 f6		bra $8497	                bra eval_next           ; paranoid, never reached
.84a1					eval_6_UNDEFINED:
.84a1					eval_7_UNDEFINED:
.84a1					eval_8_pair:
.84a1	80 f4		bra $8497	                bra eval_next   ; paranoid, currently not reached
.84a3					eval_9_UNDEFINED:
.84a3					eval_A_UNDEFINED:
.84a3					eval_B_UNDEFINED:
.84a3					eval_C_UNDEFINED:
.84a3					eval_D_UNDEFINED:
.84a3					eval_E_UNDEFINED:
.84a3					eval_f_proc:
.84a3	98		tya		        tya
.84a4	b9 71 86	lda $8671,y	        lda proc_table_lsb,y    ; LSB of jump target
.84a7	85 0a		sta $0a		        sta jump
.84a9	b9 74 86	lda $8674,y	        lda proc_table_msb,y    ; MSB of jump target
.84ac	6c 0a 00	jmp ($000a)	        jmp (jump)
.84af					eval_table:
>84af	cf 84 97 84 97 84 97 84		        .word eval_done, eval_next, eval_next, eval_next
>84b7	97 84 97 84 97 84 97 84		        .word eval_next, eval_next, eval_next, eval_next
>84bf	a1 84 97 84 97 84 97 84		        .word eval_8_pair, eval_next, eval_next, eval_next
>84c7	97 84 97 84 97 84 a3 84		        .word eval_next, eval_next, eval_next, eval_f_proc
.84cf					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.84cf					printer:
.84cf	20 c7 86	jsr $86c7	                jsr debug_dump_ast
.84d2	a5 15		lda $15		                lda rsn_ast     ; RAM segment nibble
.84d4	a0 02		ldy #$02	                ldy #02         ; by definition
.84d6	20 2c 86	jsr $862c	                jsr help_walk_init
.84d9					printer_loop:
.84d9	08		php		                php
.84da	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.84dc	4a		lsr a		                lsr
.84dd	4a		lsr a		                lsr
.84de	4a		lsr a		                lsr     ; Fourth LSR and ASL cancle each other
.84df	aa		tax		                tax
.84e0	20 75 85	jsr $8575	                jsr help_emit_lf
.84e3	7c 28 85	jmp ($8528,x)	                jmp (printer_table,X)
.84e6					printer_next:
.84e6	28		plp		                plp                     ; from PHP
.84e7	b0 5f		bcs $8548	                bcs printer_done        ; probably a JMP later
.84e9	20 32 86	jsr $8632	                jsr help_walk_next
.84ec	80 eb		bra $84d9	                bra printer_loop
.84ee					printer_0_meta:
.84ee	80 58		bra $8548	                bra printer_done
.84f0					printer_1_bool:
.84f0	a5 22		lda $22		                lda walk_car+1          ; MSB of car
.84f2	29 0f		and #$0f	                and #$0F                ; Get rid of tag
.84f4	05 21		ora $21		                ora walk_car
.84f6	d0 04		bne $84fc	                bne _bool_true          ; not a zero means true
.84f8	a9 03		lda #$03	                lda #str_false
.84fa	80 02		bra $84fe	                bra _bool_printer
.84fc					_bool_true:
.84fc	a9 02		lda #$02	                lda #str_true
.84fe					_bool_printer:
.84fe	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.8501	80 e3		bra $84e6	                bra printer_next
.8503					printer_2_fixnum:
.8503	a5 22		lda $22		                lda walk_car+1          ; MSB
.8505	29 0f		and #$0f	                and #$0F                ; Mask tag
.8507	20 5e 85	jsr $855e	                jsr help_byte_to_ascii
.850a	98		tya		                tya                     ; still Y
.850b	20 5e 85	jsr $855e	                jsr help_byte_to_ascii
.850e	80 d6		bra $84e6	                bra printer_next
.8510					printer_3_bignum:
.8510					printer_4_char:
.8510					printer_5_string:
.8510	a5 22		lda $22		                lda walk_car+1          ; MSB
.8512	29 0f		and #$0f	                and #$0F                ; mask tag
.8514	05 1a		ora $1a		                ora rsn_str             ; merge with section nibble instead
.8516	85 05		sta $05		                sta tmp2+1
.8518	84 04		sty $04		                sty tmp2                ; LSB
.851a	a0 00		ldy #$00	                ldy #0
.851c					_string_loop:
.851c	b1 04		lda ($04),y	                lda (tmp2),y
.851e	f0 c6		beq $84e6	                beq printer_next       ; string is zero terminated
.8520	20 77 85	jsr $8577	                jsr help_emit_a
.8523	c8		iny		                iny
.8524	80 f6		bra $851c	                bra _string_loop
.8526					printer_6_UNDEFINED:
.8526					printer_7_UNDEFINED:
.8526					printer_8_UNDEFINED:
.8526					printer_9_UNDEFINED:
.8526					printer_A_UNDEFINED:
.8526					printer_B_UNDEFINED:
.8526					printer_C_UNDEFINED:
.8526					printer_D_UNDEFINED:
.8526					printer_E_UNDEFINED:
.8526					printer_F_UNDEFINED:
.8526	80 be		bra $84e6	                bra printer_next
.8528					printer_table:
>8528	48 85 f0 84 03 85 e6 84		        .word printer_done, printer_1_bool, printer_2_fixnum, printer_next
>8530	e6 84 10 85 e6 84 e6 84		        .word printer_next, printer_5_string, printer_next, printer_next
>8538	e6 84 e6 84 e6 84 e6 84		        .word printer_next, printer_next, printer_next, printer_next
>8540	e6 84 e6 84 e6 84 e6 84		        .word printer_next, printer_next, printer_next, printer_next
.8548					printer_done:
.8548	20 75 85	jsr $8575	                jsr help_emit_lf

;******  Return to file: platforms/../cthulhu.asm

.854b					repl_empty_line:
.854b	4c 2d 80	jmp $802d	                jmp repl
.854e					repl_quit:
.854e	20 75 85	jsr $8575	                jsr help_emit_lf
.8551	a9 09		lda #$09	                lda #str_end_input
.8553	20 97 85	jsr $8597	                jsr help_print_string
.8556	a9 0a		lda #$0a	                lda #str_chant
.8558	20 97 85	jsr $8597	                jsr help_print_string
.855b	4c 2b f0	jmp $f02b	                jmp platform_quit

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.855e					help_byte_to_ascii:
.855e	48		pha		                pha
.855f	4a		lsr a		                lsr             ; convert high nibble first
.8560	4a		lsr a		                lsr
.8561	4a		lsr a		                lsr
.8562	4a		lsr a		                lsr
.8563	20 67 85	jsr $8567	                jsr help_nibble_to_ascii
.8566	68		pla		                pla
.8567					help_nibble_to_ascii:
.8567	29 0f		and #$0f	                and #$0F
.8569	09 30		ora #$30	                ora #'0'
.856b	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.856d	90 02		bcc $8571	                bcc +
.856f	69 06		adc #$06	                adc #$06
.8571	4c 77 85	jmp $8577	+               jmp help_emit_a       ; JSR/RTS
.8574					help_to_lowercase:
.8574	60		rts		                rts
.8575					help_emit_lf:
.8575	a9 0a		lda #$0a	                lda #AscLF
.8577					help_emit_a:
.8577	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.857a					help_key_a:
.857a	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.857d					help_print_string_no_lf:
.857d	0a		asl a		                asl
.857e	a8		tay		                tay
.857f	b9 f2 87	lda $87f2,y	                lda string_table,y
.8582	85 00		sta $00		                sta tmp0                ; LSB
.8584	c8		iny		                iny
.8585	b9 f2 87	lda $87f2,y	                lda string_table,y
.8588	85 01		sta $01		                sta tmp0+1              ; MSB
.858a					help_print_common:
.858a	a0 00		ldy #$00	                ldy #0
.858c					_loop:
.858c	b1 00		lda ($00),y	                lda (tmp0),y
.858e	f0 06		beq $8596	                beq _done               ; strings are zero-terminated
.8590	20 77 85	jsr $8577	                jsr help_emit_a         ; allows vectoring via output
.8593	c8		iny		                iny
.8594	80 f6		bra $858c	                bra _loop
.8596					_done:
.8596	60		rts		                rts
.8597					help_print_string:
.8597	20 7d 85	jsr $857d	                jsr help_print_string_no_lf
.859a	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.859c	4c 77 85	jmp $8577	                jmp help_emit_a         ; JSR/RTS
.859f					help_is_decdigit:
.859f	c9 30		cmp #$30	                cmp #'0'
.85a1	90 07		bcc $85aa	                bcc _below_zero         ; A is < '0'
.85a3	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.85a5	b0 02		bcs $85a9	                bcs _above_nine
.85a7	38		sec		                sec
.85a8	60		rts		                rts
.85a9					_above_nine:
.85a9	18		clc		                clc
.85aa					_below_zero:
.85aa	60		rts		                rts
.85ab					help_is_delimiter:
.85ab	20 ed 85	jsr $85ed	                jsr help_is_whitespace
.85ae	b0 12		bcs $85c2	                bcs _delimiter_done
.85b0	18		clc		                clc
.85b1	da		phx		                phx
.85b2	ae 1d 89	ldx $891d	                ldx s_delimiters        ; length of delimiter chars string
.85b5					_delimiter_loop:
.85b5	dd 1d 89	cmp $891d,x	                cmp s_delimiters,X
.85b8	f0 06		beq $85c0	                beq _found_delimiter
.85ba	ca		dex		                dex
.85bb	d0 f8		bne $85b5	                bne _delimiter_loop
.85bd	fa		plx		                plx
.85be	18		clc		                clc
.85bf	60		rts		                rts
.85c0					_found_delimiter:
.85c0	fa		plx		                plx
.85c1					_is_delimiter:
.85c1	38		sec		                sec
.85c2					_delimiter_done:
.85c2	60		rts		                rts
.85c3					help_is_extended_alpha:
.85c3	18		clc		                clc
.85c4	da		phx		                phx
.85c5	ae 29 89	ldx $8929	                ldx s_extended          ; length of extended chars string
.85c8					_alpha_loop:
.85c8	dd 29 89	cmp $8929,x	                cmp s_extended,X
.85cb	f0 06		beq $85d3	                beq _found_extended
.85cd	ca		dex		                dex
.85ce	d0 f8		bne $85c8	                bne _alpha_loop
.85d0	fa		plx		                plx
.85d1	18		clc		                clc
.85d2	60		rts		                rts
.85d3					_found_extended:
.85d3	fa		plx		                plx
.85d4					_is_extrended:
.85d4	38		sec		                sec
.85d5					_extended_done:
.85d5	60		rts		                rts
.85d6					help_is_letter:
.85d6	c9 41		cmp #$41	                cmp #'A'
.85d8	90 0c		bcc $85e6	                bcc _not_letter       ; too low
.85da	c9 5b		cmp #$5b	                cmp #'Z'+1
.85dc	90 0a		bcc $85e8	                bcc _uppercase
.85de	c9 61		cmp #$61	                cmp #'a'
.85e0	90 04		bcc $85e6	                bcc _not_letter       ; between upper- and lowercase
.85e2	c9 7b		cmp #$7b	                cmp #'z'+1
.85e4	90 05		bcc $85eb	                bcc _is_letter
.85e6					_not_letter:
.85e6	18		clc		                clc
.85e7	60		rts		                rts
.85e8					_uppercase:
.85e8	18		clc		                clc
.85e9	69 20		adc #$20	                adc #'a'-'A'    ; 32, if you're curious
.85eb					_is_letter:
.85eb	38		sec		                sec             ; TODO testing
.85ec	60		rts		                rts
.85ed					help_is_whitespace:
.85ed	38		sec		                sec             ; default is whitespace
.85ee	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.85f0	f0 11		beq $8603	                beq _done
.85f2	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.85f4	f0 0d		beq $8603	                beq _done
.85f6	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.85f8	f0 09		beq $8603	                beq _done
.85fa	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.85fc	f0 05		beq $8603	                beq _done
.85fe	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.8600	f0 01		beq $8603	                beq _done
.8602	18		clc		                clc             ; If we end up here, it's not whitespace
.8603					_done:
.8603	60		rts		                rts
.8604					help_hexascii_to_value:
.8604	20 9f 85	jsr $859f	                jsr help_is_decdigit
.8607	90 05		bcc $860e	                bcc _see_if_letter
.8609	38		sec		                sec
.860a	e9 30		sbc #$30	                sbc #'0'
.860c	80 0f		bra $861d	                bra _done
.860e					_see_if_letter:
.860e	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.8610	90 17		bcc $8629	                bcc _error
.8612	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.8614	b0 13		bcs $8629	                bcs _error
.8616	c9 61		cmp #$61	                cmp #'a'
.8618	90 06		bcc $8620	                bcc _uppercase
.861a	38		sec		                sec
.861b	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.861d					_done:
.861d	29 0f		and #$0f	                and #$0F        ; paranoid
.861f	60		rts		                rts
.8620					_uppercase:
.8620	c9 47		cmp #$47	                cmp #'G'
.8622	b0 05		bcs $8629	                bcs _error
.8624	38		sec		                sec
.8625	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.8627	80 f4		bra $861d	                bra _done
.8629					_error:
.8629	a9 80		lda #$80	                lda #$80
.862b	60		rts		                rts
.862c					help_walk_init:
.862c	84 1f		sty $1f		                sty walk_curr           ; LSB
.862e	85 20		sta $20		                sta walk_curr+1         ; MSB
.8630	80 10		bra $8642	                bra help_walk_common
.8632					help_walk_next:
.8632	b2 1f		lda ($1f)	                lda (walk_curr)
.8634	48		pha		                pha
.8635	a0 01		ldy #$01	                ldy #1
.8637	b1 1f		lda ($1f),y	                lda (walk_curr),y       ; MSB
.8639	29 0f		and #$0f	                and #$0F                ; mask the pair tag
.863b	05 15		ora $15		                ora rsn_ast             ; replace by nibble for the AST
.863d	85 20		sta $20		                sta walk_curr+1
.863f	68		pla		                pla
.8640	85 1f		sta $1f		                sta walk_curr           ; LSB
.8642					help_walk_common:
.8642	b2 1f		lda ($1f)	                lda (walk_curr)
.8644	85 23		sta $23		                sta walk_cdr            ; LSB
.8646	a0 01		ldy #$01	                ldy #1
.8648	b1 1f		lda ($1f),y	                lda (walk_curr),y
.864a	85 24		sta $24		                sta walk_cdr+1          ; MSB
.864c	c8		iny		                iny
.864d	18		clc		                clc                     ; default is not last pair
.864e	05 23		ora $23		                ora walk_cdr            ; LSB
.8650	d0 01		bne $8653	                bne _store_car
.8652	38		sec		                sec                     ; last pair, mark by setting carry flag
.8653					_store_car:
.8653	b1 1f		lda ($1f),y	                lda (walk_curr),y       ; LSB
.8655	85 21		sta $21		                sta walk_car
.8657	48		pha		                pha                     ; We return this later in Y
.8658	c8		iny		                iny
.8659	b1 1f		lda ($1f),y	                lda (walk_curr),y       ; MSB
.865b	85 22		sta $22		                sta walk_car+1
.865d	7a		ply		                ply
.865e	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../primitive-procs.asm

.865f					proc_apply:
.865f					proc_car:
.865f					proc_cdr:
.865f					proc_cons:
.865f					proc_define:
.865f					proc_exit:
.865f	a9 0c		lda #$0c	        lda #str_exit_kill              ; "Kill Scheme (y or n)?"
.8661	20 7d 85	jsr $857d	        jsr help_print_string_no_lf
.8664	20 7a 85	jsr $857a	        jsr help_key_a
.8667	c9 79		cmp #$79	        cmp #'y'                        ; only "y" ends
.8669	f0 03		beq $866e	        beq _done
.866b	4c 97 84	jmp $8497	        jmp eval_next           ; TODO or eval_done?
.866e					_done:
.866e	4c 4e 85	jmp $854e	        jmp repl_quit
.8671					proc_if:
.8671					proc_not:
.8671					proc_quote:
.8671					proc_table_lsb:
>8671	5f 71 5f			        .byte <proc_apply, <proc_quote, <proc_exit
.8674					proc_table_msb:
>8674	86 86 86			        .byte >proc_apply, >proc_quote, >proc_exit
.8677					proc_char_whitespace_p:
.8677					proc_newline:
.8677					proc_display:
.8677					proc_read:
.8677					proc_read_char:
.8677					proc_read_line:
.8677					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../compound-procs.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.8677					debug_dump_input:
.8677	20 75 85	jsr $8575	                jsr help_emit_lf
.867a	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.867c	20 12 87	jsr $8712	                jsr debug_print_string_no_lf
.867f	a2 00		ldx #$00	                ldx #0
.8681					-
.8681	bd 00 02	lda $0200,x	                lda cib,x
.8684	f0 0b		beq $8691	                beq _done
.8686	20 5e 85	jsr $855e	                jsr help_byte_to_ascii
.8689	e8		inx		                inx
.868a	a9 20		lda #$20	                lda #' '
.868c	20 77 85	jsr $8577	                jsr help_emit_a
.868f	80 f0		bra $8681	                bra -
.8691					_done:
.8691	4c 5e 85	jmp $855e	                jmp help_byte_to_ascii          ; JSR/RTS
.8694					debug_dump_token:
.8694	20 75 85	jsr $8575	                jsr help_emit_lf
.8697	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.8699	20 12 87	jsr $8712	                jsr debug_print_string_no_lf
.869c	a2 00		ldx #$00	                ldx #0
.869e					-
.869e	bd 00 03	lda $0300,x	                lda tkb,x
.86a1	c9 00		cmp #$00	                cmp #T_END
.86a3	f0 0d		beq $86b2	                beq _done
.86a5	20 5e 85	jsr $855e	                jsr help_byte_to_ascii
.86a8	e8		inx		                inx
.86a9	a9 20		lda #$20	                lda #' '
.86ab	20 77 85	jsr $8577	                jsr help_emit_a
.86ae	e4 13		cpx $13		                cpx tkbp
.86b0	d0 ec		bne $869e	                bne -
.86b2					_done:
.86b2	4c 5e 85	jmp $855e	                jmp help_byte_to_ascii          ; JSR/RTS
.86b5					debug_dump_hp:
.86b5	20 75 85	jsr $8575	                jsr help_emit_lf
.86b8	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.86ba	20 12 87	jsr $8712	                jsr debug_print_string_no_lf
.86bd	a5 19		lda $19		                lda hp_ast+1
.86bf	20 5e 85	jsr $855e	                jsr help_byte_to_ascii
.86c2	a5 18		lda $18		                lda hp_ast
.86c4	4c 5e 85	jmp $855e	                jmp help_byte_to_ascii          ; JSR/RTS
.86c7					debug_dump_ast:
.86c7	20 75 85	jsr $8575	                jsr help_emit_lf
.86ca	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST root: "
.86cc	20 12 87	jsr $8712	                jsr debug_print_string_no_lf
.86cf	a5 15		lda $15		                lda rsn_ast             ; RAM segment nibble
.86d1	48		pha		                pha                     ; save MSB
.86d2	20 5e 85	jsr $855e	                jsr help_byte_to_ascii  ; print MSB
.86d5	a0 02		ldy #$02	                ldy #2                  ; By definition
.86d7	98		tya		                tya
.86d8	20 5e 85	jsr $855e	                jsr help_byte_to_ascii  ; print LSB
.86db	68		pla		                pla                     ; get MSB back
.86dc	20 2c 86	jsr $862c	                jsr help_walk_init
.86df					_debug_dump_ast_loop:
.86df	08		php		                php
.86e0	a9 04		lda #$04	                lda #strd_dump_arrow            ; "--> "
.86e2	20 12 87	jsr $8712	                jsr debug_print_string_no_lf
.86e5	a5 24		lda $24		                lda walk_cdr+1
.86e7	20 5e 85	jsr $855e	                jsr help_byte_to_ascii          ; MSB
.86ea	a5 23		lda $23		                lda walk_cdr
.86ec	20 5e 85	jsr $855e	                jsr help_byte_to_ascii          ; LSB
.86ef	a9 3a		lda #$3a	                lda #':'
.86f1	20 77 85	jsr $8577	                jsr help_emit_a
.86f4	a5 22		lda $22		                lda walk_car+1
.86f6	20 5e 85	jsr $855e	                jsr help_byte_to_ascii          ; MSB
.86f9	a5 21		lda $21		                lda walk_car
.86fb	20 5e 85	jsr $855e	                jsr help_byte_to_ascii          ; LSB
.86fe	28		plp		                plp
.86ff	b0 05		bcs $8706	                bcs _debug_dump_ast_done
.8701	20 32 86	jsr $8632	                jsr help_walk_next
.8704	80 d9		bra $86df	                bra _debug_dump_ast_loop
.8706					_debug_dump_ast_done:
.8706	60		rts		                rts
.8707					debug_emit_a:
.8707	48		pha		                pha
.8708	20 75 85	jsr $8575	                jsr help_emit_lf
.870b	68		pla		                pla
.870c	20 77 85	jsr $8577	                jsr help_emit_a
.870f	4c 75 85	jmp $8575	                jmp help_emit_lf        ; JSR/RTS
.8712					debug_print_string_no_lf:
.8712	0a		asl a		                asl
.8713	a8		tay		                tay
.8714	b9 94 87	lda $8794,y	                lda sd_table,y
.8717	85 00		sta $00		                sta tmp0                ; LSB
.8719	c8		iny		                iny
.871a	b9 94 87	lda $8794,y	                lda sd_table,y
.871d	85 01		sta $01		                sta tmp0+1              ; MSB
.871f					debug_print_common:
.871f	a0 00		ldy #$00	                ldy #0
.8721					_loop:
.8721	b1 00		lda ($00),y	                lda (tmp0),y
.8723	f0 06		beq $872b	                beq _done               ; strings are zero-terminated
.8725	20 77 85	jsr $8577	                jsr help_emit_a         ; allows vectoring via output
.8728	c8		iny		                iny
.8729	80 f6		bra $8721	                bra _loop
.872b					_done:
.872b	60		rts		                rts
.872c					debug_print_string:
.872c	20 12 87	jsr $8712	                jsr debug_print_string_no_lf
.872f	4c 75 85	jmp $8575	                jmp help_emit_lf        ; JSR/RTS
=0					strd_dump_token  = 0
=1					strd_dump_ast    = 1
=2					strd_dump_hp     = 2
=3					strd_dump_input  = 3
=4					strd_dump_arrow  = 4
=5					strd_dump_strtbl = 5
=6					strd_dump_str    = 6
>8732	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>873a	66 66 65 72 3a 20 00
>8741	41 53 54 20 72 6f 6f 74		s_dump_ast:     .null   "AST root: "
>8749	3a 20 00
>874c	41 53 54 20 68 65 61 70		s_dump_hp:      .null   "AST heap pointer: "
>8754	20 70 6f 69 6e 74 65 72 3a 20 00
>875f	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>8767	66 66 65 72 3a 20 00
>876e	20 2d 2d 3e 20 00		s_dump_arrow:   .null   " --> "
>8774	53 74 72 69 6e 67 20 74		s_dump_strtbl:  .null   "String table: "
>877c	61 62 6c 65 3a 20 00
>8783	53 74 72 69 6e 67 20 70		s_dump_str:     .null   "String pointer: "
>878b	6f 69 6e 74 65 72 3a 20 00
.8794					sd_table:
>8794	32 87 41 87 4c 87 5f 87		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input    ; 0-3
>879c	6e 87 74 87 83 87		        .word s_dump_arrow, s_dump_strtbl, s_dump_str              ; 4-7

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					jump:    .word ?     ; target for indirect jumps, used by evaluator
>000c					input_f  .byte ?     ; input flag for Reader, see details there
>000d					ciblen:  .word ?     ; current size of input buffer
>000f					cibp:    .word ?     ; index of current char in input buffer
>0011					tkblen:  .word ?     ; current size of the token buffer
>0013					tkbp:    .word ?     ; index of current token in token buffer
>0015					rsn_ast  .byte ?     ; RAM segment nibble for AST segment (default 1)
>0016					astp     .word ?     ; pointer to current entry in AST
>0018					hp_ast   .word ?     ; next free byte in AST RAM segment
>001a					rsn_str  .byte ?     ; RAM segment nibble for strings (default 2)
>001b					strp     .word ?     ; pointer to current entry in string table
>001d					hp_str   .word ?     ; next free byte in string RAM segment
>001f					walk_curr   .word ?  ; Pointer (addr) to current pair in AST
>0021					walk_car    .word ?  ; Contents of current pair's car field
>0023					walk_cdr    .word ?  ; Contents of current pair's cdr field
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00   ; used for the empty list and terminators
=$10					OT_BOOL         = $10   ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20   ; used for fixed numbers; immediate
=$30					OT_BIGNUM       = $30   ; reserved for bignum
=$40					OT_CHAR         = $40   ; reserved for chars; immediate
=$50					OT_STRING       = $50   ; used for strings; interned
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					OT_PAIR         = $80   ; used for pairs
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					OT_PROC         = $f0   ; used for built-in procedures

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.87a2					proc_headers:
.87a2					h_proc_apply:
>87a2	ac 87				        .word h_proc_quote ; link to next entry in list (16-bit address)
>87a4	5f 86				        .word proc_apply   ; link to actual code (16-bit address)
>87a6	61 70 70 6c 79 00		        .null "apply"       ; lower-case string, zero terminated
.87ac					h_proc_quote:
>87ac	b6 87				        .word h_proc_car
>87ae	71 86				        .word proc_quote
>87b0	71 75 6f 74 65 00		        .null "quote"
.87b6					h_proc_car:
>87b6	be 87				        .word h_proc_cdr
>87b8	5f 86				        .word proc_car
>87ba	63 61 72 00			        .null "car"
.87be					h_proc_cdr:
>87be	c6 87				        .word h_proc_cons
>87c0	5f 86				        .word proc_cdr
>87c2	63 64 72 00			        .null "cdr"
.87c6					h_proc_cons:
>87c6	cf 87				        .word h_proc_define
>87c8	5f 86				        .word proc_cons
>87ca	63 6f 6e 73 00			        .null "cons"
.87cf					h_proc_define:
>87cf	da 87				        .word h_proc_if
>87d1	5f 86				        .word proc_define
>87d3	64 65 66 69 6e 65 00		        .null "define"
.87da					h_proc_if:
>87da	e1 87				        .word h_proc_not
>87dc	71 86				        .word proc_if
>87de	69 66 00			        .null "if"
.87e1					h_proc_not:
>87e1	e9 87				        .word h_proc_exit
>87e3	71 86				        .word proc_not
>87e5	6e 6f 74 00			        .null "not"
.87e9					h_proc_exit:
>87e9	00 00				        .word  0000
>87eb	5f 86				        .word  proc_exit
>87ed	65 78 69 74 00			        .null "exit"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
=6					str_bad_number = 6
=7					str_bad_radix  = 7
=8					str_cant_yet   = 8      ; TODO temp during development
=9					str_end_input  = 9
=10					str_chant      = 10
=11					str_prompt     = 11
=12					str_exit_kill  = 12
.87f2					string_table:
>87f2	0c 88 20 88 3a 88 3d 88		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>87fa	40 88 54 88 6f 88 85 88		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>8802	99 88 b2 88 cf 88 03 89		        .word s_cant_yet, s_end_input, s_chant, s_prompt             ; 8-11
>880a	06 89				        .word s_exit_kill                                            ; 12-15
>880c	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable: "           ; REPL input error
>8814	20 76 61 72 69 61 62 6c 65 3a 20 00
>8820	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8828	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8838	65 00
>883a	23 74 00			s_true:         .null   "#t"
>883d	23 66 00			s_false:        .null   "#f"
>8840	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>8848	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>8854	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>885c	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>886c	3a 20 00
>886f	3b 49 6c 6c 2d 66 6f 72		s_bad_number:   .null   ";Ill-formed number: $"         ; from lexer
>8877	6d 65 64 20 6e 75 6d 62 65 72 3a 20 24 00
>8885	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>888d	61 64 20 72 61 64 69 78 3a 20 24 00
>8899	41 4c 50 48 41 3a 20 43		s_cant_yet:     .null   "ALPHA: Can't do that yet"      ; from parser
>88a1	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>88b1	00
>88b2	45 6e 64 20 6f 66 20 69		s_end_input:    .null   "End of input stream reached."  ; from reader
>88ba	6e 70 75 74 20 73 74 72 65 61 6d 20 72 65 61 63
>88ca	68 65 64 2e 00
>88cf	50 68 27 6e 67 6c 75 69		s_chant:        .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."
>88d7	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>88e7	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>88f7	61 67 6c 20 66 68 74 61 67 6e 2e 00
>8903	3e 20 00			s_prompt:       .null   "> "
>8906	4b 69 6c 6c 20 53 63 68		s_exit_kill:    .null   "Kill Scheme (y or n)? "       ; from proc_exit
>890e	65 6d 65 20 28 79 20 6f 72 20 6e 29 3f 20 00
>891d	0b 5b 5d 7b 7d 7c 60 22		s_delimiters:   .ptext "[]{}|`""';()"
>8925	27 3b 28 29
>8929	12 21 24 25 26 2a 2b 2d		s_extended:     .ptext "!$%&*+-./:<=>?@^_~"
>8931	2e 2f 3a 3c 3d 3e 3f 40 5e 5f 7e
>893c	61 62 63 64 65 66 67 68		s_letters:      .null "abcdefghijklmnopqrstuvwxyz"
>8944	69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78
>8954	79 7a 00
>8957	30 31 32 33 34 35 36 37		s_digits:       .null "0123456789"
>895f	38 39 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (13. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 31 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
