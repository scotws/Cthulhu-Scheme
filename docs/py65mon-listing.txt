
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Fri Apr 24 08:55:18 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=true					STRING_CR_TO_LF = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$10					RAM_SEGMENT_AST  = $10   ; $1000 to $1FFF Abstract Symbol Tree (AST)
=$20					RAM_SEGMENT_STR  = $20   ; $2000 to $2FFF String Table and strings
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 10		lda #$10	                lda #RAM_SEGMENT_AST    ; AST, default nibble $10
.800b	85 15		sta $15		                sta rsn_ast
.800d	a9 20		lda #$20	                lda #RAM_SEGMENT_STR    ; Strings, default nibble $20
.800f	85 1a		sta $1a		                sta rsn_str
.8011	a0 02		ldy #$02	                ldy #$02          ; First free byte is one word down
.8013	84 1d		sty $1d		                sty hp_str
.8015	a5 1a		lda $1a		                lda rsn_str     ; MSB of RAM segment for strings
.8017	85 1e		sta $1e		                sta hp_str+1
.8019	85 1c		sta $1c		                sta strp+1
.801b	64 1b		stz $1b		                stz strp        ; LSB
.801d	a9 00		lda #$00	                lda #00
.801f	a8		tay		                tay
.8020	92 1d		sta ($1d)	                sta (hp_str)
.8022	c8		iny		                iny
.8023	91 1d		sta ($1d),y	                sta (hp_str),y
.8025	a9 21		lda #$21	                lda #<kernel_getc
.8027	85 08		sta $08		                sta input
.8029	a9 f0		lda #$f0	                lda #>kernel_putc
.802b	85 09		sta $09		                sta input+1
.802d					repl:

;******  Processing file: platforms/../reader.asm

.802d					reader:
.802d	64 0c		stz $0c		                stz input_f
.802f	64 0d		stz $0d		                stz ciblen
.8031	64 0e		stz $0e		                stz ciblen+1
.8033	a9 0b		lda #$0b	                lda #str_prompt
.8035	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.8038	a0 00		ldy #$00	                ldy #0
.803a					reader_loop:
.803a	20 da 85	jsr $85da	                        jsr help_key_a
.803d	c9 0a		cmp #$0a	                        cmp #AscLF
.803f	f0 3b		beq $807c	                        beq reader_got_eol
.8041	c9 0d		cmp #$0d	                        cmp #AscCR
.8043	f0 37		beq $807c	                        beq reader_got_eol
.8045					_not_an_eol:
.8045					_not_a_parens:
.8045	c9 3b		cmp #$3b	                        cmp #$3B                ; semicolon
.8047	d0 08		bne $8051	                        bne _not_a_comment
.8049	aa		tax		                        tax                     ; Save semicolon char
.804a	a9 80		lda #$80	                        lda #$80                ; Get ready to set bit 7
.804c	04 0c		tsb $0c		                        tsb input_f             ; 65c02 only
.804e	8a		txa		                        txa
.804f	80 1d		bra $806e	                        bra reader_comment_continue     ; saves char
.8051					_not_a_comment:
.8051	c9 22		cmp #$22	                        cmp #$22                ; quotation mark '"'
.8053	d0 0a		bne $805f	                        bne _not_a_string
.8055	aa		tax		                        tax                     ; Save quotation mark char
.8056	a5 0c		lda $0c		                        lda input_f
.8058	49 40		eor #$40	                        eor #%01000000          ; flip bit 6
.805a	85 0c		sta $0c		                        sta input_f
.805c	8a		txa		                        txa
.805d	80 0f		bra $806e	                        bra reader_string_continue      ; saves char
.805f					_not_a_string:
.805f	c9 08		cmp #$08	                        cmp #AscBS
.8061	f0 2e		beq $8091	                        beq reader_backspace
.8063	c9 7f		cmp #$7f	                        cmp #AscDEL             ; Is the same as CTRL-h
.8065	f0 2a		beq $8091	                        beq reader_backspace
.8067	c9 04		cmp #$04	                        cmp #$04
.8069	d0 03		bne $806e	                        bne reader_normal_char
.806b	4c ae 85	jmp $85ae	                        jmp repl_quit
.806e					reader_normal_char:
.806e					reader_comment_continue:
.806e					reader_string_continue:
.806e	20 d7 85	jsr $85d7	                        jsr help_emit_a
.8071	99 00 02	sta $0200,y	                        sta cib,y
.8074	c8		iny		                        iny
.8075	cc 00 01	cpy $0100	                        cpy cib_size
.8078	90 34		bcc $80ae	                        bcc reader_buffer_full
.807a	80 be		bra $803a	                        bra reader_loop
.807c					reader_got_eol:
.807c	a5 0c		lda $0c		                        lda input_f             ; bit 7 marks comment
.807e	30 09		bmi $8089	                        bmi _eol_in_comment
.8080	29 7f		and #$7f	                        and #%01111111          ; input_f already in A
.8082	d0 09		bne $808d	                        bne _eol_in_parens_or_string
.8084	20 d7 85	jsr $85d7	                        jsr help_emit_a
.8087	80 25		bra $80ae	                        bra reader_input_done
.8089					_eol_in_comment:
.8089	a9 80		lda #$80	                        lda #$80
.808b	14 0c		trb $0c		                        trb input_f             ; bit 7 marks comment, now clear
.808d					_eol_in_parens_or_string:
.808d	a9 0a		lda #$0a	                        lda #AscLF
.808f	80 dd		bra $806e	                        bra reader_comment_continue       ; stores LF
.8091					reader_backspace:
.8091	c0 00		cpy #$00	                        cpy #0          ; buffer empty?
.8093	d0 06		bne $809b	                        bne _skip_bell
.8095	a9 07		lda #$07	                        lda #AscBELL
.8097	20 d7 85	jsr $85d7	                        jsr help_emit_a
.809a	c8		iny		                        iny
.809b					_skip_bell:
.809b	88		dey		                        dey
.809c	a9 08		lda #$08	                        lda #AscBS      ; move back one
.809e	20 d7 85	jsr $85d7	                        jsr help_emit_a
.80a1	a9 20		lda #$20	                        lda #AscSP      ; print a space (rubout)
.80a3	20 d7 85	jsr $85d7	                        jsr help_emit_a
.80a6	a9 08		lda #$08	                        lda #AscBS      ; move back over space
.80a8	20 d7 85	jsr $85d7	                        jsr help_emit_a
.80ab	4c 3a 80	jmp $803a	                        jmp reader_loop
.80ae					reader_input_done:
.80ae					reader_buffer_full:
.80ae	84 0d		sty $0d		                        sty ciblen      ; Y contains number of chars accepted already
.80b0	a9 00		lda #$00	                        lda #0
.80b2	85 0e		sta $0e		                        sta ciblen+1    ; we only accept 254 chars for now
.80b4	99 00 02	sta $0200,y	                        sta cib,y

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../lexer.asm

.80b7					lexer:
.80b7	20 fb 86	jsr $86fb	                jsr debug_dump_input
.80ba	a0 00		ldy #$00	                ldy #0
.80bc	64 0f		stz $0f		                stz cibp
.80be	64 10		stz $10		                stz cibp+1      ; MSB currently unused
.80c0	64 13		stz $13		                stz tkbp
.80c2	64 14		stz $14		                stz tkbp+1      ; MSB currently unused
.80c4	98		tya		                tya
.80c5	19 00 02	ora $0200,y	                ora cib,y
.80c8	d0 03		bne $80cd	                bne lexer_loop
.80ca	4c ab 85	jmp $85ab	                jmp repl_empty_line
.80cd					lexer_loop:
.80cd	b9 00 02	lda $0200,y	                lda cib,y
.80d0	c9 3b		cmp #$3b	                cmp #$3B        ; semicolon
.80d2	d0 0f		bne $80e3	                bne _no_comment
.80d4					_comment_loop:
.80d4	c8		iny		                iny
.80d5	b9 00 02	lda $0200,y	                lda cib,y
.80d8	c9 0a		cmp #$0a	                cmp #AscLF
.80da	f0 04		beq $80e0	                beq _comment_done
.80dc	c9 0d		cmp #$0d	                cmp #AscCR
.80de	d0 f4		bne $80d4	                bne _comment_loop
.80e0					_comment_done:
.80e0	4c 27 82	jmp $8227	                jmp lexer_next
.80e3					_no_comment:
.80e3	20 4d 86	jsr $864d	                jsr help_is_whitespace
.80e6	90 03		bcc $80eb	                bcc _not_whitespace
.80e8	4c 27 82	jmp $8227	                jmp lexer_next
.80eb					_not_whitespace:
.80eb					_test_parens:
.80eb	c9 28		cmp #$28	                cmp #'('        ; check for open parens
.80ed	d0 08		bne $80f7	                bne _not_parens_start
.80ef	a9 aa		lda #$aa	                lda #T_PAREN_START
.80f1	20 37 82	jsr $8237	                jsr lexer_add_token
.80f4	4c 27 82	jmp $8227	                jmp lexer_next
.80f7					_not_parens_start:
.80f7	c9 29		cmp #$29	                cmp #')'        ; check for close parens
.80f9	d0 08		bne $8103	                bne _not_parens_end
.80fb	a9 ff		lda #$ff	                lda #T_PAREN_END
.80fd	20 37 82	jsr $8237	                jsr lexer_add_token
.8100	4c 27 82	jmp $8227	                jmp lexer_next
.8103					_not_parens_end:
.8103	c9 27		cmp #$27	                cmp #$27                ; "'" tick for (quote)
.8105	d0 08		bne $810f	                bne _not_tick
.8107	a9 01		lda #$01	                lda #T_TICK
.8109	20 37 82	jsr $8237	                jsr lexer_add_token
.810c	4c 27 82	jmp $8227	                jmp lexer_next
.810f					_not_tick:
.810f	d0 03		bne $8114	                bne _not_done
.8111	4c 2f 82	jmp $822f	                jmp lexer_end_of_input          ; not the same as lexer_done
.8114					_not_done:
.8114	c9 23		cmp #$23	                cmp #'#'
.8116	f0 03		beq $811b	                beq _got_sharp
.8118	4c b8 81	jmp $81b8	                jmp lexer_not_sharp             ; too far for branch
.811b					_got_sharp:
.811b	c8		iny		                iny
.811c	b9 00 02	lda $0200,y	                lda cib,y
.811f	c9 74		cmp #$74	                cmp #'t'        ; We're optimists so we check for true first
.8121	d0 08		bne $812b	                bne _not_true
.8123	a9 02		lda #$02	                lda #T_TRUE
.8125	20 37 82	jsr $8237	                jsr lexer_add_token
.8128	4c 27 82	jmp $8227	                jmp lexer_next
.812b					_not_true:
.812b	c9 66		cmp #$66	                cmp #'f'
.812d	d0 08		bne $8137	                bne _not_false
.812f	a9 03		lda #$03	                lda #T_FALSE
.8131	20 37 82	jsr $8237	                jsr lexer_add_token
.8134	4c 27 82	jmp $8227	                jmp lexer_next
.8137					_not_false:
.8137	c9 5c		cmp #$5c	                cmp #'\'
.8139	d0 00		bne $813b	                bne _no_backslash
.813b					_not_single_char:
.813b					_not_named_char:
.813b					_no_backslash:
.813b					_not_vector:
.813b	c9 78		cmp #$78	                cmp #'x'        ; #x is hexadecimal
.813d	d0 04		bne $8143	                bne _not_hexnum
.813f	a9 10		lda #$10	                lda #$10        ; Base 16
.8141	80 13		bra $8156	                bra lexer_got_number
.8143					_not_hexnum:
.8143	c9 62		cmp #$62	                cmp #'b'        ; #b is binary
.8145	d0 04		bne $814b	                bne _not_binnum
.8147	a9 02		lda #$02	                lda #$02        ; Base 2
.8149	80 0b		bra $8156	                bra lexer_got_number
.814b					_not_binnum:
.814b	c9 64		cmp #$64	                cmp #'d'        ; #d is explicit decimal
.814d	d0 04		bne $8153	                bne _illegal_radix
.814f	a9 0a		lda #$0a	                lda #$0A        ; Base 10
.8151	80 03		bra $8156	                bra lexer_got_number
.8153					_illegal_radix:
.8153	4c b0 81	jmp $81b0	                jmp lexer_illegal_radix
.8156					lexer_got_number:
.8156	48		pha		                pha                     ; Save the radix for the moment
.8157	a9 12		lda #$12	                lda #T_NUM_START
.8159	20 37 82	jsr $8237	                jsr lexer_add_token
.815c	68		pla		                pla
.815d	20 37 82	jsr $8237	                jsr lexer_add_token
.8160	a6 13		ldx $13		                ldx tkbp        ; get index of where length will be
.8162	86 00		stx $00		                stx tmp0
.8164	a9 00		lda #$00	                lda #0          ; dummy length value
.8166	20 37 82	jsr $8237	                jsr lexer_add_token
.8169	c8		iny		                iny             ; Y is still the input buffer index
.816a	b9 00 02	lda $0200,y	                lda cib,y
.816d	a2 00		ldx #$00	                ldx #0          ; X counts length of string
.816f	c9 2d		cmp #$2d	                cmp #'-'
.8171	d0 09		bne $817c	                bne _check_for_plus
.8173	a9 21		lda #$21	                lda #T_MINUS
.8175	20 37 82	jsr $8237	                jsr lexer_add_token
.8178	c8		iny		                iny             ; skip minus character
.8179	e8		inx		                inx             ; string now has length of 1
.817a	80 0b		bra $8187	                bra _sign_done
.817c					_check_for_plus:
.817c	c9 2b		cmp #$2b	                cmp #'+'
.817e	d0 01		bne $8181	                bne _default_plus
.8180	c8		iny		                iny
.8181					_default_plus:
.8181	a9 20		lda #$20	                lda #T_PLUS
.8183	20 37 82	jsr $8237	                jsr lexer_add_token
.8186	e8		inx		                inx             ; string now has length of 1
.8187					_sign_done:
.8187	b9 00 02	lda $0200,y	                lda cib,y
.818a	f0 24		beq $81b0	                beq lexer_terminator_too_early  ; 00 terminates input
.818c	20 0b 86	jsr $860b	                jsr help_is_delimiter
.818f	b0 1f		bcs $81b0	                bcs lexer_delimiter_too_early
.8191					_number_loop:
.8191	20 37 82	jsr $8237	                jsr lexer_add_token
.8194	e8		inx		                inx             ; String one character longer
.8195	c8		iny		                iny             ; Next character
.8196	b9 00 02	lda $0200,y	                lda cib,y
.8199	f0 07		beq $81a2	                beq _legal_terminator
.819b	20 0b 86	jsr $860b	                jsr help_is_delimiter
.819e	b0 02		bcs $81a2	                bcs _number_done
.81a0	80 ef		bra $8191	                bra _number_loop
.81a2					_legal_terminator:
.81a2					_number_done:
.81a2	a9 82		lda #$82	                lda #T_NUM_END
.81a4	20 37 82	jsr $8237	                jsr lexer_add_token
.81a7	8a		txa		                txa             ; number of chars was in X
.81a8	a6 00		ldx $00		                ldx tmp0        ; index of length byte in token stream
.81aa	9d 00 03	sta $0300,x	                sta tkb,x
.81ad	4c 28 82	jmp $8228	                jmp lexer_next_same_char
.81b0					lexer_illegal_radix:
.81b0					lexer_terminator_too_early:
.81b0					lexer_delimiter_too_early:
.81b0	a9 06		lda #$06	                lda #str_bad_number
.81b2	20 f7 85	jsr $85f7	                jsr help_print_string
.81b5	4c 2d 80	jmp $802d	                jmp repl
.81b8					lexer_not_octnum
.81b8					lexer_not_sharp:
.81b8					_not_decnum:
.81b8	c9 22		cmp #$22	                cmp #$22        ; '"' ASCII value
.81ba	d0 1f		bne $81db	                bne _not_string
.81bc	a9 13		lda #$13	                lda #T_STR_START
.81be	20 37 82	jsr $8237	                jsr lexer_add_token
.81c1					_string_loop:
.81c1	c8		iny		                iny
.81c2	b9 00 02	lda $0200,y	                lda cib,y
.81c5	c9 22		cmp #$22	                cmp #$22        ; '"' closes string
.81c7	f0 0b		beq $81d4	                beq _string_done
.81c9	c9 0d		cmp #$0d	                cmp #AscCR
.81cb	d0 02		bne $81cf	                bne +
.81cd	a9 0a		lda #$0a	                lda #AscLF
.81cf					+
.81cf	20 37 82	jsr $8237	                jsr lexer_add_token
.81d2	80 ed		bra $81c1	                bra _string_loop
.81d4					_string_done:
.81d4	a9 83		lda #$83	                lda #T_STR_END
.81d6	20 37 82	jsr $8237	                jsr lexer_add_token
.81d9	80 4c		bra $8227	                bra lexer_next
.81db					_not_string:
.81db	c9 2e		cmp #$2e	                cmp #'.'
.81dd	d0 07		bne $81e6	                bne _not_dot
.81df	a9 05		lda #$05	                lda #T_DOT
.81e1	20 37 82	jsr $8237	                jsr lexer_add_token
.81e4	80 41		bra $8227	                bra lexer_next
.81e6					_not_dot:
.81e6	20 36 86	jsr $8636	                jsr help_is_letter
.81e9	b0 05		bcs $81f0	                bcs _id_found
.81eb	20 23 86	jsr $8623	                jsr help_is_extended_alpha
.81ee	90 27		bcc $8217	                bcc _not_an_id
.81f0					_id_found:
.81f0	48		pha		                pha                     ; Save copy of the first character
.81f1	a9 14		lda #$14	                lda #T_ID_START
.81f3	20 37 82	jsr $8237	                jsr lexer_add_token
.81f6	68		pla		                pla
.81f7					_id_loop:
.81f7	20 37 82	jsr $8237	                jsr lexer_add_token
.81fa	c8		iny		                iny                     ; next character
.81fb	c4 0d		cpy $0d		                cpy ciblen
.81fd	f0 11		beq $8210	                beq _id_end_of_line     ; Line can just be over
.81ff	b9 00 02	lda $0200,y	                lda cib,y
.8202	f0 0c		beq $8210	                beq _id_end_of_line     ; EOL can terminate input
.8204	20 0b 86	jsr $860b	                jsr help_is_delimiter
.8207	90 ee		bcc $81f7	                bcc _id_loop
.8209					_id_done:
.8209	a9 84		lda #$84	                lda #T_ID_END
.820b	20 37 82	jsr $8237	                jsr lexer_add_token
.820e	80 18		bra $8228	                bra lexer_next_same_char        ; deal with delimiter
.8210					_id_end_of_line:
.8210	a9 84		lda #$84	                lda #T_ID_END
.8212	20 37 82	jsr $8237	                jsr lexer_add_token
.8215	80 18		bra $822f	                bra lexer_end_of_input
.8217					_not_an_id:
.8217					lexer_error:
.8217	48		pha		                pha
.8218	a9 00		lda #$00	                lda #str_unbound
.821a	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.821d	68		pla		                pla
.821e	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.8221	20 d5 85	jsr $85d5	                jsr help_emit_lf
.8224	4c 2d 80	jmp $802d	                jmp repl
.8227					lexer_next:
.8227	c8		iny		                iny
.8228					lexer_next_same_char:
.8228	c4 0d		cpy $0d		                cpy ciblen
.822a	f0 03		beq $822f	                beq lexer_end_of_input
.822c	4c cd 80	jmp $80cd	                jmp lexer_loop
.822f					lexer_end_of_input:
.822f	a9 00		lda #$00	                lda #T_END
.8231	20 37 82	jsr $8237	                jsr lexer_add_token
.8234	4c 42 82	jmp $8242	                jmp lexer_done
.8237					lexer_add_token:
.8237	5a		phy		                phy             ; Could also store in cibp
.8238	a4 13		ldy $13		                ldy tkbp
.823a	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.823d	c8		iny		                iny
.823e	84 13		sty $13		                sty tkbp
.8240	7a		ply		                ply
.8241	60		rts		                rts
=$00					T_END           = $00   ; Terminates token stream
=$01					T_TICK          = $01   ; "'" - tick character
=$02					T_TRUE          = $02   ; '#t'
=$03					T_FALSE         = $03   ; '#f'
=$04					T_SHARP         = $04   ; '#' - note '#f', '#t' and others are precprocessed
=$05					T_DOT           = $05   ; "." - dot/period, used for pairs
=$12					T_NUM_START     = $12   ; Marks beginning of a number sequence
=$13					T_STR_START     = $13   ; Marks beginning of a string
=$14					T_ID_START      = $14   ; Marks beginning of an identifier
=$20					T_PLUS          = $20   ; '+' Also used in number token sequence
=$21					T_MINUS         = $21   ; '-' Also used in number token sequence
=$22					T_STAR          = $22   ; '*' Also used for math
=$23					T_SLASH         = $23   ; '\' Also used for math
=$82					T_NUM_END       = $82   ; Marks end of a number sequence, see T_NUM_START
=$83					T_STR_END       = $83   ; Marks end of a string, see T_STR_START
=$84					T_ID_END        = $84   ; Makrs end of an identifier, see T_ID_START
=$aa					T_PAREN_START   = $AA   ; '(' - parens open
=$ff					T_PAREN_END     = $FF   ; ')' - parens closed
.8242					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.8242					parser:
.8242	20 18 87	jsr $8718	                jsr debug_dump_token
.8245	a9 02		lda #$02	                lda #$02        ; Skip dummy cdr at beginning of RAM
.8247	85 18		sta $18		                sta hp_ast
.8249	a5 15		lda $15		                lda rsn_ast     ; MSB of RAM segment for AST
.824b	85 19		sta $19		                sta hp_ast+1
.824d	85 17		sta $17		                sta astp+1      ; still have MSB of RAM segment
.824f	64 16		stz $16		                stz astp
.8251	64 13		stz $13		                stz tkbp
.8253	64 14		stz $14		                stz tkbp+1      ; fake, currently only using LSB
.8255	a2 ff		ldx #$ff	                ldx #$FF        ; index -1 at beginning
.8257					parser_loop:
.8257	e8		inx		                inx
.8258	bd 00 03	lda $0300,x	                lda tkb,x
.825b	c9 01		cmp #$01	                cmp #T_TICK
.825d	d0 0a		bne $8269	                bne _not_tick
.825f	a0 02		ldy #$02	                ldy #<OC_PROC_QUOTE
.8261	a9 f0		lda #$f0	                lda #>OC_PROC_QUOTE
.8263	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8266	4c 57 82	jmp $8257	                jmp parser_loop
.8269					_not_tick:
.8269	c9 aa		cmp #$aa	                cmp #T_PAREN_START
.826b	d0 1d		bne $828a	                bne _not_paren_start
.826d	e8		inx		                inx
.826e	bd 00 03	lda $0300,x	                lda tkb,x
.8271	c9 ff		cmp #$ff	                cmp #T_PAREN_END
.8273	d0 0a		bne $827f	                bne _not_empty_list
.8275	a0 00		ldy #$00	                ldy #<OC_EMPTY_LIST
.8277	a9 00		lda #$00	                lda #>OC_EMPTY_LIST
.8279	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.827c	4c 57 82	jmp $8257	                jmp parser_loop
.827f					_not_empty_list:
.827f	ca		dex		                dex
.8280	a0 aa		ldy #$aa	                ldy #<OC_PARENS_START
.8282	a9 00		lda #$00	                lda #>OC_PARENS_START
.8284	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8287	4c 57 82	jmp $8257	                jmp parser_loop
.828a					_not_paren_start:
.828a	c9 ff		cmp #$ff	                cmp #T_PAREN_END
.828c	d0 0a		bne $8298	                bne _not_paren_end
.828e	a0 ff		ldy #$ff	                ldy #<OC_PARENS_END
.8290	a9 00		lda #$00	                lda #>OC_PARENS_END
.8292	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8295	4c 57 82	jmp $8257	                jmp parser_loop
.8298					_not_paren_end:
.8298	c9 00		cmp #$00	                cmp #T_END
.829a	d0 03		bne $829f	                bne _not_end_token
.829c	4c 96 84	jmp $8496	                jmp parser_done
.829f					_not_end_token:
.829f	c9 02		cmp #$02	                cmp #T_TRUE
.82a1	d0 0a		bne $82ad	                bne _not_true_token
.82a3	a0 ff		ldy #$ff	                ldy <#OC_TRUE
.82a5	a9 1f		lda #$1f	                lda >#OC_TRUE
.82a7	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.82aa	4c 57 82	jmp $8257	                jmp parser_loop
.82ad					_not_true_token:
.82ad	c9 03		cmp #$03	                cmp #T_FALSE
.82af	d0 0a		bne $82bb	                bne _not_false_token
.82b1	a0 00		ldy #$00	                ldy <#OC_FALSE
.82b3	a9 10		lda #$10	                lda >#OC_FALSE
.82b5	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.82b8	4c 57 82	jmp $8257	                jmp parser_loop
.82bb					_not_false_token:
.82bb	c9 12		cmp #$12	                cmp #T_NUM_START
.82bd	f0 03		beq $82c2	                beq +
.82bf	4c 69 83	jmp $8369	                jmp parser_not_num      ; too far for BNE
.82c2					+
.82c2	64 02		stz $02		                stz tmp1
.82c4	64 03		stz $03		                stz tmp1+1
.82c6	e8		inx		                inx             ; skip over T_NUM_START token
.82c7	bd 00 03	lda $0300,x	                lda tkb,x
.82ca	85 00		sta $00		                sta tmp0        ; radix
.82cc	e8		inx		                inx
.82cd	bd 00 03	lda $0300,x	                lda tkb,x
.82d0	a8		tay		                tay             ; We need the length of the string later ...
.82d1	88		dey		                dey             ; ... but we don't need to include the sign
.82d2	e8		inx		                inx             ; Move to token for sign, T_PLUS or T_MINUS
.82d3	bd 00 03	lda $0300,x	                lda tkb,x
.82d6	85 01		sta $01		                sta tmp0+1      ; Just store sign for now
.82d8	e8		inx		                inx             ; Move to first digit
.82d9	a5 00		lda $00		                lda tmp0        ; radix
.82db	c9 0a		cmp #$0a	                cmp #$0a
.82dd	d0 03		bne $82e2	                bne _not_dec
.82df	4c 51 83	jmp $8351	                jmp parser_common_fixnum
.82e2					_not_dec:
.82e2	c9 10		cmp #$10	                cmp #$10
.82e4	d0 36		bne $831c	                bne _not_hex
.82e6	98		tya		                tya
.82e7	c9 04		cmp #$04	                cmp #$04
.82e9	90 03		bcc $82ee	                bcc _dec_fixnum
.82eb	4c 4f 84	jmp $844f	                jmp function_not_available
.82ee					_dec_fixnum:
.82ee					_hex_fixnum_loop:
.82ee	bd 00 03	lda $0300,x	                lda tkb,x
.82f1	c9 82		cmp #$82	                cmp #T_NUM_END
.82f3	f0 24		beq $8319	                beq _done_hex
.82f5	20 64 86	jsr $8664	                jsr help_hexascii_to_value
.82f8	10 03		bpl $82fd	                bpl _legal_hex_digit
.82fa	4c 47 84	jmp $8447	                jmp parser_bad_digit
.82fd					_legal_hex_digit:
.82fd	0a		asl a		                asl
.82fe	0a		asl a		                asl
.82ff	0a		asl a		                asl
.8300	0a		asl a		                asl
.8301	2a		rol a		                rol             ; bit 7 of A now in carry flag
.8302	26 03		rol $03		                rol tmp1+1      ; bit 7 of tmp1+1 now in carry flag
.8304	26 02		rol $02		                rol tmp1        ; now is bit 0 of tmp1
.8306	2a		rol a		                rol
.8307	26 03		rol $03		                rol tmp1+1
.8309	26 02		rol $02		                rol tmp1
.830b	2a		rol a		                rol
.830c	26 03		rol $03		                rol tmp1+1
.830e	26 02		rol $02		                rol tmp1
.8310	2a		rol a		                rol
.8311	26 03		rol $03		                rol tmp1+1
.8313	26 02		rol $02		                rol tmp1
.8315	e8		inx		                inx
.8316	88		dey		                dey
.8317	d0 d5		bne $82ee	                bne _hex_fixnum_loop
.8319					_done_hex:
.8319	4c 51 83	jmp $8351	                jmp parser_common_fixnum
.831c					_not_hex:
.831c	c9 02		cmp #$02	                cmp #$02
.831e	d0 28		bne $8348	                bne _not_binary
.8320	98		tya		                tya
.8321	c9 0d		cmp #$0d	                cmp #$0D                ; "smaller than 13"
.8323	90 03		bcc $8328	                bcc _bin_fixnum
.8325	4c 4f 84	jmp $844f	                jmp function_not_available
.8328					_bin_fixnum:
.8328					_bin_fixnum_loop:
.8328	bd 00 03	lda $0300,x	                lda tkb,x
.832b	c9 30		cmp #$30	                cmp #'0'
.832d	f0 0b		beq $833a	                beq _legal_bit_char
.832f	c9 31		cmp #$31	                cmp #'1'
.8331	f0 07		beq $833a	                beq _legal_bit_char
.8333	c9 82		cmp #$82	                cmp #T_NUM_END
.8335	f0 0e		beq $8345	                beq _done_bin
.8337	4c 47 84	jmp $8447	                jmp parser_bad_digit
.833a					_legal_bit_char:
.833a	29 01		and #$01	                and #$01                ; gives us $00 or $01
.833c	6a		ror a		                ror                     ; push the bit into carry flag
.833d	26 03		rol $03		                rol tmp1+1              ; rotate the carry flag into LSB ...
.833f	26 02		rol $02		                rol tmp1                ; ... and highest bit of tmp1+1 to tmp1
.8341	e8		inx		                inx                     ; next character
.8342	88		dey		                dey                     ; decrease counter
.8343	d0 e3		bne $8328	                bne _bin_fixnum_loop
.8345					_done_bin:
.8345	4c 51 83	jmp $8351	                jmp parser_common_fixnum
.8348					_not_binary:
.8348					_illegal_radix:
.8348	48		pha		                pha                             ; save the evil radix
.8349	a9 07		lda #$07	                lda #str_bad_radix
.834b	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.834e	4c 3d 84	jmp $843d	                jmp parser_common_panic
.8351					parser_common_fixnum:
.8351	a5 01		lda $01		                lda tmp0+1
.8353	c9 21		cmp #$21	                cmp #T_MINUS
.8355	f0 08		beq $835f	                beq _negative_number
.8357	a9 20		lda #$20	                lda #OT_FIXNUM
.8359	05 02		ora $02		                ora tmp1        ; construct tag byte with MSB of number
.835b	85 02		sta $02		                sta tmp1
.835d	80 00		bra $835f	                bra _add_fixnum_to_ast
.835f					_negative_number:
.835f					_add_fixnum_to_ast:
.835f	a4 03		ldy $03		                ldy tmp1+1
.8361	a5 02		lda $02		                lda tmp1
.8363	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8366					_num_done:
.8366	4c 57 82	jmp $8257	                jmp parser_loop
.8369					parser_not_num:
.8369	c9 13		cmp #$13	                cmp #T_STR_START
.836b	d0 46		bne $83b3	                bne parser_not_string
.836d	a5 1e		lda $1e		                lda hp_str+1    ; MSB of next free byte in string RAM segment
.836f	29 0f		and #$0f	                and #$0F        ; mask high nibble (paranoid)
.8371	09 50		ora #$50	                ora #OT_STRING  ; object tag nibble for strings
.8373	a4 1d		ldy $1d		                ldy hp_str      ; LSB goes in Y, MSB is in A
.8375	20 57 84	jsr $8457	                jsr parser_add_object_to_ast   ; Updates AST heap pointer
.8378	e8		inx		                inx             ; move to first character of string
.8379	a0 00		ldy #$00	                ldy #0
.837b					_string_loop:
.837b	bd 00 03	lda $0300,x	                lda tkb,x
.837e	c9 83		cmp #$83	                cmp #T_STR_END
.8380	f0 06		beq $8388	                beq _string_end
.8382	91 1d		sta ($1d),y	                sta (hp_str),y
.8384	c8		iny		                iny
.8385	e8		inx		                inx
.8386	80 f3		bra $837b	                bra _string_loop
.8388					_string_end:
.8388	a9 00		lda #$00	                lda #0
.838a	c8		iny		                iny
.838b	91 1d		sta ($1d),y	                sta (hp_str),y
.838d	98		tya		                tya
.838e	18		clc		                clc
.838f	65 1d		adc $1d		                adc hp_str
.8391	85 1d		sta $1d		                sta hp_str
.8393	90 02		bcc $8397	                bcc +
.8395	e6 1e		inc $1e		                inc hp_str+1
.8397					+
.8397	a9 00		lda #$00	                lda #0
.8399	92 1d		sta ($1d)	                sta (hp_str)
.839b	a0 01		ldy #$01	                ldy #1
.839d	91 1d		sta ($1d),y	                sta (hp_str),y
.839f	a5 1d		lda $1d		                lda hp_str
.83a1	85 1b		sta $1b		                sta strp
.83a3	a5 1e		lda $1e		                lda hp_str+1
.83a5	85 1c		sta $1c		                sta strp+1
.83a7	98		tya		                tya             ; #1
.83a8	1a		inc a		                inc a
.83a9	18		clc		                clc
.83aa	65 1d		adc $1d		                adc hp_str
.83ac	90 02		bcc $83b0	                bcc +
.83ae	e6 1e		inc $1e		                inc hp_str+1
.83b0					+
.83b0	4c 57 82	jmp $8257	                jmp parser_loop
.83b3					parser_not_string:
.83b3	c9 14		cmp #$14	                cmp #T_ID_START
.83b5	f0 03		beq $83ba	                beq parser_have_id
.83b7	4c 34 84	jmp $8434	                jmp parser_not_id               ; too far for BNE
.83ba					parser_have_id:
.83ba					_find_proc:
.83ba	e8		inx		                inx             ; point to first character
.83bb	a9 29		lda #$29	                lda #<proc_headers
.83bd	85 00		sta $00		                sta tmp0
.83bf	a9 88		lda #$88	                lda #>proc_headers
.83c1	85 01		sta $01		                sta tmp0+1
.83c3	8a		txa		                txa
.83c4	18		clc		                clc
.83c5	69 00		adc #$00	                adc #<tkb
.83c7	85 02		sta $02		                sta tmp1                ; address of mystery string in tmp1
.83c9	a9 03		lda #$03	                lda #>tkb
.83cb	90 01		bcc $83ce	                bcc +
.83cd	1a		inc a		                inc a
.83ce					+
.83ce	85 03		sta $03		                sta tmp1+1
.83d0					_find_proc_loop:
.83d0	a9 04		lda #$04	                lda #4
.83d2	18		clc		                clc
.83d3	65 00		adc $00		                adc tmp0
.83d5	85 04		sta $04		                sta tmp2                ; LSB address of the known string in tmp2
.83d7	a5 01		lda $01		                lda tmp0+1              ; MSB
.83d9	85 05		sta $05		                sta tmp2+1
.83db	90 02		bcc $83df	                bcc +
.83dd	e6 05		inc $05		                inc tmp2+1
.83df					+
.83df	a0 00		ldy #$00	                ldy #0
.83e1					_compare_loop:
.83e1	b1 02		lda ($02),y	                lda (tmp1),y            ; char of the mystery string
.83e3	c9 84		cmp #$84	                cmp #T_ID_END
.83e5	f0 0b		beq $83f2	                beq _mystery_string_done
.83e7	d1 04		cmp ($04),y	                cmp (tmp2),y            ; known character string
.83e9	d0 0b		bne $83f6	                bne _next_entry         ; chars don't match, next entry
.83eb	b1 04		lda ($04),y	                lda (tmp2),y
.83ed	f0 07		beq $83f6	                beq _next_entry
.83ef	c8		iny		                iny
.83f0	80 ef		bra $83e1	                bra _compare_loop
.83f2					_mystery_string_done:
.83f2	b1 04		lda ($04),y	                lda (tmp2),y
.83f4	f0 28		beq $841e	                beq _found_id           ; strings are both over, it's a match!
.83f6					_next_entry:
.83f6	b2 00		lda ($00)	                lda (tmp0)
.83f8	48		pha		                pha
.83f9	a0 01		ldy #$01	                ldy #1
.83fb	b1 00		lda ($00),y	                lda (tmp0),y
.83fd	85 01		sta $01		                sta tmp0+1
.83ff	68		pla		                pla
.8400	85 00		sta $00		                sta tmp0
.8402	05 01		ora $01		                ora tmp0+1
.8404	d0 ca		bne $83d0	                bne _find_proc_loop   ; concentrate and try again, Mrs. Dunham
.8406					_bad_word:
.8406	a9 00		lda #$00	                lda #str_unbound                ; "Unbound variable: "
.8408	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.840b					_bad_word_loop:
.840b	bd 00 03	lda $0300,x	                lda tkb,x
.840e	c9 84		cmp #$84	                cmp #T_ID_END
.8410	f0 06		beq $8418	                beq _bad_word_done
.8412	20 d7 85	jsr $85d7	                jsr help_emit_a
.8415	e8		inx		                inx
.8416	80 f3		bra $840b	                bra _bad_word_loop
.8418					_bad_word_done:
.8418	20 d5 85	jsr $85d5	                jsr help_emit_lf
.841b	4c 2d 80	jmp $802d	                jmp repl
.841e					_found_id:
.841e	98		tya		                tya
.841f	86 02		stx $02		                stx tmp1
.8421	18		clc		                clc
.8422	65 02		adc $02		                adc tmp1
.8424	aa		tax		                tax
.8425	a0 02		ldy #$02	                ldy #2
.8427	b1 00		lda ($00),y	                lda (tmp0),y    ; LSB of process object
.8429	48		pha		                pha
.842a	c8		iny		                iny
.842b	b1 00		lda ($00),y	                lda (tmp0),y    ; MSB with tag, goes in A
.842d	7a		ply		                ply             ; LSB goes in Y
.842e	20 57 84	jsr $8457	                jsr parser_add_object_to_ast
.8431	4c 57 82	jmp $8257	                jmp parser_loop
.8434					parser_not_id:
.8434					paser_bad_token:
.8434	48		pha		                pha                             ; save the evil token
.8435	20 d5 85	jsr $85d5	                jsr help_emit_lf
.8438	a9 04		lda #$04	                lda #str_bad_token
.843a	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.843d					parser_common_panic:
.843d	68		pla		                pla
.843e	20 be 85	jsr $85be	                jsr help_byte_to_ascii          ; print bad token as hex number
.8441	20 d5 85	jsr $85d5	                jsr help_emit_lf
.8444	4c 2d 80	jmp $802d	                jmp repl
.8447					parser_bad_digit:
.8447	48		pha		                pha                             ; save the bad digit
.8448	a9 06		lda #$06	                lda #str_bad_number
.844a	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.844d	80 ee		bra $843d	                bra parser_common_panic
.844f					function_not_available:
.844f	a9 08		lda #$08	                lda #str_cant_yet
.8451	20 f7 85	jsr $85f7	                jsr help_print_string
.8454	4c 2d 80	jmp $802d	                jmp repl
.8457					parser_add_object_to_ast:
.8457	da		phx		                phx             ; save index to token buffer
.8458	48		pha		                pha             ; save MSB of the object (with tag)
.8459	5a		phy		                phy             ; save LSB of the object to top of stack
.845a	a5 18		lda $18		                lda hp_ast
.845c	85 00		sta $00		                sta tmp0
.845e	a5 19		lda $19		                lda hp_ast+1
.8460	85 01		sta $01		                sta tmp0+1
.8462	a9 00		lda #$00	                lda <#OC_EMPTY_LIST
.8464	a0 00		ldy #$00	                ldy #0
.8466	91 18		sta ($18),y	                sta (hp_ast),y
.8468	c8		iny		                iny
.8469	a9 00		lda #$00	                lda >#OC_EMPTY_LIST
.846b	91 18		sta ($18),y	                sta (hp_ast),y
.846d	c8		iny		                iny
.846e	68		pla		                pla             ; retrieve LSB of object, was in Y
.846f	91 18		sta ($18),y	                sta (hp_ast),y
.8471	c8		iny		                iny
.8472	68		pla		                pla             ; retrieve MSB (with tag), was in A
.8473	91 18		sta ($18),y	                sta (hp_ast),y
.8475	c8		iny		                iny
.8476	98		tya		                tya
.8477	18		clc		                clc
.8478	65 18		adc $18		                adc hp_ast
.847a	85 18		sta $18		                sta hp_ast
.847c	90 02		bcc $8480	                bcc _store_address
.847e	e6 19		inc $19		                inc hp_ast+1
.8480					_store_address:
.8480	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp_ast, which is just an addr
.8482	29 0f		and #$0f	                and #$0F        ; mask whatever the high nibble was (paranoid)
.8484	09 80		ora #$80	                ora #OT_PAIR
.8486	a0 01		ldy #$01	                ldy #1
.8488	91 16		sta ($16),y	                sta (astp),y
.848a	a5 00		lda $00		                lda tmp0        ; original LSB of hp_ast
.848c	92 16		sta ($16)	                sta (astp)
.848e	85 16		sta $16		                sta astp        ; still have original LSB
.8490	a5 01		lda $01		                lda tmp0+1
.8492	85 17		sta $17		                sta astp+1      ; MSB, was tmp0+1
.8494	fa		plx		                plx             ; get back index for token buffer
.8495	60		rts		                rts
=$0000					OC_EMPTY_LIST     = $0000   ; end of list terminating object "()"
=$00aa					OC_PARENS_START   = $00AA   ; parens open '('
=$00ff					OC_PARENS_END     = $00FF   ; parens close ')'
=$1fff					OC_TRUE           = $1FFF   ; true bool #t, immediate
=$1000					OC_FALSE          = $1000   ; false bool #f, immediate
=$f000					OC_PROC_APPLY     = $F000   ; primitive procedure (apply)
=$f002					OC_PROC_QUOTE     = $F002   ; primitive procedure (quote)
.8496					parser_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.8496					eval:
.8496	20 4b 87	jsr $874b	                jsr debug_dump_ast
.8499	a5 15		lda $15		                lda rsn_ast             ; RAM segment nibble, default $10
.849b	a0 02		ldy #$02	                ldy #2                  ; by definition
.849d	20 8c 86	jsr $868c	                jsr help_walk_init      ; returns car in A and Y
.84a0					eval_loop:
.84a0	08		php		                php
.84a1	29 f0		and #$f0	                and #$f0
.84a3	4a		lsr a		                lsr
.84a4	4a		lsr a		                lsr
.84a5	4a		lsr a		                lsr             ; fourth LSR and ASL cancle each other out
.84a6	aa		tax		                tax
.84a7	7c da 84	jmp ($84da,x)	                jmp (eval_table,x)
.84aa					eval_next:
.84aa	28		plp		                plp
.84ab	b0 4d		bcs $84fa	                bcs eval_done           ; probably later a JMP
.84ad					eval_next_no_check:
.84ad	20 92 86	jsr $8692	                jsr help_walk_next
.84b0	80 ee		bra $84a0	                bra eval_loop
.84b2					eval_0_meta:
.84b2	c0 aa		cpy #$aa	                cpy #$AA        ; hard-coded in parser.asm
.84b4	d0 18		bne $84ce	                bne _not_parens_start
.84b6	20 92 86	jsr $8692	                jsr help_walk_next
.84b9	29 f0		and #$f0	                and #$F0
.84bb	c9 f0		cmp #$f0	                cmp #OT_PROC
.84bd	d0 03		bne $84c2	                bne _not_a_proc
.84bf	4c bf 86	jmp $86bf	                jmp proc_apply
.84c2					_not_a_proc:
.84c2	c9 e0		cmp #$e0	                cmp #OT_SPEC
.84c4	d0 00		bne $84c6	                bne _not_a_spec
.84c6					_not_a_spec:
.84c6	a9 0f		lda #$0f	                lda #str_cant_apply
.84c8	20 f7 85	jsr $85f7	                jsr help_print_string
.84cb	4c 2d 80	jmp $802d	                jmp repl
.84ce					_not_parens_start:
.84ce	c0 ff		cpy #$ff	                cpy #$FF        ; hard-coded in parser.asm
.84d0	d0 00		bne $84d2	                bne _not_parens_end
.84d2					_not_parens_end:
.84d2	80 d6		bra $84aa	                bra eval_next           ; TODO temporary
.84d4					eval_1_bool:
.84d4					eval_2_fixnum:
.84d4					eval_3_bignum:
.84d4					eval_4_char:
.84d4					eval_5_string:
.84d4	80 d4		bra $84aa	                bra eval_next           ; paranoid, never reached
.84d6					eval_6_UNDEFINED:
.84d6					eval_7_UNDEFINED:
.84d6					eval_8_pair:
.84d6	80 d2		bra $84aa	                bra eval_next   ; paranoid, currently not reached
.84d8					eval_9_UNDEFINED:
.84d8					eval_A_UNDEFINED:
.84d8					eval_B_UNDEFINED:
.84d8					eval_C_UNDEFINED:
.84d8					eval_D_UNDEFINED:
.84d8					eval_e_spec:
.84d8					eval_f_proc:
.84d8	80 d0		bra $84aa	                bra eval_next   ; paranoid, never reached
.84da					eval_table:
>84da	b2 84 aa 84 aa 84 aa 84		        .word eval_0_meta, eval_next, eval_next, eval_next
>84e2	aa 84 aa 84 aa 84 aa 84		        .word eval_next, eval_next, eval_next, eval_next
>84ea	d6 84 aa 84 aa 84 aa 84		        .word eval_8_pair, eval_next, eval_next, eval_next
>84f2	aa 84 aa 84 d8 84 d8 84		        .word eval_next, eval_next, eval_e_spec, eval_f_proc
.84fa					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.84fa					printer:
.84fa	20 4b 87	jsr $874b	                jsr debug_dump_ast
.84fd	a5 15		lda $15		                lda rsn_ast     ; RAM segment nibble
.84ff	a0 02		ldy #$02	                ldy #02         ; by definition
.8501	20 8c 86	jsr $868c	                jsr help_walk_init
.8504					printer_loop:
.8504	08		php		                php
.8505	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.8507	4a		lsr a		                lsr
.8508	4a		lsr a		                lsr
.8509	4a		lsr a		                lsr     ; Fourth LSR and ASL cancle each other
.850a	aa		tax		                tax
.850b	20 d5 85	jsr $85d5	                jsr help_emit_lf
.850e	7c 88 85	jmp ($8588,x)	                jmp (printer_table,x)
.8511					printer_next:
.8511	28		plp		                plp                     ; from PHP
.8512	90 03		bcc $8517	                bcc +
.8514	4c a8 85	jmp $85a8	                jmp printer_done        ; Too far for BCS
.8517					+
.8517	20 92 86	jsr $8692	                jsr help_walk_next
.851a	80 e8		bra $8504	                bra printer_loop
.851c					printer_0_meta:
.851c	a5 21		lda $21		                lda walk_car
.851e	05 22		ora $22		                ora walk_car+1
.8520	d0 11		bne $8533	                bne _not_empty_list_car
.8522	a9 28		lda #$28	                lda #'('
.8524	20 d7 85	jsr $85d7	                jsr help_emit_a
.8527	a9 29		lda #$29	                lda #')'
.8529	20 d7 85	jsr $85d7	                jsr help_emit_a
.852c	a9 20		lda #$20	                lda #AscSP
.852e	20 d7 85	jsr $85d7	                jsr help_emit_a
.8531	80 de		bra $8511	                bra printer_next
.8533					_not_empty_list_car:
.8533	80 dc		bra $8511	                bra printer_next
.8535					printer_1_bool:
.8535	a5 22		lda $22		                lda walk_car+1          ; MSB of car
.8537	29 0f		and #$0f	                and #$0F                ; Get rid of tag
.8539	05 21		ora $21		                ora walk_car
.853b	d0 04		bne $8541	                bne _bool_true          ; not a zero means true
.853d	a9 03		lda #$03	                lda #str_false
.853f	80 02		bra $8543	                bra _bool_printer
.8541					_bool_true:
.8541	a9 02		lda #$02	                lda #str_true
.8543					_bool_printer:
.8543	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.8546	80 c9		bra $8511	                bra printer_next
.8548					printer_2_fixnum:
.8548	a5 22		lda $22		                lda walk_car+1          ; MSB
.854a	29 0f		and #$0f	                and #$0F                ; Mask tag
.854c	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.854f	98		tya		                tya                     ; still Y
.8550	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.8553	80 bc		bra $8511	                bra printer_next
.8555					printer_3_bignum:
.8555					printer_4_char:
.8555					printer_5_string:
.8555	a5 22		lda $22		                lda walk_car+1          ; MSB
.8557	29 0f		and #$0f	                and #$0F                ; mask tag
.8559	05 1a		ora $1a		                ora rsn_str             ; merge with section nibble instead
.855b	85 05		sta $05		                sta tmp2+1
.855d	84 04		sty $04		                sty tmp2                ; LSB
.855f	a0 00		ldy #$00	                ldy #0
.8561					_string_loop:
.8561	b1 04		lda ($04),y	                lda (tmp2),y
.8563	f0 ac		beq $8511	                beq printer_next       ; string is zero terminated
.8565	20 d7 85	jsr $85d7	                jsr help_emit_a
.8568	c8		iny		                iny
.8569	80 f6		bra $8561	                bra _string_loop
.856b					printer_6_var:
.856b					printer_7_UNDEFINED:
.856b					printer_8_pair:
.856b					printer_9_UNDEFINED:
.856b					printer_a_UNDEFINED:
.856b					printer_b_UNDEFINED:
.856b					printer_c_UNDEFINED:
.856b					printer_d_UNDEFINED:
.856b					printer_e_special:
.856b	a9 0e		lda #$0e	                lda #str_special_prt            ; "#<special:$"
.856d	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.8570	80 05		bra $8577	                bra print_common_exec
.8572					printer_f_proc:
.8572	a9 0d		lda #$0d	                lda #str_proc_prt               ; "#<procedure:$"
.8574	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.8577					print_common_exec:
.8577	a5 22		lda $22		                lda walk_car+1
.8579	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.857c	a5 21		lda $21		                lda walk_car
.857e	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.8581	a9 3e		lda #$3e	                lda #'>'
.8583	20 d7 85	jsr $85d7	                jsr help_emit_a
.8586	80 89		bra $8511	                bra printer_next
.8588					printer_table:
>8588	1c 85 35 85 48 85 55 85		        .word printer_0_meta, printer_1_bool, printer_2_fixnum, printer_3_bignum
>8590	55 85 55 85 6b 85 11 85		        .word printer_4_char, printer_5_string, printer_6_var, printer_next
>8598	6b 85 11 85 11 85 11 85		        .word printer_8_pair, printer_next, printer_next, printer_next
>85a0	11 85 11 85 6b 85 72 85		        .word printer_next, printer_next, printer_e_special, printer_f_proc
.85a8					printer_done:
.85a8	20 d5 85	jsr $85d5	                jsr help_emit_lf

;******  Return to file: platforms/../cthulhu.asm

.85ab					repl_empty_line:
.85ab	4c 2d 80	jmp $802d	                jmp repl
.85ae					repl_quit:
.85ae	20 d5 85	jsr $85d5	                jsr help_emit_lf
.85b1	a9 09		lda #$09	                lda #str_end_input
.85b3	20 f7 85	jsr $85f7	                jsr help_print_string
.85b6	a9 0a		lda #$0a	                lda #str_chant
.85b8	20 f7 85	jsr $85f7	                jsr help_print_string
.85bb	4c 2b f0	jmp $f02b	                jmp platform_quit

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.85be					help_byte_to_ascii:
.85be	48		pha		                pha
.85bf	4a		lsr a		                lsr             ; convert high nibble first
.85c0	4a		lsr a		                lsr
.85c1	4a		lsr a		                lsr
.85c2	4a		lsr a		                lsr
.85c3	20 c7 85	jsr $85c7	                jsr help_nibble_to_ascii
.85c6	68		pla		                pla
.85c7					help_nibble_to_ascii:
.85c7	29 0f		and #$0f	                and #$0F
.85c9	09 30		ora #$30	                ora #'0'
.85cb	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.85cd	90 02		bcc $85d1	                bcc +
.85cf	69 06		adc #$06	                adc #$06
.85d1	4c d7 85	jmp $85d7	+               jmp help_emit_a       ; JSR/RTS
.85d4					help_to_lowercase:
.85d4	60		rts		                rts
.85d5					help_emit_lf:
.85d5	a9 0a		lda #$0a	                lda #AscLF
.85d7					help_emit_a:
.85d7	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.85da					help_key_a:
.85da	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.85dd					help_print_string_no_lf:
.85dd	0a		asl a		                asl
.85de	a8		tay		                tay
.85df	b9 85 88	lda $8885,y	                lda string_table,y
.85e2	85 00		sta $00		                sta tmp0                ; LSB
.85e4	c8		iny		                iny
.85e5	b9 85 88	lda $8885,y	                lda string_table,y
.85e8	85 01		sta $01		                sta tmp0+1              ; MSB
.85ea					help_print_common:
.85ea	a0 00		ldy #$00	                ldy #0
.85ec					_loop:
.85ec	b1 00		lda ($00),y	                lda (tmp0),y
.85ee	f0 06		beq $85f6	                beq _done               ; strings are zero-terminated
.85f0	20 d7 85	jsr $85d7	                jsr help_emit_a         ; allows vectoring via output
.85f3	c8		iny		                iny
.85f4	80 f6		bra $85ec	                bra _loop
.85f6					_done:
.85f6	60		rts		                rts
.85f7					help_print_string:
.85f7	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.85fa	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.85fc	4c d7 85	jmp $85d7	                jmp help_emit_a         ; JSR/RTS
.85ff					help_is_decdigit:
.85ff	c9 30		cmp #$30	                cmp #'0'
.8601	90 07		bcc $860a	                bcc _below_zero         ; A is < '0'
.8603	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.8605	b0 02		bcs $8609	                bcs _above_nine
.8607	38		sec		                sec
.8608	60		rts		                rts
.8609					_above_nine:
.8609	18		clc		                clc
.860a					_below_zero:
.860a	60		rts		                rts
.860b					help_is_delimiter:
.860b	20 4d 86	jsr $864d	                jsr help_is_whitespace
.860e	b0 12		bcs $8622	                bcs _delimiter_done
.8610	18		clc		                clc
.8611	da		phx		                phx
.8612	ae de 89	ldx $89de	                ldx s_delimiters        ; length of delimiter chars string
.8615					_delimiter_loop:
.8615	dd de 89	cmp $89de,x	                cmp s_delimiters,X
.8618	f0 06		beq $8620	                beq _found_delimiter
.861a	ca		dex		                dex
.861b	d0 f8		bne $8615	                bne _delimiter_loop
.861d	fa		plx		                plx
.861e	18		clc		                clc
.861f	60		rts		                rts
.8620					_found_delimiter:
.8620	fa		plx		                plx
.8621					_is_delimiter:
.8621	38		sec		                sec
.8622					_delimiter_done:
.8622	60		rts		                rts
.8623					help_is_extended_alpha:
.8623	18		clc		                clc
.8624	da		phx		                phx
.8625	ae ea 89	ldx $89ea	                ldx s_extended          ; length of extended chars string
.8628					_alpha_loop:
.8628	dd ea 89	cmp $89ea,x	                cmp s_extended,X
.862b	f0 06		beq $8633	                beq _found_extended
.862d	ca		dex		                dex
.862e	d0 f8		bne $8628	                bne _alpha_loop
.8630	fa		plx		                plx
.8631	18		clc		                clc
.8632	60		rts		                rts
.8633					_found_extended:
.8633	fa		plx		                plx
.8634					_is_extrended:
.8634	38		sec		                sec
.8635					_extended_done:
.8635	60		rts		                rts
.8636					help_is_letter:
.8636	c9 41		cmp #$41	                cmp #'A'
.8638	90 0c		bcc $8646	                bcc _not_letter       ; too low
.863a	c9 5b		cmp #$5b	                cmp #'Z'+1
.863c	90 0a		bcc $8648	                bcc _uppercase
.863e	c9 61		cmp #$61	                cmp #'a'
.8640	90 04		bcc $8646	                bcc _not_letter       ; between upper- and lowercase
.8642	c9 7b		cmp #$7b	                cmp #'z'+1
.8644	90 05		bcc $864b	                bcc _is_letter
.8646					_not_letter:
.8646	18		clc		                clc
.8647	60		rts		                rts
.8648					_uppercase:
.8648	18		clc		                clc
.8649	69 20		adc #$20	                adc #'a'-'A'    ; 32, if you're curious
.864b					_is_letter:
.864b	38		sec		                sec             ; TODO testing
.864c	60		rts		                rts
.864d					help_is_whitespace:
.864d	38		sec		                sec             ; default is whitespace
.864e	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.8650	f0 11		beq $8663	                beq _done
.8652	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.8654	f0 0d		beq $8663	                beq _done
.8656	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.8658	f0 09		beq $8663	                beq _done
.865a	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.865c	f0 05		beq $8663	                beq _done
.865e	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.8660	f0 01		beq $8663	                beq _done
.8662	18		clc		                clc             ; If we end up here, it's not whitespace
.8663					_done:
.8663	60		rts		                rts
.8664					help_hexascii_to_value:
.8664	20 ff 85	jsr $85ff	                jsr help_is_decdigit
.8667	90 05		bcc $866e	                bcc _see_if_letter
.8669	38		sec		                sec
.866a	e9 30		sbc #$30	                sbc #'0'
.866c	80 0f		bra $867d	                bra _done
.866e					_see_if_letter:
.866e	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.8670	90 17		bcc $8689	                bcc _error
.8672	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.8674	b0 13		bcs $8689	                bcs _error
.8676	c9 61		cmp #$61	                cmp #'a'
.8678	90 06		bcc $8680	                bcc _uppercase
.867a	38		sec		                sec
.867b	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.867d					_done:
.867d	29 0f		and #$0f	                and #$0F        ; paranoid
.867f	60		rts		                rts
.8680					_uppercase:
.8680	c9 47		cmp #$47	                cmp #'G'
.8682	b0 05		bcs $8689	                bcs _error
.8684	38		sec		                sec
.8685	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.8687	80 f4		bra $867d	                bra _done
.8689					_error:
.8689	a9 80		lda #$80	                lda #$80
.868b	60		rts		                rts
.868c					help_walk_init:
.868c	84 1f		sty $1f		                sty walk_curr           ; LSB
.868e	85 20		sta $20		                sta walk_curr+1         ; MSB
.8690	80 10		bra $86a2	                bra help_walk_common
.8692					help_walk_next:
.8692	b2 1f		lda ($1f)	                lda (walk_curr)
.8694	48		pha		                pha
.8695	a0 01		ldy #$01	                ldy #1
.8697	b1 1f		lda ($1f),y	                lda (walk_curr),y       ; MSB
.8699	29 0f		and #$0f	                and #$0F                ; mask the pair tag
.869b	05 15		ora $15		                ora rsn_ast             ; replace by nibble for the AST
.869d	85 20		sta $20		                sta walk_curr+1
.869f	68		pla		                pla
.86a0	85 1f		sta $1f		                sta walk_curr           ; LSB
.86a2					help_walk_common:
.86a2	b2 1f		lda ($1f)	                lda (walk_curr)
.86a4	85 23		sta $23		                sta walk_cdr            ; LSB
.86a6	a0 01		ldy #$01	                ldy #1
.86a8	b1 1f		lda ($1f),y	                lda (walk_curr),y
.86aa	85 24		sta $24		                sta walk_cdr+1          ; MSB
.86ac	c8		iny		                iny
.86ad	18		clc		                clc                     ; default is not last pair
.86ae	05 23		ora $23		                ora walk_cdr            ; LSB
.86b0	d0 01		bne $86b3	                bne _store_car
.86b2	38		sec		                sec                     ; last pair, mark by setting carry flag
.86b3					_store_car:
.86b3	b1 1f		lda ($1f),y	                lda (walk_curr),y       ; LSB
.86b5	85 21		sta $21		                sta walk_car
.86b7	48		pha		                pha                     ; We return this later in Y
.86b8	c8		iny		                iny
.86b9	b1 1f		lda ($1f),y	                lda (walk_curr),y       ; MSB
.86bb	85 22		sta $22		                sta walk_car+1
.86bd	7a		ply		                ply
.86be	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm

.86bf					proc_apply:
.86bf	b9 e7 86	lda $86e7,y	                lda exec_table_lsb,y
.86c2	85 0a		sta $0a		                sta jump
.86c4	b9 f1 86	lda $86f1,y	                lda exec_table_msb,y
.86c7	85 0b		sta $0b		                sta jump+1
.86c9	6c 0a 00	jmp ($000a)	                jmp (jump)
.86cc					proc_car:
.86cc					proc_cdr:
.86cc					proc_cons:
.86cc	4c aa 84	jmp $84aa	                jmp eval_next                   ; TODO or eval_done?
.86cf					proc_exit:
.86cf	a9 0c		lda #$0c	                lda #str_exit_kill              ; "Kill Scheme (y or n)?"
.86d1	20 dd 85	jsr $85dd	                jsr help_print_string_no_lf
.86d4	20 da 85	jsr $85da	                jsr help_key_a
.86d7	c9 79		cmp #$79	                cmp #'y'                        ; only "y" ends
.86d9	f0 03		beq $86de	                beq _done
.86db	4c aa 84	jmp $84aa	                jmp eval_next                   ; TODO or eval_done?
.86de					_done:
.86de	4c ae 85	jmp $85ae	                jmp repl_quit
.86e1					proc_newline:
.86e1	20 d5 85	jsr $85d5	                jsr help_emit_lf
.86e4	4c aa 84	jmp $84aa	                jmp eval_next                   ; TODO check this
.86e7					proc_not:
.86e7					spec_and:
.86e7					spec_begin:
.86e7					spec_define:
.86e7					spec_if:
.86e7					spec_lambda:
.86e7					spec_let:
.86e7					spec_or:
.86e7					spec_quote:
.86e7					spec_set_e:
.86e7					exec_table_lsb:
>86e7	bf				        .byte <proc_apply       ; 00
>86e8	e7				        .byte <spec_quote       ; 01
>86e9	cf				        .byte <proc_exit        ; 02
>86ea	e1				        .byte <proc_newline     ; 03
>86eb	cc				        .byte <proc_car         ; 04
>86ec	cc				        .byte <proc_cdr         ; 05
>86ed	cc				        .byte <proc_cons        ; 06
>86ee	e7				        .byte <spec_define      ; 07
>86ef	e7				        .byte <spec_if          ; 08
>86f0	e7				        .byte <proc_not         ; 09
.86f1					exec_table_msb:
>86f1	86				        .byte >proc_apply       ; 00
>86f2	86				        .byte >spec_quote       ; 01
>86f3	86				        .byte >proc_exit        ; 02
>86f4	86				        .byte >proc_newline     ; 03
>86f5	86				        .byte >proc_car         ; 04
>86f6	86				        .byte >proc_cdr         ; 05
>86f7	86				        .byte >proc_cons        ; 06
>86f8	86				        .byte >spec_define      ; 07
>86f9	86				        .byte >spec_if          ; 08
>86fa	86				        .byte >proc_not         ; 09
.86fb					proc_char_whitespace_p:
.86fb					proc_display:
.86fb					proc_read:
.86fb					proc_read_char:
.86fb					proc_read_line:
.86fb					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../compounds.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.86fb					debug_dump_input:
.86fb	20 d5 85	jsr $85d5	                jsr help_emit_lf
.86fe	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.8700	20 99 87	jsr $8799	                jsr debug_print_string_no_lf
.8703	a2 00		ldx #$00	                ldx #0
.8705					-
.8705	bd 00 02	lda $0200,x	                lda cib,x
.8708	f0 0b		beq $8715	                beq _done
.870a	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.870d	e8		inx		                inx
.870e	a9 20		lda #$20	                lda #' '
.8710	20 d7 85	jsr $85d7	                jsr help_emit_a
.8713	80 f0		bra $8705	                bra -
.8715					_done:
.8715	4c be 85	jmp $85be	                jmp help_byte_to_ascii          ; JSR/RTS
.8718					debug_dump_token:
.8718	20 d5 85	jsr $85d5	                jsr help_emit_lf
.871b	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.871d	20 99 87	jsr $8799	                jsr debug_print_string_no_lf
.8720	a2 00		ldx #$00	                ldx #0
.8722					-
.8722	bd 00 03	lda $0300,x	                lda tkb,x
.8725	c9 00		cmp #$00	                cmp #T_END
.8727	f0 0d		beq $8736	                beq _done
.8729	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.872c	e8		inx		                inx
.872d	a9 20		lda #$20	                lda #' '
.872f	20 d7 85	jsr $85d7	                jsr help_emit_a
.8732	e4 13		cpx $13		                cpx tkbp
.8734	d0 ec		bne $8722	                bne -
.8736					_done:
.8736	4c be 85	jmp $85be	                jmp help_byte_to_ascii          ; JSR/RTS
.8739					debug_dump_hp:
.8739	20 d5 85	jsr $85d5	                jsr help_emit_lf
.873c	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.873e	20 99 87	jsr $8799	                jsr debug_print_string_no_lf
.8741	a5 19		lda $19		                lda hp_ast+1
.8743	20 be 85	jsr $85be	                jsr help_byte_to_ascii
.8746	a5 18		lda $18		                lda hp_ast
.8748	4c be 85	jmp $85be	                jmp help_byte_to_ascii          ; JSR/RTS
.874b					debug_dump_ast:
.874b	20 d5 85	jsr $85d5	                jsr help_emit_lf
.874e	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST root: "
.8750	20 99 87	jsr $8799	                jsr debug_print_string_no_lf
.8753	a5 15		lda $15		                lda rsn_ast             ; RAM segment nibble
.8755	48		pha		                pha                     ; save MSB
.8756	20 be 85	jsr $85be	                jsr help_byte_to_ascii  ; print MSB
.8759	a0 02		ldy #$02	                ldy #2                  ; By definition
.875b	98		tya		                tya
.875c	20 be 85	jsr $85be	                jsr help_byte_to_ascii  ; print LSB
.875f	68		pla		                pla                     ; get MSB back
.8760	20 8c 86	jsr $868c	                jsr help_walk_init
.8763					_debug_dump_ast_loop:
.8763	08		php		                php
.8764	a9 04		lda #$04	                lda #strd_dump_arrow            ; "--> "
.8766	20 99 87	jsr $8799	                jsr debug_print_string_no_lf
.8769	a5 24		lda $24		                lda walk_cdr+1
.876b	20 be 85	jsr $85be	                jsr help_byte_to_ascii          ; MSB
.876e	a5 23		lda $23		                lda walk_cdr
.8770	20 be 85	jsr $85be	                jsr help_byte_to_ascii          ; LSB
.8773	a9 3a		lda #$3a	                lda #':'
.8775	20 d7 85	jsr $85d7	                jsr help_emit_a
.8778	a5 22		lda $22		                lda walk_car+1
.877a	20 be 85	jsr $85be	                jsr help_byte_to_ascii          ; MSB
.877d	a5 21		lda $21		                lda walk_car
.877f	20 be 85	jsr $85be	                jsr help_byte_to_ascii          ; LSB
.8782	28		plp		                plp
.8783	b0 05		bcs $878a	                bcs _debug_dump_ast_done
.8785	20 92 86	jsr $8692	                jsr help_walk_next
.8788	80 d9		bra $8763	                bra _debug_dump_ast_loop
.878a					_debug_dump_ast_done:
.878a	20 d5 85	jsr $85d5	                jsr help_emit_lf
.878d	60		rts		                rts
.878e					debug_emit_a:
.878e	48		pha		                pha
.878f	20 d5 85	jsr $85d5	                jsr help_emit_lf
.8792	68		pla		                pla
.8793	20 d7 85	jsr $85d7	                jsr help_emit_a
.8796	4c d5 85	jmp $85d5	                jmp help_emit_lf        ; JSR/RTS
.8799					debug_print_string_no_lf:
.8799	0a		asl a		                asl
.879a	a8		tay		                tay
.879b	b9 1b 88	lda $881b,y	                lda sd_table,y
.879e	85 00		sta $00		                sta tmp0                ; LSB
.87a0	c8		iny		                iny
.87a1	b9 1b 88	lda $881b,y	                lda sd_table,y
.87a4	85 01		sta $01		                sta tmp0+1              ; MSB
.87a6					debug_print_common:
.87a6	a0 00		ldy #$00	                ldy #0
.87a8					_loop:
.87a8	b1 00		lda ($00),y	                lda (tmp0),y
.87aa	f0 06		beq $87b2	                beq _done               ; strings are zero-terminated
.87ac	20 d7 85	jsr $85d7	                jsr help_emit_a         ; allows vectoring via output
.87af	c8		iny		                iny
.87b0	80 f6		bra $87a8	                bra _loop
.87b2					_done:
.87b2	60		rts		                rts
.87b3					debug_print_string:
.87b3	20 99 87	jsr $8799	                jsr debug_print_string_no_lf
.87b6	4c d5 85	jmp $85d5	                jmp help_emit_lf        ; JSR/RTS
=0					strd_dump_token  = 0
=1					strd_dump_ast    = 1
=2					strd_dump_hp     = 2
=3					strd_dump_input  = 3
=4					strd_dump_arrow  = 4
=5					strd_dump_strtbl = 5
=6					strd_dump_str    = 6
>87b9	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>87c1	66 66 65 72 3a 20 00
>87c8	41 53 54 20 72 6f 6f 74		s_dump_ast:     .null   "AST root: "
>87d0	3a 20 00
>87d3	41 53 54 20 68 65 61 70		s_dump_hp:      .null   "AST heap pointer: "
>87db	20 70 6f 69 6e 74 65 72 3a 20 00
>87e6	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>87ee	66 66 65 72 3a 20 00
>87f5	20 2d 2d 3e 20 00		s_dump_arrow:   .null   " --> "
>87fb	53 74 72 69 6e 67 20 74		s_dump_strtbl:  .null   "String table: "
>8803	61 62 6c 65 3a 20 00
>880a	53 74 72 69 6e 67 20 70		s_dump_str:     .null   "String pointer: "
>8812	6f 69 6e 74 65 72 3a 20 00
.881b					sd_table:
>881b	b9 87 c8 87 d3 87 e6 87		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input    ; 0-3
>8823	f5 87 fb 87 0a 88		        .word s_dump_arrow, s_dump_strtbl, s_dump_str              ; 4-7

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					jump:    .word ?     ; target for indirect jumps, used by evaluator
>000c					input_f  .byte ?     ; input flag for Reader, see details there
>000d					ciblen:  .word ?     ; current size of input buffer
>000f					cibp:    .word ?     ; index of current char in input buffer
>0011					tkblen:  .word ?     ; current size of the token buffer
>0013					tkbp:    .word ?     ; index of current token in token buffer
>0015					rsn_ast  .byte ?     ; RAM segment nibble for AST segment (default 1)
>0016					astp     .word ?     ; pointer to current entry in AST
>0018					hp_ast   .word ?     ; next free byte in AST RAM segment
>001a					rsn_str  .byte ?     ; RAM segment nibble for strings (default 2)
>001b					strp     .word ?     ; pointer to current entry in string table
>001d					hp_str   .word ?     ; next free byte in string RAM segment
>001f					walk_curr   .word ?  ; Pointer (addr) to current pair in AST
>0021					walk_car    .word ?  ; Contents of current pair's car field
>0023					walk_cdr    .word ?  ; Contents of current pair's cdr field
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00   ; used for the empty list and terminators
=$10					OT_BOOL         = $10   ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20   ; used for fixed numbers; immediate
=$30					OT_BIGNUM       = $30   ; reserved for bignum
=$40					OT_CHAR         = $40   ; reserved for chars; immediate
=$50					OT_STRING       = $50   ; used for strings; interned
=$60					OT_VAR          = $60   ; used for variables
=$70					ot_undefined_07 = $70
=$80					OT_PAIR         = $80   ; used for pairs
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					OT_SPEC         = $e0   ; special forms such as (lambda) or (if)
=$f0					OT_PROC         = $f0   ; built-in procedures

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8829					proc_headers:
.8829					h_proc_apply:
>8829	33 88				        .word h_spec_quote      ; link to next entry in list (as 16-bit addr)
>882b	00				        .byte 00                ; offset in jump table  (LSB)
>882c	f0				        .byte OT_PROC           ; object tag
>882d	61 70 70 6c 79 00		        .null "apply"           ; lower-case string, zero terminated
.8833					h_spec_quote:
>8833	3d 88				        .word h_proc_car
>8835	01				        .byte 01
>8836	e0				        .byte OT_SPEC
>8837	71 75 6f 74 65 00		        .null "quote"
.883d					h_proc_car:
>883d	45 88				        .word h_proc_cdr
>883f	04				        .byte 04
>8840	f0				        .byte OT_PROC
>8841	63 61 72 00			        .null "car"
.8845					h_proc_cdr:
>8845	4d 88				        .word h_proc_cons
>8847	05				        .byte 05
>8848	f0				        .byte OT_PROC
>8849	63 64 72 00			        .null "cdr"
.884d					h_proc_cons:
>884d	56 88				        .word h_spec_define
>884f	06				        .byte 06
>8850	f0				        .byte OT_PROC
>8851	63 6f 6e 73 00			        .null "cons"
.8856					h_spec_define:
>8856	61 88				        .word h_spec_if
>8858	07				        .byte 07
>8859	e0				        .byte OT_SPEC
>885a	64 65 66 69 6e 65 00		        .null "define"
.8861					h_spec_if:
>8861	68 88				        .word h_proc_newline
>8863	08				        .byte 08
>8864	e0				        .byte OT_SPEC
>8865	69 66 00			        .null "if"
.8868					h_proc_newline:
>8868	74 88				        .word h_proc_not
>886a	03				        .byte 03
>886b	f0				        .byte OT_PROC
>886c	6e 65 77 6c 69 6e 65 00		        .null "newline"
.8874					h_proc_not:
>8874	7c 88				        .word h_proc_exit
>8876	09				        .byte 09
>8877	f0				        .byte OT_PROC
>8878	6e 6f 74 00			        .null "not"
.887c					h_proc_exit:
>887c	00 00				        .word 0000              ; end lf list
>887e	02				        .byte 02
>887f	f0				        .byte OT_PROC
>8880	65 78 69 74 00			        .null "exit"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound      = 0
=1					str_unspec       = 1
=2					str_true         = 2
=3					str_false        = 3
=4					str_bad_token    = 4
=5					str_bad_object   = 5
=6					str_bad_number   = 6
=7					str_bad_radix    = 7
=8					str_cant_yet     = 8      ; TODO temp during development
=9					str_end_input    = 9
=10					str_chant        = 10
=11					str_prompt       = 11
=12					str_exit_kill    = 12
=13					str_proc_prt     = 13
=14					str_special_prt  = 14
=15					str_cant_apply   = 15
.8885					string_table:
>8885	a3 88 b6 88 cf 88 d2 88		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>888d	d5 88 e9 88 04 89 19 89		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>8895	2d 89 46 89 62 89 96 89		        .word s_cant_yet, s_end_input, s_chant, s_prompt             ; 8-11
>889d	99 89 b0 89 bd 89		        .word s_exit_kill, s_proc_prt, s_special_prt                 ; 12-15
>88a3	55 6e 62 6f 75 6e 64 20		s_unbound:      .null   "Unbound variable: "            ; REPL input error
>88ab	76 61 72 69 61 62 6c 65 3a 20 00
>88b6	55 6e 73 70 65 63 69 66		s_unspec:       .null   "Unspecified return value"      ; used eg with (display)
>88be	69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75 65
>88ce	00
>88cf	23 74 00			s_true:         .null   "#t"
>88d2	23 66 00			s_false:        .null   "#f"
>88d5	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>88dd	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>88e9	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>88f1	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>8901	3a 20 00
>8904	49 6c 6c 2d 66 6f 72 6d		s_bad_number:   .null   "Ill-formed number: $"          ; from lexer
>890c	65 64 20 6e 75 6d 62 65 72 3a 20 24 00
>8919	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>8921	61 64 20 72 61 64 69 78 3a 20 24 00
>892d	41 4c 50 48 41 3a 20 43		s_cant_yet:     .null   "ALPHA: Can't do that yet"      ; from parser
>8935	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>8945	00
>8946	45 6e 64 20 6f 66 20 69		s_end_input:    .null   "End of input stream reached"   ; from reader
>894e	6e 70 75 74 20 73 74 72 65 61 6d 20 72 65 61 63
>895e	68 65 64 00
>8962	50 68 27 6e 67 6c 75 69		s_chant:        .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."
>896a	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>897a	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>898a	61 67 6c 20 66 68 74 61 67 6e 2e 00
>8996	3e 20 00			s_prompt:       .null   "> "
>8999	4b 69 6c 6c 20 53 63 68		s_exit_kill:    .null   "Kill Scheme (y or n)? "        ; from proc_exit
>89a1	65 6d 65 20 28 79 20 6f 72 20 6e 29 3f 20 00
>89b0	23 3c 70 72 6f 63 65 64		s_proc_prt:     .null   "#<procedure:"                  ; from printer
>89b8	75 72 65 3a 00
>89bd	23 3c 73 70 65 63 69 61		s_special_prt:  .null   "#<special:"                    ; from printer
>89c5	6c 3a 00
>89c8	4f 62 6a 65 63 74 20 6e		s_cant_apply:   .null   "Object not applicable"         ; from apply
>89d0	6f 74 20 61 70 70 6c 69 63 61 62 6c 65 00
>89de	0b 5b 5d 7b 7d 7c 60 22		s_delimiters:   .ptext "[]{}|`""';()"
>89e6	27 3b 28 29
>89ea	12 21 24 25 26 2a 2b 2d		s_extended:     .ptext "!$%&*+-./:<=>?@^_~"
>89f2	2e 2f 3a 3c 3d 3e 3f 40 5e 5f 7e
>89fd	61 62 63 64 65 66 67 68		s_letters:      .null "abcdefghijklmnopqrstuvwxyz"
>8a05	69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78
>8a15	79 7a 00
>8a18	30 31 32 33 34 35 36 37		s_digits:       .null "0123456789"
>8a20	38 39 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (13. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 31 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
