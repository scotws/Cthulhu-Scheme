
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Sat Apr 11 11:01:57 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 12		sta $12		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 13		sta $13		                sta hp+1
.8011	64 14		stz $14		                stz symtbl
.8013	64 15		stz $15		                stz symtbl+1
.8015	64 16		stz $16		                stz strtbl
.8017	64 17		stz $17		                stz strtbl+1
.8019	64 18		stz $18		                stz bnmtbl
.801b	64 19		stz $19		                stz bnmtbl+1
.801d	64 1a		stz $1a		                stz ast
.801f	64 1b		stz $1b		                stz ast+1
.8021	a9 21		lda #$21	                lda #<kernel_getc
.8023	85 08		sta $08		                sta input
.8025	a9 f0		lda #$f0	                lda #>kernel_putc
.8027	85 09		sta $09		                sta input+1
.8029					repl:
.8029	64 0a		stz $0a		                stz ciblen
.802b	64 0b		stz $0b		                stz ciblen+1
.802d					repl_read:
.802d	a0 00		ldy #$00	                ldy #0
.802f	a9 3e		lda #$3e	                lda #'>'
.8031	20 a4 82	jsr $82a4	                jsr help_emit_a
.8034	a9 20		lda #$20	                lda #' '
.8036	20 a4 82	jsr $82a4	                jsr help_emit_a
.8039					repl_read_loop:
.8039	20 a7 82	jsr $82a7	                jsr help_key_a
.803c	c9 0a		cmp #$0a	                cmp #AscLF
.803e	f0 17		beq $8057	                beq repl_read_eol
.8040	c9 0d		cmp #$0d	                cmp #AscCR
.8042	f0 13		beq $8057	                beq repl_read_eol
.8044	c9 08		cmp #$08	                cmp #AscBS
.8046	f0 1b		beq $8063	                beq repl_read_backspace
.8048	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.804a	f0 17		beq $8063	                beq repl_read_backspace
.804c	99 00 02	sta $0200,y	                sta cib,y
.804f	c8		iny		                iny
.8050	20 a4 82	jsr $82a4	                jsr help_emit_a
.8053	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8055	d0 e2		bne $8039	                bne repl_read_loop    ; fall thru if buffer limit reached
.8057					repl_read_eol:
.8057					repl_read_buffer_full:
.8057	84 0a		sty $0a		                sty ciblen      ; Y contains number of chars accepted already
.8059	a9 00		lda #$00	                lda #0
.805b	85 0b		sta $0b		                sta ciblen+1    ; we only accept 256 chars
.805d	99 00 02	sta $0200,y	                sta cib,y
.8060	4c 7f 80	jmp $807f	                jmp lexer
.8063					repl_read_backspace:
.8063	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8065	d0 06		bne $806d	                bne +
.8067	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8069	20 a4 82	jsr $82a4	                jsr help_emit_a
.806c	c8		iny		                iny
.806d					+
.806d	88		dey		                dey
.806e	a9 08		lda #$08	                lda #AscBS      ; move back one
.8070	20 a4 82	jsr $82a4	                jsr help_emit_a
.8073	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8075	20 a4 82	jsr $82a4	                jsr help_emit_a
.8078	a9 08		lda #$08	                lda #AscBS      ; move back over space
.807a	20 a4 82	jsr $82a4	                jsr help_emit_a
.807d	80 ba		bra $8039	                bra repl_read_loop

;******  Processing file: platforms/../lexer.asm

.807f					lexer:
.807f	20 f5 82	jsr $82f5	                jsr debug_dump_input
.8082	a0 00		ldy #$00	                ldy #0
.8084	64 0c		stz $0c		                stz cibp
.8086	64 0d		stz $0d		                stz cibp+1      ; MSB currently unused
.8088	64 10		stz $10		                stz tkbp
.808a	64 11		stz $11		                stz tkbp+1      ; MSB currently unused
.808c					lexer_loop:
.808c	b9 00 02	lda $0200,y	                lda cib,y
.808f	20 de 82	jsr $82de	                jsr help_is_whitespace
.8092	90 03		bcc $8097	                bcc _not_whitespace
.8094	4c 55 81	jmp $8155	                jmp lexer_next
.8097					_not_whitespace:
.8097					_test_parens:
.8097					_test_done:
.8097	d0 03		bne $809c	                bne _not_done
.8099	4c 5d 81	jmp $815d	                jmp lexer_end_of_input          ; not the same as lexer_done
.809c					_not_done:
.809c	c9 23		cmp #$23	                cmp #'#'
.809e	f0 03		beq $80a3	                beq _got_sharp
.80a0	4c 43 81	jmp $8143	                jmp lexer_not_sharp             ; too far for branch
.80a3					_got_sharp:
.80a3	c8		iny		                iny
.80a4	b9 00 02	lda $0200,y	                lda cib,y
.80a7	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.80a9	d0 08		bne $80b3	                bne _not_true
.80ab	a9 10		lda #$10	                lda #T_TRUE
.80ad	20 65 81	jsr $8165	                jsr lexer_add_token
.80b0	4c 55 81	jmp $8155	                jmp lexer_next
.80b3					_not_true:
.80b3	c9 66		cmp #$66	                cmp #'f'
.80b5	d0 08		bne $80bf	                bne _not_false
.80b7	a9 11		lda #$11	                lda #T_FALSE
.80b9	20 65 81	jsr $8165	                jsr lexer_add_token
.80bc	4c 55 81	jmp $8155	                jmp lexer_next
.80bf					_not_false:
.80bf	c9 5c		cmp #$5c	                cmp #'\'
.80c1	d0 00		bne $80c3	                bne _no_backslash
.80c3					_not_single_char:
.80c3					_not_named_char:
.80c3					_no_backslash:
.80c3					_not_vector:
.80c3	c9 78		cmp #$78	                        cmp #'x'        ; #x is hexadecimal
.80c5	d0 04		bne $80cb	                        bne _not_hexnum
.80c7	a9 10		lda #$10	                        lda #$10        ; Base 16
.80c9	80 16		bra $80e1	                        bra lexer_got_number
.80cb					_not_hexnum:
.80cb	c9 62		cmp #$62	                        cmp #'b'        ; #b is binary
.80cd	d0 04		bne $80d3	                        bne _not_binnum
.80cf	a9 02		lda #$02	                        lda #$02        ; Base 2
.80d1	80 0e		bra $80e1	                        bra lexer_got_number
.80d3					_not_binnum:
.80d3	c9 64		cmp #$64	                        cmp #'d'        ; #d is explicit decimal
.80d5	d0 04		bne $80db	                        bne _not_expldecnum
.80d7	a9 0a		lda #$0a	                        lda #$0A        ; Base 10
.80d9	80 06		bra $80e1	                        bra lexer_got_number
.80db					_not_expldecnum:
.80db	c9 6f		cmp #$6f	                        cmp #'o'        ; #o is octal
.80dd	d0 64		bne $8143	                        bne lexer_not_octnum
.80df	a9 08		lda #$08	                        lda #$08        ; Base 8
.80e1					lexer_got_number:
.80e1	48		pha		                        pha                     ; Save the radix for the moment
.80e2	a9 12		lda #$12	                        lda #T_NUM_START
.80e4	20 65 81	jsr $8165	                        jsr lexer_add_token
.80e7	68		pla		                        pla
.80e8	20 65 81	jsr $8165	                        jsr lexer_add_token
.80eb	a6 10		ldx $10		                        ldx tkbp        ; get index of where length will be
.80ed	86 00		stx $00		                        stx tmp0
.80ef	a9 00		lda #$00	                        lda #0          ; dummy length value
.80f1	20 65 81	jsr $8165	                        jsr lexer_add_token
.80f4	c8		iny		                        iny             ; Y is still the input buffer index
.80f5	b9 00 02	lda $0200,y	                        lda cib,y
.80f8	a2 00		ldx #$00	                        ldx #0          ; X counts length of string
.80fa	c9 2d		cmp #$2d	                        cmp #'-'
.80fc	d0 09		bne $8107	                        bne _check_for_plus
.80fe	a9 ff		lda #$ff	                        lda #T_MINUS
.8100	20 65 81	jsr $8165	                        jsr lexer_add_token
.8103	c8		iny		                        iny             ; skip minus character
.8104	e8		inx		                        inx             ; string now has length of 1
.8105	80 0b		bra $8112	                        bra _sign_done
.8107					_check_for_plus:
.8107	c9 2b		cmp #$2b	                        cmp #'+'
.8109	d0 01		bne $810c	                        bne _default_plus
.810b	c8		iny		                        iny
.810c					_default_plus:
.810c	a9 ee		lda #$ee	                        lda #T_PLUS
.810e	20 65 81	jsr $8165	                        jsr lexer_add_token
.8111	e8		inx		                        inx             ; string now has length of 1
.8112					_sign_done:
.8112	b9 00 02	lda $0200,y	                        lda cib,y
.8115	f0 24		beq $813b	                        beq _terminator_too_early       ; 00 terminates input
.8117	20 d8 82	jsr $82d8	                        jsr help_is_delimiter
.811a	b0 1f		bcs $813b	                        bcs _delimiter_too_early
.811c					_number_loop:
.811c	20 65 81	jsr $8165	                        jsr lexer_add_token
.811f	e8		inx		                        inx             ; String one character longer
.8120	c8		iny		                        iny             ; Next character
.8121	b9 00 02	lda $0200,y	                        lda cib,y
.8124	f0 07		beq $812d	                        beq _legal_terminator
.8126	20 d8 82	jsr $82d8	                        jsr help_is_delimiter
.8129	b0 02		bcs $812d	                        bcs _number_done
.812b	80 ef		bra $811c	                        bra _number_loop
.812d					_legal_terminator:
.812d					_number_done:
.812d	a9 82		lda #$82	                        lda #T_NUM_END
.812f	20 65 81	jsr $8165	                        jsr lexer_add_token
.8132	8a		txa		                        txa             ; number of chars was in X
.8133	a6 00		ldx $00		                        ldx tmp0        ; index of length byte in token stream
.8135	9d 00 03	sta $0300,x	                        sta tkb,x
.8138	4c 56 81	jmp $8156	                        jmp lexer_next_same_char
.813b					_terminator_too_early:
.813b					_delimiter_too_early:
.813b	a9 06		lda #$06	                lda #str_bad_number
.813d	20 c4 82	jsr $82c4	                jsr help_print_string
.8140	4c 29 80	jmp $8029	                jmp repl
.8143					lexer_not_octnum
.8143					lexer_not_sharp:
.8143					_not_decnum:
.8143					_not_string:
.8143					lexer_error:
.8143	48		pha		                pha
.8144	a9 00		lda #$00	                lda #str_unbound
.8146	20 aa 82	jsr $82aa	                jsr help_print_string_no_lf
.8149	68		pla		                pla
.814a	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.814d	a9 0a		lda #$0a	                lda #AscLF
.814f	20 a4 82	jsr $82a4	                jsr help_emit_a
.8152	4c 29 80	jmp $8029	                jmp repl
.8155					lexer_next:
.8155	c8		iny		                iny
.8156					lexer_next_same_char:
.8156	c4 0a		cpy $0a		                cpy ciblen
.8158	f0 03		beq $815d	                beq lexer_end_of_input
.815a	4c 8c 80	jmp $808c	                jmp lexer_loop
.815d					lexer_end_of_input:
.815d	a9 00		lda #$00	                lda #T_END
.815f	20 65 81	jsr $8165	                jsr lexer_add_token
.8162	4c 70 81	jmp $8170	                jmp lexer_done
.8165					lexer_add_token:
.8165	5a		phy		                phy             ; Could also store in cibp
.8166	a4 10		ldy $10		                ldy tkbp
.8168	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.816b	c8		iny		                iny
.816c	84 10		sty $10		                sty tkbp
.816e	7a		ply		                ply
.816f	60		rts		                rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01   ; '('
=$02					T_PAREN_CLOSED  = $02   ; ')'
=$03					T_SHARP         = $03   ; '#' - note '#f', '#t' and others are precprocessed
=$10					T_TRUE       = $10   ; '#t'
=$11					T_FALSE      = $11   ; '#f'
=$12					T_NUM_START  = $12   ; Marks beginning of a number sequence
=$82					T_NUM_END    = $82   ; Marks end of a number sequence, see T_NUM_START
=$ee					T_PLUS       = $EE   ; Also used in number token sequence
=$ff					T_MINUS      = $FF   ; Also used in number token sequence
.8170					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.8170					parser:
.8170	20 14 83	jsr $8314	                jsr debug_dump_token
.8173	64 1a		stz $1a		                stz ast
.8175	64 1b		stz $1b		                stz ast+1
.8177	64 10		stz $10		                stz tkbp
.8179	64 11		stz $11		                stz tkbp+1      ; fake, currently only using LSB
.817b	a9 1a		lda #$1a	                lda <#ast
.817d	85 1c		sta $1c		                sta astp
.817f	a9 00		lda #$00	                lda >#ast       ; paranoid, MSB always 00 for zero page
.8181	85 1d		sta $1d		                sta astp+1
.8183	a2 ff		ldx #$ff	                ldx #$FF
.8185					parser_loop:
.8185	e8		inx		                inx
.8186	bd 00 03	lda $0300,x	                lda tkb,x
.8189					_end_token:
.8189	c9 00		cmp #$00	                cmp #T_END
.818b	d0 03		bne $8190	                bne _not_end_token
.818d	4c 28 82	jmp $8228	                jmp parser_done
.8190					_not_end_token:
.8190	c9 10		cmp #$10	                cmp #T_TRUE
.8192	d0 0a		bne $819e	                bne _not_true_token
.8194	a9 ff		lda #$ff	                lda <#OC_TRUE
.8196	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.8198	20 e6 81	jsr $81e6	                jsr parser_add_object
.819b	4c 85 81	jmp $8185	                jmp parser_loop
.819e					_not_true_token:
.819e	c9 11		cmp #$11	                cmp #T_FALSE
.81a0	d0 0a		bne $81ac	                bne _not_false_token
.81a2	a9 00		lda #$00	                lda <#OC_FALSE
.81a4	a0 10		ldy #$10	                ldy >#OC_FALSE
.81a6	20 e6 81	jsr $81e6	                jsr parser_add_object
.81a9	4c 85 81	jmp $8185	                jmp parser_loop
.81ac					_not_false_token:
.81ac	c9 12		cmp #$12	                cmp #T_NUM_START
.81ae	d0 29		bne $81d9	                bne _not_num
.81b0	e8		inx		                inx                     ; skip over T_NUM_START TOKEN
.81b1	bd 00 03	lda $0300,x	                lda tkb,x
.81b4	85 00		sta $00		                sta tmp0
.81b6	e8		inx		                inx
.81b7	bd 00 03	lda $0300,x	                lda tkb,x
.81ba	48		pha		                pha
.81bb	a9 0a		lda #$0a	                lda #AscLF
.81bd	20 a4 82	jsr $82a4	                jsr help_emit_a
.81c0	68		pla		                pla
.81c1	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.81c4	a9 20		lda #$20	                lda #AscSP
.81c6	20 a4 82	jsr $82a4	                jsr help_emit_a
.81c9					_testing_loop:
.81c9	e8		inx		                inx
.81ca	bd 00 03	lda $0300,x	                lda tkb,x
.81cd	c9 82		cmp #$82	                cmp #T_NUM_END
.81cf	f0 05		beq $81d6	                beq _num_end
.81d1	20 a4 82	jsr $82a4	                jsr help_emit_a
.81d4	80 f3		bra $81c9	                bra _testing_loop
.81d6					_num_end:
.81d6	4c 85 81	jmp $8185	                jmp parser_loop
.81d9					_not_num:
.81d9					paser_bad_token:
.81d9	48		pha		                pha                             ; save the evil token
.81da	a9 04		lda #$04	                lda #str_bad_token
.81dc	20 aa 82	jsr $82aa	                jsr help_print_string_no_lf
.81df	68		pla		                pla
.81e0	20 8d 82	jsr $828d	                jsr help_byte_to_ascii          ; print bad token as hex number
.81e3	4c 29 80	jmp $8029	                jmp repl
.81e6					parser_add_object:
.81e6	da		phx		                phx             ; save index to token buffer
.81e7	5a		phy		                phy             ; save MSB of the object
.81e8	48		pha		                pha             ; save LSB of the object
.81e9	a5 12		lda $12		                lda hp
.81eb	85 00		sta $00		                sta tmp0
.81ed	a5 13		lda $13		                lda hp+1
.81ef	85 01		sta $01		                sta tmp0+1
.81f1	a9 00		lda #$00	                lda <#OC_END
.81f3	a0 00		ldy #$00	                ldy #0
.81f5	91 12		sta ($12),y	                sta (hp),y
.81f7	c8		iny		                iny
.81f8	a9 00		lda #$00	                lda >#OC_END
.81fa	91 12		sta ($12),y	                sta (hp),y
.81fc	c8		iny		                iny
.81fd	68		pla		                pla             ; retrieve LSB
.81fe	91 12		sta ($12),y	                sta (hp),y
.8200	c8		iny		                iny
.8201	68		pla		                pla             ; retrieve MSB, was in Y
.8202	91 12		sta ($12),y	                sta (hp),y
.8204	c8		iny		                iny
.8205	a9 00		lda #$00	                lda #0
.8207	91 12		sta ($12),y	                sta (hp),y
.8209	c8		iny		                iny
.820a	91 12		sta ($12),y	                sta (hp),y
.820c	c8		iny		                iny
.820d	98		tya		                tya
.820e	18		clc		                clc
.820f	65 12		adc $12		                adc hp
.8211	85 12		sta $12		                sta hp
.8213	90 02		bcc $8217	                bcc +
.8215	e6 13		inc $13		                inc hp+1
.8217					+
.8217	a5 00		lda $00		                lda tmp0        ; original LSB of hp
.8219	aa		tax		                tax             ; We'll need it again in a second
.821a	92 1c		sta ($1c)	                sta (astp)
.821c	a0 01		ldy #$01	                ldy #1
.821e	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp
.8220	91 1c		sta ($1c),y	                sta (astp),y
.8222	85 1d		sta $1d		                sta astp+1      ; MSB, was tmp0+1
.8224	86 1c		stx $1c		                stx astp        ; LSB, was tmp0
.8226	fa		plx		                plx             ; get back index for token buffer
.8227	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate
.8228					parser_done:
.8228	a9 00		lda #$00	                lda <#OC_END
.822a	a2 00		ldx #$00	                ldx >#OC_END
.822c	20 e6 81	jsr $81e6	                jsr parser_add_object

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.822f					eval:
.822f	20 4b 83	jsr $834b	                jsr debug_dump_ast
.8232	20 37 83	jsr $8337	                jsr debug_dump_hp
.8235					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.8235					printer:
.8235	a9 0a		lda #$0a	        lda #AscLF
.8237	20 a4 82	jsr $82a4	        jsr help_emit_a
.823a	a5 1a		lda $1a		                lda ast
.823c	85 02		sta $02		                sta tmp1
.823e	a5 1b		lda $1b		                lda ast+1
.8240	85 03		sta $03		                sta tmp1+1
.8242					printer_loop:
.8242	a0 03		ldy #$03	                ldy #3                  ; MSB of the next node entry down ...
.8244	b1 02		lda ($02),y	                lda (tmp1),y            ; ...  which contains the tag nibble
.8246	29 f0		and #$f0	                and #$f0                ; mask all but tag nibble
.8248					_check_for_meta:
.8248	c9 00		cmp #$00	                cmp #ot_meta
.824a	d0 07		bne $8253	                bne _not_meta
.824c	12 02		ora ($02)	                ora (tmp1)              ; LSB
.824e	d0 19		bne $8269	                bne printer_error       ; We're in trouble, panic and re-REPL
.8250	4c 8a 82	jmp $828a	                jmp printer_done
.8253					_not_meta:
.8253	c9 10		cmp #$10	                cmp #ot_bool
.8255	d0 12		bne $8269	                bne _not_bool
.8257	a0 02		ldy #$02	                ldy #2
.8259	b1 02		lda ($02),y	                lda (tmp1),y            ; LSB
.825b	d0 04		bne $8261	                bne _bool_true          ; not a zero means true
.825d	a9 03		lda #$03	                lda #str_false
.825f	80 02		bra $8263	                bra _bool_printer
.8261					_bool_true:
.8261	a9 02		lda #$02	                lda #str_true
.8263					_bool_printer:
.8263	20 c4 82	jsr $82c4	                jsr help_print_string
.8266	4c 7c 82	jmp $827c	                jmp printer_next
.8269					_not_bool:
.8269					printer_error:
.8269	a5 05		lda $05		                lda str_bad_object
.826b	20 aa 82	jsr $82aa	                jsr help_print_string_no_lf
.826e	a0 01		ldy #$01	                ldy #1
.8270	b1 02		lda ($02),y	                lda (tmp1),y
.8272	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.8275	b2 02		lda ($02)	                lda (tmp1)
.8277	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.827a	80 0e		bra $828a	                bra printer_done
.827c					printer_next:
.827c	b2 02		lda ($02)	                lda (tmp1)              ; LSB of next entry
.827e	aa		tax		                tax
.827f	a0 01		ldy #$01	                ldy #1
.8281	b1 02		lda ($02),y	                lda (tmp1),y            ; MSB of next entry
.8283	85 03		sta $03		                sta tmp1+1
.8285	86 02		stx $02		                stx tmp1
.8287	4c 42 82	jmp $8242	                jmp printer_loop
.828a					printer_done:

;******  Return to file: platforms/../cthulhu.asm

.828a					repl_done:
.828a	4c 29 80	jmp $8029	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.828d					help_byte_to_ascii:
.828d	48		pha		                pha
.828e	4a		lsr a		                lsr             ; convert high nibble first
.828f	4a		lsr a		                lsr
.8290	4a		lsr a		                lsr
.8291	4a		lsr a		                lsr
.8292	20 96 82	jsr $8296	                jsr help_nibble_to_ascii
.8295	68		pla		                pla
.8296					help_nibble_to_ascii:
.8296	29 0f		and #$0f	                and #$0F
.8298	09 30		ora #$30	                ora #'0'
.829a	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.829c	90 02		bcc $82a0	                bcc +
.829e	69 06		adc #$06	                adc #$06
.82a0	4c a4 82	jmp $82a4	+               jmp help_emit_a       ; JSR/RTS
.82a3					help_to_lowercase:
.82a3	60		rts		                rts
.82a4					help_emit_a:
.82a4	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.82a7					help_key_a:
.82a7	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.82aa					help_print_string_no_lf:
.82aa	0a		asl a		                asl
.82ab	a8		tay		                tay
.82ac	b9 27 84	lda $8427,y	                lda string_table,y
.82af	85 00		sta $00		                sta tmp0                ; LSB
.82b1	c8		iny		                iny
.82b2	b9 27 84	lda $8427,y	                lda string_table,y
.82b5	85 01		sta $01		                sta tmp0+1              ; MSB
.82b7					help_print_common:
.82b7	a0 00		ldy #$00	                ldy #0
.82b9					_loop:
.82b9	b1 00		lda ($00),y	                lda (tmp0),y
.82bb	f0 06		beq $82c3	                beq _done               ; strings are zero-terminated
.82bd	20 a4 82	jsr $82a4	                jsr help_emit_a         ; allows vectoring via output
.82c0	c8		iny		                iny
.82c1	80 f6		bra $82b9	                bra _loop
.82c3					_done:
.82c3	60		rts		                rts
.82c4					help_print_string:
.82c4	20 aa 82	jsr $82aa	                jsr help_print_string_no_lf
.82c7	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.82c9	4c a4 82	jmp $82a4	                jmp help_emit_a         ; JSR/RTS
.82cc					help_is_decdigit:
.82cc	c9 30		cmp #$30	                cmp #'0'
.82ce	90 07		bcc $82d7	                bcc _below_zero         ; A is < '0'
.82d0	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.82d2	b0 02		bcs $82d6	                bcs _above_nine
.82d4	38		sec		                sec
.82d5	60		rts		                rts
.82d6					_above_nine:
.82d6	18		clc		                clc
.82d7					_below_zero:
.82d7	60		rts		                rts
.82d8					help_is_delimiter:
.82d8	20 de 82	jsr $82de	                jsr help_is_whitespace
.82db	b0 00		bcs $82dd	                bcs _delimiter_done
.82dd					_delimiter_done:
.82dd	60		rts		                rts
.82de					help_is_whitespace:
.82de	38		sec		                sec             ; default is whitespace
.82df	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.82e1	f0 11		beq $82f4	                beq _done
.82e3	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.82e5	f0 0d		beq $82f4	                beq _done
.82e7	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.82e9	f0 09		beq $82f4	                beq _done
.82eb	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.82ed	f0 05		beq $82f4	                beq _done
.82ef	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.82f1	f0 01		beq $82f4	                beq _done
.82f3	18		clc		                clc             ; If we end up here, it's not whitespace
.82f4					_done:
.82f4	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.82f5					proc_char_whitespace_p:
.82f5					proc_newline:
.82f5					proc_display:
.82f5					proc_read:
.82f5					proc_read_char:
.82f5					proc_read_line:
.82f5					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.82f5					debug_dump_input:
.82f5	a9 0a		lda #$0a	                lda #AscLF
.82f7	20 a4 82	jsr $82a4	                jsr help_emit_a
.82fa	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.82fc	20 be 83	jsr $83be	                jsr debug_print_string_no_lf
.82ff	a2 00		ldx #$00	                ldx #0
.8301					-
.8301	bd 00 02	lda $0200,x	                lda cib,x
.8304	f0 0b		beq $8311	                beq _done
.8306	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.8309	e8		inx		                inx
.830a	a9 20		lda #$20	                lda #' '
.830c	20 a4 82	jsr $82a4	                jsr help_emit_a
.830f	80 f0		bra $8301	                bra -
.8311					_done:
.8311	4c 8d 82	jmp $828d	                jmp help_byte_to_ascii          ; JSR/RTS
.8314					debug_dump_token:
.8314	a9 0a		lda #$0a	                lda #AscLF
.8316	20 a4 82	jsr $82a4	                jsr help_emit_a
.8319	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.831b	20 be 83	jsr $83be	                jsr debug_print_string_no_lf
.831e	a2 00		ldx #$00	                ldx #0
.8320					-
.8320	bd 00 03	lda $0300,x	                lda tkb,x
.8323	c9 00		cmp #$00	                cmp #T_END
.8325	f0 0d		beq $8334	                beq _done
.8327	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.832a	e8		inx		                inx
.832b	a9 20		lda #$20	                lda #' '
.832d	20 a4 82	jsr $82a4	                jsr help_emit_a
.8330	e4 10		cpx $10		                cpx tkbp
.8332	d0 ec		bne $8320	                bne -
.8334					_done:
.8334	4c 8d 82	jmp $828d	                jmp help_byte_to_ascii          ; JSR/RTS
.8337					debug_dump_hp:
.8337	a9 0a		lda #$0a	                lda #AscLF
.8339	20 a4 82	jsr $82a4	                jsr help_emit_a
.833c	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.833e	20 be 83	jsr $83be	                jsr debug_print_string_no_lf
.8341	a5 13		lda $13		                lda hp+1
.8343	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.8346	a5 12		lda $12		                lda hp
.8348	4c 8d 82	jmp $828d	                jmp help_byte_to_ascii          ; JSR/RTS
.834b					debug_dump_ast:
.834b	a9 0a		lda #$0a	                lda #AscLF
.834d	20 a4 82	jsr $82a4	                jsr help_emit_a
.8350	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.8352	20 be 83	jsr $83be	                jsr debug_print_string_no_lf
.8355	a5 1b		lda $1b		                lda ast+1
.8357	85 03		sta $03		                sta tmp1+1
.8359	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.835c	a5 1a		lda $1a		                lda ast
.835e	85 02		sta $02		                sta tmp1
.8360	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.8363					_loop:
.8363	a9 20		lda #$20	                lda #' '
.8365	20 a4 82	jsr $82a4	                jsr help_emit_a
.8368	a0 01		ldy #$01	                ldy #1
.836a	b1 02		lda ($02),y	                lda (tmp1),y
.836c	85 05		sta $05		                sta tmp2+1
.836e	20 8d 82	jsr $828d	                jsr help_byte_to_ascii          ; MSB
.8371	b2 02		lda ($02)	                lda (tmp1)
.8373	85 04		sta $04		                sta tmp2                        ; pointer to next entry, LSB
.8375	20 8d 82	jsr $828d	                jsr help_byte_to_ascii          ; LSB
.8378	a9 3a		lda #$3a	                lda #':'
.837a	20 a4 82	jsr $82a4	                jsr help_emit_a
.837d	a0 03		ldy #$03	                ldy #3
.837f	b1 02		lda ($02),y	                lda (tmp1),y
.8381	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.8384	a0 02		ldy #$02	                ldy #2
.8386	b1 02		lda ($02),y	                lda (tmp1),y
.8388	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.838b	a9 3a		lda #$3a	                lda #':'
.838d	20 a4 82	jsr $82a4	                jsr help_emit_a
.8390	a0 05		ldy #$05	                ldy #5
.8392	b1 02		lda ($02),y	                lda (tmp1),y
.8394	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.8397	a0 04		ldy #$04	                ldy #4
.8399	b1 02		lda ($02),y	                lda (tmp1),y
.839b	20 8d 82	jsr $828d	                jsr help_byte_to_ascii
.839e	a5 04		lda $04		                lda tmp2
.83a0	05 05		ora $05		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.83a2	f0 0a		beq $83ae	                beq _done
.83a4	a5 04		lda $04		                lda tmp2
.83a6	85 02		sta $02		                sta tmp1
.83a8	a5 05		lda $05		                lda tmp2+1
.83aa	85 03		sta $03		                sta tmp1+1
.83ac	80 b5		bra $8363	                bra _loop
.83ae					_done:
.83ae	60		rts		                rts
.83af					debug_emit_a:
.83af	48		pha		                pha
.83b0	a9 0a		lda #$0a	                lda #AscLF
.83b2	20 a4 82	jsr $82a4	                jsr help_emit_a
.83b5	68		pla		                pla
.83b6	20 a4 82	jsr $82a4	                jsr help_emit_a
.83b9	a9 0a		lda #$0a	                lda #AscLF
.83bb	4c a4 82	jmp $82a4	                jmp help_emit_a         ; JSR/RTS
.83be					debug_print_string_no_lf:
.83be	0a		asl a		                asl
.83bf	a8		tay		                tay
.83c0	b9 13 84	lda $8413,y	                lda sd_table,y
.83c3	85 00		sta $00		                sta tmp0                ; LSB
.83c5	c8		iny		                iny
.83c6	b9 13 84	lda $8413,y	                lda sd_table,y
.83c9	85 01		sta $01		                sta tmp0+1              ; MSB
.83cb					debug_print_common:
.83cb	a0 00		ldy #$00	                ldy #0
.83cd					_loop:
.83cd	b1 00		lda ($00),y	                lda (tmp0),y
.83cf	f0 06		beq $83d7	                beq _done               ; strings are zero-terminated
.83d1	20 a4 82	jsr $82a4	                jsr help_emit_a         ; allows vectoring via output
.83d4	c8		iny		                iny
.83d5	80 f6		bra $83cd	                bra _loop
.83d7					_done:
.83d7	60		rts		                rts
.83d8					debug_print_string:
.83d8	20 be 83	jsr $83be	                jsr debug_print_string_no_lf
.83db	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.83dd	4c a4 82	jmp $82a4	                jmp help_emit_a         ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
=3					strd_dump_input = 3
>83e0	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>83e8	66 66 65 72 3a 20 00
>83ef	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>83f5	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>83fd	6e 74 65 72 3a 20 00
>8404	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>840c	66 66 65 72 3a 20 00
.8413					sd_table:
>8413	e0 83 ef 83 f5 83 04 84		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input      ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					ciblen:  .word ?     ; current size of input buffer
>000c					cibp:    .word ?     ; index of current char in input buffer
>000e					tkblen:  .word ?     ; current size of the token buffer
>0010					tkbp:    .word ?     ; index of current token in token buffer
>0012					hp:      .word ?     ; pointer to next free heap entry
>0014					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0016					strtbl:  .word ?     ; pointer to first entry in string table in heap
>0018					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001a					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001c					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					ot_meta         = $00    ; used for end of input and other markers
=$10					ot_bool         = $10    ; used for #t and #f; immediate
=$20					ot_fixnum       = $20    ; used for fixed numbers; immediate
=$30					ot_bignum       = $30    ; used for bignum
=$40					ot_char         = $40    ; used for chars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.841b					h_newline:
>841b	00 00				        .addr 0000              ; end of header list
>841d	f5 82				        .addr proc_newline
>841f	07				        .byte 7
>8420	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
=6					str_bad_number = 6
.8427					string_table:
>8427	35 84 49 84 63 84 66 84		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>842f	69 84 7c 84 97 84		        .word s_bad_token, s_bad_object, s_bad_number   ; 4-7
>8435	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable: "           ; REPL input error
>843d	20 76 61 72 69 61 62 6c 65 3a 20 00
>8449	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8451	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8461	65 00
>8463	23 74 00			s_true:         .null   "#t"
>8466	23 66 00			s_false:        .null   "#f"
>8469	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: "            ; from parser
>8471	61 64 20 74 6f 6b 65 6e 3a 20 00
>847c	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>8484	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>8494	3a 20 00
>8497	3b 49 6c 6c 2d 66 6f 72		s_bad_number:   .null   ";Ill-formed number"            ; from lexer
>849f	6d 65 64 20 6e 75 6d 62 65 72 00
>84aa	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>84b2	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
