
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Sat Apr  4 11:34:07 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer
=$100					tkb_size        = $100          ; size of the token buffer
=$f000					io_start = $f000
=$10					io_size  = $10
=32768					rom_start = ram_start + ram_size        ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 08		sta $08		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 09		sta $09		                sta output+1
.8009	a9 21		lda #$21	                lda #<kernel_getc
.800b	85 0a		sta $0a		                sta input
.800d	a9 f0		lda #$f0	                lda #>kernel_putc
.800f	85 0b		sta $0b		                sta input+1
.8011					repl:
.8011	64 0c		stz $0c		                stz ciblen
.8013	64 0d		stz $0d		                stz ciblen+1
.8015					repl_read:
.8015	a0 00		ldy #$00	                ldy #0
.8017	a9 3e		lda #$3e	                lda #'>'
.8019	20 f6 80	jsr $80f6	                jsr help_emit_a
.801c	a9 20		lda #$20	                lda #' '
.801e	20 f6 80	jsr $80f6	                jsr help_emit_a
.8021					repl_read_loop:
.8021	20 f9 80	jsr $80f9	                jsr help_key_a
.8024	c9 0a		cmp #$0a	                cmp #AscLF
.8026	f0 19		beq $8041	                beq repl_read_eol
.8028	c9 0d		cmp #$0d	                cmp #AscCR
.802a	f0 15		beq $8041	                beq repl_read_eol
.802c	c9 08		cmp #$08	                cmp #AscBS
.802e	f0 17		beq $8047	                beq repl_read_backspace
.8030	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.8032	f0 13		beq $8047	                beq repl_read_backspace
.8034	99 00 02	sta $0200,y	                sta cib,y
.8037	c8		iny		                iny
.8038	20 f6 80	jsr $80f6	                jsr help_emit_a
.803b	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.803d	d0 e2		bne $8021	                bne repl_read_loop    ; fall through if buffer limit reached
.803f	80 00		bra $8041	                bra repl_read_buffer_full
.8041					repl_read_eol:
.8041					repl_read_buffer_full:
.8041	84 0c		sty $0c		                sty ciblen      ; Y contains number of chars accepted already
.8043	64 0d		stz $0d		                stz ciblen+1    ; we only accept 256 chars
.8045	80 1c		bra $8063	                bra repl_tokenize
.8047					repl_read_backspace:
.8047	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8049	d0 06		bne $8051	                bne +
.804b	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.804d	20 f6 80	jsr $80f6	                jsr help_emit_a
.8050	c8		iny		                iny
.8051					+
.8051	88		dey		                dey
.8052	a9 08		lda #$08	                lda #AscBS      ; move back one
.8054	20 f6 80	jsr $80f6	                jsr help_emit_a
.8057	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8059	20 f6 80	jsr $80f6	                jsr help_emit_a
.805c	a9 08		lda #$08	                lda #AscBS      ; move back over space
.805e	20 f6 80	jsr $80f6	                jsr help_emit_a
.8061	80 be		bra $8021	                bra repl_read_loop
.8063					repl_tokenize:
.8063	a0 00		ldy #$00	                ldy #0
.8065	84 12		sty $12		                sty tkbp
.8067	84 13		sty $13		                sty tkbp+1      ; MSB currently unused
.8069	84 0e		sty $0e		                sty cibp
.806b	84 0f		sty $0f		                sty cibp+1      ; MSB currently unused
.806d					repl_tokenize_loop:
.806d	b9 00 02	lda $0200,y	                lda cib,y
.8070	c9 40		cmp #$40	                cmp #'@'
.8072	d0 01		bne $8075	                bne +
.8074	00		brk #		                brk
.8075					+
.8075	20 f5 80	jsr $80f5	                jsr help_to_lowercase
.8078					_test_sharp:
.8078	c9 23		cmp #$23	                cmp #'#'
.807a	d0 20		bne $809c	                bne _test_fixnum        ; TODO or whatever next test is
.807c	c8		iny		                iny
.807d	b9 00 02	lda $0200,y	                lda cib,y
.8080	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.8082	d0 0a		bne $808e	                bne _test_bool_false
.8084	a9 ff		lda #$ff	                lda <#oc_true           ; Token is an immediate constant
.8086	a2 01		ldx #$01	                ldx >#oc_true
.8088	20 b4 80	jsr $80b4	                jsr repl_add_token
.808b	4c a4 80	jmp $80a4	                jmp repl_tokenize_next
.808e					_test_bool_false:
.808e	c9 66		cmp #$66	                cmp #'f'
.8090	d0 0a		bne $809c	                bne _test_char
.8092	a9 00		lda #$00	                lda <#oc_false          ; Token is an immediate constant
.8094	a2 01		ldx #$01	                ldx >#oc_false
.8096	20 b4 80	jsr $80b4	                jsr repl_add_token
.8099	4c a4 80	jmp $80a4	                jmp repl_tokenize_next
.809c					_test_char:
.809c					_test_vector:
.809c					_test_radix:
.809c					_test_fixnum:
.809c					_test_comment:
.809c					repl_tokenize_error:
.809c	a9 00		lda #$00	                lda #str_unbound
.809e	20 16 81	jsr $8116	                jsr help_print_string
.80a1	4c 11 80	jmp $8011	                jmp repl
.80a4					repl_tokenize_next:
.80a4	c8		iny		                iny
.80a5	c4 0c		cpy $0c		                cpy ciblen
.80a7	f0 03		beq $80ac	                beq _end_of_input
.80a9	4c 6d 80	jmp $806d	                jmp repl_tokenize_loop
.80ac					_end_of_input:
.80ac	a9 00		lda #$00	                lda #0
.80ae	aa		tax		                tax
.80af	20 b4 80	jsr $80b4	                jsr repl_add_token
.80b2	80 10		bra $80c4	                bra repl_parse
.80b4					repl_add_token:
.80b4	5a		phy		                phy                     ; Could also store in cibp
.80b5	a4 12		ldy $12		                ldy tkbp
.80b7	99 00 03	sta $0300,y	                sta tkb,y             ; LSB is in A
.80ba	c8		iny		                iny
.80bb	8a		txa		                txa
.80bc	99 00 03	sta $0300,y	                sta tkb,y             ; MSB is in X
.80bf	c8		iny		                iny
.80c0	84 12		sty $12		                sty tkbp
.80c2	7a		ply		                ply
.80c3	60		rts		                rts
.80c4					repl_parse:
.80c4	20 29 81	jsr $8129	                jsr debug_dump_token
.80c7	a9 70		lda #$70	                lda #'p'
.80c9	20 4c 81	jsr $814c	                jsr debug_emit_a
.80cc					repl_eval:
.80cc	a9 65		lda #$65	                lda #'e'
.80ce	20 4c 81	jsr $814c	                jsr debug_emit_a
.80d1					repl_print:
.80d1	a5 00		lda $00		                lda return
.80d3	05 01		ora $01		                ora return+1
.80d5	d0 05		bne $80dc	                bne +
.80d7	a9 01		lda #$01	                lda #str_unspec
.80d9	20 16 81	jsr $8116	                jsr help_print_string
.80dc					+
.80dc					repl_done:
.80dc	4c 11 80	jmp $8011	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.80df					help_byte_to_ascii:
.80df	48		pha		                pha
.80e0	4a		lsr a		                lsr             ; convert high nibble first
.80e1	4a		lsr a		                lsr
.80e2	4a		lsr a		                lsr
.80e3	4a		lsr a		                lsr
.80e4	20 e8 80	jsr $80e8	                jsr help_nibble_to_ascii
.80e7	68		pla		                pla
.80e8					help_nibble_to_ascii:
.80e8	29 0f		and #$0f	                and #$0F
.80ea	09 30		ora #$30	                ora #'0'
.80ec	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.80ee	90 02		bcc $80f2	                bcc +
.80f0	69 06		adc #$06	                adc #$06
.80f2	4c f6 80	jmp $80f6	+               jmp help_emit_a       ; JSR/RTS
.80f5					help_to_lowercase:
.80f5	60		rts		                rts
.80f6					help_emit_a:
.80f6	6c 08 00	jmp ($0008)	                jmp (output)    ; JSR/RTS
.80f9					help_key_a:
.80f9	6c 0a 00	jmp ($000a)	                jmp (input)             ; JSR/RTS
.80fc					help_print_string_no_lf:
.80fc	0a		asl a		                asl
.80fd	a8		tay		                tay
.80fe	b9 67 81	lda $8167,y	                lda string_table,y
.8101	85 02		sta $02		                sta tmp0                ; LSB
.8103	c8		iny		                iny
.8104	b9 67 81	lda $8167,y	                lda string_table,y
.8107	85 03		sta $03		                sta tmp0+1              ; MSB
.8109					help_print_common:
.8109	a0 00		ldy #$00	                ldy #0
.810b					_loop:
.810b	b1 02		lda ($02),y	                lda (tmp0),y
.810d	f0 06		beq $8115	                beq _done               ; strings are zero-terminated
.810f	20 f6 80	jsr $80f6	                jsr help_emit_a         ; allows vectoring via output
.8112	c8		iny		                iny
.8113	80 f6		bra $810b	                bra _loop
.8115					_done:
.8115	60		rts		                rts
.8116					help_print_string:
.8116	20 fc 80	jsr $80fc	                jsr help_print_string_no_lf
.8119	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.811b	4c f6 80	jmp $80f6	                jmp help_emit_a         ; JSR/RTS
.811e					help_is_whitespace:
.811e	60		rts		        rts
.811f					help_is_delimiter:
.811f	60		rts		        rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.8120					proc_char_whitespace_p:
.8120					proc_newline:
.8120	64 00		stz $00		                stz return
.8122	64 01		stz $01		                stz return+1
.8124	a9 0a		lda #$0a	                lda #AscLF
.8126	4c f6 80	jmp $80f6	                jmp help_emit_a         ; JSR/RTS
.8129					proc_display:
.8129					proc_read:
.8129					proc_read_char:
.8129					proc_read_line:
.8129					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.8129					debug_dump_token:
.8129	a9 0a		lda #$0a	                lda #AscLF
.812b	20 f6 80	jsr $80f6	                jsr help_emit_a
.812e	a2 00		ldx #$00	                ldx #0
.8130					-
.8130	bd 00 03	lda $0300,x	                lda tkb,x
.8133	20 df 80	jsr $80df	                jsr help_byte_to_ascii  ; LSB
.8136	e8		inx		                inx
.8137	bd 00 03	lda $0300,x	                lda tkb,x
.813a	20 df 80	jsr $80df	                jsr help_byte_to_ascii  ; MSB
.813d	e8		inx		                inx
.813e	a9 20		lda #$20	                lda #' '
.8140	20 f6 80	jsr $80f6	                jsr help_emit_a
.8143	e4 12		cpx $12		                cpx tkbp
.8145	d0 e9		bne $8130	                bne -
.8147	a9 0a		lda #$0a	                lda #AscLF
.8149	4c f6 80	jmp $80f6	                jmp help_emit_a         ; JSR/RTS
.814c					debug_emit_a:
.814c	48		pha		                pha
.814d	a9 0a		lda #$0a	                lda #AscLF
.814f	20 f6 80	jsr $80f6	                jsr help_emit_a
.8152	68		pla		                pla
.8153	20 f6 80	jsr $80f6	                jsr help_emit_a
.8156	a9 0a		lda #$0a	                lda #AscLF
.8158	4c f6 80	jmp $80f6	                jmp help_emit_a         ; JSR/RTS

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
=$10					        AscCP   = $10  ; CTRL-p
=$0e					        AscCN   = $0e  ; CTRL-n
>0000					return:  .word ?     ; return value: result of a procedure
>0002					tmp0:    .word ?     ; temporary storage, eg printing
>0004					tmp1:    .word ?     ; temporary storage
>0006					tmp2:    .word ?     ; temporary storage
>0008					output:  .word ?     ; output port, addr of routine
>000a					input:   .word ?     ; input port, addr of routine
>000c					ciblen:  .word ?     ; current size of input buffer
>000e					cibp:    .word ?     ; pointer (index?) to current char in input buffer
>0010					tkblen:  .word ?     ; current size of the token buffer
>0012					tkbp:    .word ?     ; pointer (index?) to current token in token buffer
>0014					hp:      .word ?     ; pointer to next free heap entry
>0200					cib:    .fill cib_size  ; current input buffer
>0300					tkb:    .fill tkb_size  ; token buffer
=$00					t_meta         = $00    ; used for end of input and other markers
=$10					t_bool         = $10    ; used for #t and #f; immediate
=$20					t_fixnum       = $20    ; used for fixed numbers; immediate
=$30					t_bignum       = $30    ; used for bignum
=$40					t_char         = $40    ; used for cars; immediate
=$50					t_undefined_05 = $50
=$60					t_undefined_06 = $60
=$70					t_undefined_07 = $70
=$80					t_undefined_08 = $80
=$90					t_undefined_09 = $90
=$a0					t_undefined_0a = $a0
=$b0					t_undefined_0b = $b0
=$c0					t_undefined_0c = $c0
=$d0					t_undefined_0d = $d0
=$e0					t_undefined_0e = $e0
=$f0					t_undefined_0f = $f0
=$0000					oc_end   = $0000        ; end of input for tokens and objects
=$01ff					oc_true  = $01ff        ; true bool #t, immediate
=$0100					oc_false = $0100        ; false bool #f, immediate

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.815b					h_newline:
>815b	00 00				        .addr 0000              ; end of header list
>815d	20 81				        .addr proc_newline
>815f	07				        .byte 7
>8160	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound = 0
=1					str_unspec  = 1
.8167					string_table:
>8167	6b 81 7e 81			        .word s_unbound, s_unspec ; 0-4
>816b	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable:"            ; REPL input error
>8173	20 76 61 72 69 61 62 6c 65 3a 00
>817e	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8186	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8196	65 00
>8198	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>81a0	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
