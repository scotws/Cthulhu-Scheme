
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Sun Apr  5 20:40:09 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 08		sta $08		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 09		sta $09		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 14		sta $14		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 15		sta $15		                sta hp+1
.8011	64 16		stz $16		                stz symtbl
.8013	64 17		stz $17		                stz symtbl+1
.8015	64 18		stz $18		                stz strtbl
.8017	64 19		stz $19		                stz strtbl+1
.8019	64 1a		stz $1a		                stz bnmtbl
.801b	64 1b		stz $1b		                stz bnmtbl+1
.801d	64 1c		stz $1c		                stz ast
.801f	64 1d		stz $1d		                stz ast+1
.8021	a9 21		lda #$21	                lda #<kernel_getc
.8023	85 0a		sta $0a		                sta input
.8025	a9 f0		lda #$f0	                lda #>kernel_putc
.8027	85 0b		sta $0b		                sta input+1
.8029					repl:
.8029	64 0c		stz $0c		                stz ciblen
.802b	64 0d		stz $0d		                stz ciblen+1
.802d					repl_read:
.802d	a0 00		ldy #$00	                ldy #0
.802f	a9 3e		lda #$3e	                lda #'>'
.8031	20 99 81	jsr $8199	                jsr help_emit_a
.8034	a9 20		lda #$20	                lda #' '
.8036	20 99 81	jsr $8199	                jsr help_emit_a
.8039					repl_read_loop:
.8039	20 9c 81	jsr $819c	                jsr help_key_a
.803c	c9 0a		cmp #$0a	                cmp #AscLF
.803e	f0 17		beq $8057	                beq repl_read_eol
.8040	c9 0d		cmp #$0d	                cmp #AscCR
.8042	f0 13		beq $8057	                beq repl_read_eol
.8044	c9 08		cmp #$08	                cmp #AscBS
.8046	f0 16		beq $805e	                beq repl_read_backspace
.8048	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.804a	f0 12		beq $805e	                beq repl_read_backspace
.804c	99 00 02	sta $0200,y	                sta cib,y
.804f	c8		iny		                iny
.8050	20 99 81	jsr $8199	                jsr help_emit_a
.8053	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8055	d0 e2		bne $8039	                bne repl_read_loop    ; fall thru if buffer limit reached
.8057					repl_read_eol:
.8057					repl_read_buffer_full:
.8057	84 0c		sty $0c		                sty ciblen      ; Y contains number of chars accepted already
.8059	64 0d		stz $0d		                stz ciblen+1    ; we only accept 256 chars
.805b	4c a8 80	jmp $80a8	                jmp lexer
.805e					repl_read_backspace:
.805e	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8060	d0 06		bne $8068	                bne +
.8062	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8064	20 99 81	jsr $8199	                jsr help_emit_a
.8067	c8		iny		                iny
.8068					+
.8068	88		dey		                dey
.8069	a9 08		lda #$08	                lda #AscBS      ; move back one
.806b	20 99 81	jsr $8199	                jsr help_emit_a
.806e	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8070	20 99 81	jsr $8199	                jsr help_emit_a
.8073	a9 08		lda #$08	                lda #AscBS      ; move back over space
.8075	20 99 81	jsr $8199	                jsr help_emit_a
.8078	80 bf		bra $8039	                bra repl_read_loop
.807a					eval:
.807a	a9 65		lda #$65	                lda #'e'
.807c	20 f4 81	jsr $81f4	                jsr debug_emit_a
.807f					repl_print:
.807f	a5 00		lda $00		                lda return
.8081	05 01		ora $01		                ora return+1
.8083	d0 08		bne $808d	                bne _print_object
.8085	a9 01		lda #$01	                lda #str_unspec
.8087	20 b9 81	jsr $81b9	                jsr help_print_string
.808a	4c a5 80	jmp $80a5	                jmp repl_done
.808d					_print_object:
.808d	a5 01		lda $01		                lda return+1            ; MSB
.808f	29 f0		and #$f0	                and #$f0                ; we just want the tag in the top nibble
.8091	c9 10		cmp #$10	                cmp #ot_bool
.8093	d0 10		bne $80a5	                bne _print_fixnum
.8095	a5 00		lda $00		                lda return              ; $00 is false, $ff is true
.8097	d0 04		bne $809d	                bne _true
.8099	a9 03		lda #$03	                lda #str_false
.809b	80 02		bra $809f	                bra _print_bool
.809d					_true
.809d	a9 02		lda #$02	                lda #str_true
.809f					_print_bool:
.809f	20 b9 81	jsr $81b9	                jsr help_print_string
.80a2	4c a5 80	jmp $80a5	                jmp repl_done
.80a5					_print_fixnum:
.80a5					repl_done:
.80a5	4c 29 80	jmp $8029	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../lexer.asm

.80a8					lexer:
.80a8	a0 00		ldy #$00	                ldy #0
.80aa	84 12		sty $12		                sty tkbp
.80ac	84 13		sty $13		                sty tkbp+1      ; MSB currently unused
.80ae	84 0e		sty $0e		                sty cibp
.80b0	84 0f		sty $0f		                sty cibp+1      ; MSB currently unused
.80b2					lexer_loop:
.80b2	b9 00 02	lda $0200,y	                lda cib,y
.80b5	c9 40		cmp #$40	                cmp #'@'
.80b7	d0 01		bne $80ba	                bne +
.80b9	00		brk #		                brk
.80ba					+
.80ba	20 00 81	jsr $8100	                jsr lexer_eat_whitespace
.80bd					_test_parens:
.80bd					_test_sharp:
.80bd	c9 23		cmp #$23	                cmp #'#'
.80bf	d0 1c		bne $80dd	                bne _post_sharp_test    ; TODO weird label, but keep during editing
.80c1	c8		iny		                iny                     ; TODO see if we're past end of buffer
.80c2	b9 00 02	lda $0200,y	                lda cib,y
.80c5	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.80c7	d0 08		bne $80d1	                bne _test_bool_false
.80c9	a9 10		lda #$10	                lda #T_TRUE
.80cb	20 f5 80	jsr $80f5	                jsr lexer_add_token
.80ce	4c e5 80	jmp $80e5	                jmp lexer_next
.80d1					_test_bool_false:
.80d1	c9 66		cmp #$66	                cmp #'f'
.80d3	d0 08		bne $80dd	                bne _test_char
.80d5	a9 11		lda #$11	                lda #T_FALSE
.80d7	20 f5 80	jsr $80f5	                jsr lexer_add_token
.80da	4c e5 80	jmp $80e5	                jmp lexer_next
.80dd					_test_char:
.80dd					_test_vector:
.80dd					_test_radix:
.80dd					_post_sharp_test:
.80dd					_test_string:
.80dd					_test_number:
.80dd					_test_comment:
.80dd					lexer_error:
.80dd	a9 00		lda #$00	                lda #str_unbound
.80df	20 b9 81	jsr $81b9	                jsr help_print_string
.80e2	4c 29 80	jmp $8029	                jmp repl
.80e5					lexer_next:
.80e5	c8		iny		                iny
.80e6	c4 0c		cpy $0c		                cpy ciblen
.80e8	f0 03		beq $80ed	                beq _end_of_input
.80ea	4c b2 80	jmp $80b2	                jmp lexer_loop
.80ed					_end_of_input:
.80ed	a9 00		lda #$00	                lda #T_END
.80ef	20 f5 80	jsr $80f5	                jsr lexer_add_token
.80f2	4c 01 81	jmp $8101	                jmp parser
.80f5					lexer_add_token:
.80f5	5a		phy		                phy             ; Could also store in cibp
.80f6	a4 12		ldy $12		                ldy tkbp
.80f8	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.80fb	c8		iny		                iny
.80fc	84 12		sty $12		                sty tkbp
.80fe	7a		ply		                ply
.80ff	60		rts		                rts
.8100					lexer_eat_whitespace:
.8100	60		rts		        rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01    ; '('
=$02					T_PAREN_CLOSED  = $02    ; ')'
=$03					T_SHARP         = $03    ; '#' - note '#f', '#t' and others are precprocessed
=$04					T_LETTER        = $04    ; 'a' ... 'z', followed by single-byte ASCII letter
=$10					T_TRUE          = $10   ; '#t'
=$11					T_FALSE         = $11   ; '#f'
=$12					T_STRING        = $12   ; followed by 16-bit (12-bit) pointer to string in table
=$13					T_FIXNUM        = $13   ; followed by 16-bit (12-bit) number
=$14					T_SYMBOL        = $14   ; followed by 16-bit (12-bit) pointer to symbol in table
=$15					T_BIGNUM        = $15   ; followed by 16-bit (12-bit) pointer to number in table

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../parser.asm

.8101					parser:
.8101	20 cc 81	jsr $81cc	                jsr debug_dump_token
.8104	64 1c		stz $1c		                stz ast
.8106	64 1d		stz $1d		                stz ast+1
.8108	64 12		stz $12		                stz tkbp
.810a	64 13		stz $13		                stz tkbp+1      ; currently only using LSB
.810c	a9 1c		lda #$1c	                lda <#ast
.810e	85 1e		sta $1e		                sta astp
.8110	a9 00		lda #$00	                lda >#ast       ; paranoid, MSB always 00 for zero page
.8112	85 1f		sta $1f		                sta astp+1
.8114	a2 00		ldx #$00	                ldx #0
.8116					parser_loop:
.8116	bd 00 03	lda $0300,x	                lda tkb,x
.8119					_end_token:
.8119	c9 00		cmp #$00	                cmp #T_END
.811b	d0 00		bne $811d	                bne _true_token
.811d					_true_token:
.811d	c9 10		cmp #$10	                cmp #T_TRUE
.811f	d0 0a		bne $812b	                bne _false_token
.8121	a9 ff		lda #$ff	                lda <#OC_TRUE
.8123	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.8125	20 50 81	jsr $8150	                jsr parser_add_object
.8128	4c 46 81	jmp $8146	                jmp parser_done
.812b					_false_token:
.812b	c9 11		cmp #$11	                cmp #T_FALSE
.812d	d0 0a		bne $8139	                bne paser_bad_token     ; TODO HIER ADD NEXT TOKEN TODO
.812f	a9 ff		lda #$ff	                lda <#OC_TRUE
.8131	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.8133	20 50 81	jsr $8150	                jsr parser_add_object
.8136	4c 46 81	jmp $8146	                jmp parser_done
.8139					paser_bad_token:
.8139	48		pha		                pha                             ; save the evil token
.813a	a9 04		lda #$04	                lda #str_bad_token
.813c	20 9f 81	jsr $819f	                jsr help_print_string_no_lf
.813f	68		pla		                pla
.8140	20 99 81	jsr $8199	                jsr help_emit_a                 ; print bad token as hex number
.8143	4c 29 80	jmp $8029	                jmp repl
.8146					parser_done:
.8146	a9 00		lda #$00	                lda <#OC_END
.8148	a2 00		ldx #$00	                ldx >#OC_END
.814a	20 50 81	jsr $8150	                jsr parser_add_object
.814d	4c 7a 80	jmp $807a	                jmp eval                ; continue with evaluation
.8150					parser_add_object:
.8150	5a		phy		                phy             ; save MSB of the object
.8151	48		pha		                pha             ; save LSB of the object
.8152	a5 14		lda $14		                lda hp
.8154	85 02		sta $02		                sta tmp0
.8156	a5 15		lda $15		                lda hp+1
.8158	85 03		sta $03		                sta tmp0+1
.815a	a9 00		lda #$00	                lda <#OC_END
.815c	92 02		sta ($02)	                sta (tmp0)
.815e	a0 01		ldy #$01	                ldy #1
.8160	a9 00		lda #$00	                lda >#OC_END
.8162	91 02		sta ($02),y	                sta (tmp0),y
.8164	e6 14		inc $14		                inc hp
.8166	e6 14		inc $14		                inc hp
.8168	68		pla		                pla             ; retrieve LSB
.8169	92 14		sta ($14)	                sta (hp)
.816b	e6 14		inc $14		                inc hp
.816d	68		pla		                pla             ; retrieve MSB, was in Y
.816e	92 14		sta ($14)	                sta (hp)
.8170	e6 14		inc $14		                inc hp
.8172	a5 02		lda $02		                lda tmp0
.8174	aa		tax		                tax             ; We'll need it again in a second
.8175	92 1e		sta ($1e)	                sta (astp)
.8177	a0 01		ldy #$01	                ldy #1
.8179	a5 03		lda $03		                lda tmp0+1
.817b	91 1e		sta ($1e),y	                sta (astp),y
.817d	85 1f		sta $1f		                sta astp+1      ; MSB, was tmp0+1
.817f	86 1c		stx $1c		                stx ast         ; LSB, was tmp0
.8181	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for tokens and objects
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.8182					help_byte_to_ascii:
.8182	48		pha		                pha
.8183	4a		lsr a		                lsr             ; convert high nibble first
.8184	4a		lsr a		                lsr
.8185	4a		lsr a		                lsr
.8186	4a		lsr a		                lsr
.8187	20 8b 81	jsr $818b	                jsr help_nibble_to_ascii
.818a	68		pla		                pla
.818b					help_nibble_to_ascii:
.818b	29 0f		and #$0f	                and #$0F
.818d	09 30		ora #$30	                ora #'0'
.818f	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.8191	90 02		bcc $8195	                bcc +
.8193	69 06		adc #$06	                adc #$06
.8195	4c 99 81	jmp $8199	+               jmp help_emit_a       ; JSR/RTS
.8198					help_to_lowercase:
.8198	60		rts		                rts
.8199					help_emit_a:
.8199	6c 08 00	jmp ($0008)	                jmp (output)    ; JSR/RTS
.819c					help_key_a:
.819c	6c 0a 00	jmp ($000a)	                jmp (input)             ; JSR/RTS
.819f					help_print_string_no_lf:
.819f	0a		asl a		                asl
.81a0	a8		tay		                tay
.81a1	b9 42 82	lda $8242,y	                lda string_table,y
.81a4	85 02		sta $02		                sta tmp0                ; LSB
.81a6	c8		iny		                iny
.81a7	b9 42 82	lda $8242,y	                lda string_table,y
.81aa	85 03		sta $03		                sta tmp0+1              ; MSB
.81ac					help_print_common:
.81ac	a0 00		ldy #$00	                ldy #0
.81ae					_loop:
.81ae	b1 02		lda ($02),y	                lda (tmp0),y
.81b0	f0 06		beq $81b8	                beq _done               ; strings are zero-terminated
.81b2	20 99 81	jsr $8199	                jsr help_emit_a         ; allows vectoring via output
.81b5	c8		iny		                iny
.81b6	80 f6		bra $81ae	                bra _loop
.81b8					_done:
.81b8	60		rts		                rts
.81b9					help_print_string:
.81b9	20 9f 81	jsr $819f	                jsr help_print_string_no_lf
.81bc	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.81be	4c 99 81	jmp $8199	                jmp help_emit_a         ; JSR/RTS
.81c1					help_is_whitespace:
.81c1	60		rts		        rts
.81c2					help_is_delimiter:
.81c2	60		rts		        rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.81c3					proc_char_whitespace_p:
.81c3					proc_newline:
.81c3	64 00		stz $00		                stz return
.81c5	64 01		stz $01		                stz return+1
.81c7	a9 0a		lda #$0a	                lda #AscLF
.81c9	4c 99 81	jmp $8199	                jmp help_emit_a         ; JSR/RTS
.81cc					proc_display:
.81cc					proc_read:
.81cc					proc_read_char:
.81cc					proc_read_line:
.81cc					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.81cc					debug_dump_token:
.81cc	a9 0a		lda #$0a	                lda #AscLF
.81ce	20 99 81	jsr $8199	                jsr help_emit_a
.81d1	a9 00		lda #$00	                lda #strd_token_dump
.81d3	20 03 82	jsr $8203	                jsr debug_print_string_no_lf
.81d6	a2 00		ldx #$00	                ldx #0
.81d8					-
.81d8	bd 00 03	lda $0300,x	                lda tkb,x
.81db	c9 00		cmp #$00	                cmp #T_END
.81dd	f0 0d		beq $81ec	                beq _done
.81df	20 82 81	jsr $8182	                jsr help_byte_to_ascii
.81e2	e8		inx		                inx
.81e3	a9 20		lda #$20	                lda #' '
.81e5	20 99 81	jsr $8199	                jsr help_emit_a
.81e8	e4 12		cpx $12		                cpx tkbp
.81ea	d0 ec		bne $81d8	                bne -
.81ec					_done:
.81ec	20 82 81	jsr $8182	                jsr help_byte_to_ascii
.81ef	a9 0a		lda #$0a	                lda #AscLF
.81f1	4c 99 81	jmp $8199	                jmp help_emit_a         ; JSR/RTS
.81f4					debug_emit_a:
.81f4	48		pha		                pha
.81f5	a9 0a		lda #$0a	                lda #AscLF
.81f7	20 99 81	jsr $8199	                jsr help_emit_a
.81fa	68		pla		                pla
.81fb	20 99 81	jsr $8199	                jsr help_emit_a
.81fe	a9 0a		lda #$0a	                lda #AscLF
.8200	4c 99 81	jmp $8199	                jmp help_emit_a         ; JSR/RTS
.8203					debug_print_string_no_lf:
.8203	0a		asl a		                asl
.8204	a8		tay		                tay
.8205	b9 34 82	lda $8234,y	                lda sd_table,y
.8208	85 02		sta $02		                sta tmp0                ; LSB
.820a	c8		iny		                iny
.820b	b9 34 82	lda $8234,y	                lda sd_table,y
.820e	85 03		sta $03		                sta tmp0+1              ; MSB
.8210					debug_print_common:
.8210	a0 00		ldy #$00	                ldy #0
.8212					_loop:
.8212	b1 02		lda ($02),y	                lda (tmp0),y
.8214	f0 06		beq $821c	                beq _done               ; strings are zero-terminated
.8216	20 99 81	jsr $8199	                jsr help_emit_a         ; allows vectoring via output
.8219	c8		iny		                iny
.821a	80 f6		bra $8212	                bra _loop
.821c					_done:
.821c	60		rts		                rts
.821d					debug_print_string:
.821d	20 03 82	jsr $8203	                jsr debug_print_string_no_lf
.8220	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.8222	4c 99 81	jmp $8199	                jmp help_emit_a         ; JSR/RTS
=0					strd_token_dump = 0
>8225	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>822d	66 66 65 72 3a 20 00
.8234					sd_table:
>8234	25 82				        .word s_dump_token              ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
=$10					        AscCP   = $10  ; CTRL-p
=$0e					        AscCN   = $0e  ; CTRL-n
>0000					return:  .word ?     ; return value: result of a procedure
>0002					tmp0:    .word ?     ; temporary storage, eg printing
>0004					tmp1:    .word ?     ; temporary storage
>0006					tmp2:    .word ?     ; temporary storage
>0008					output:  .word ?     ; output port, addr of routine
>000a					input:   .word ?     ; input port, addr of routine
>000c					ciblen:  .word ?     ; current size of input buffer
>000e					cibp:    .word ?     ; index of current char in input buffer
>0010					tkblen:  .word ?     ; current size of the token buffer
>0012					tkbp:    .word ?     ; index of current token in token buffer
>0014					hp:      .word ?     ; pointer to next free heap entry
>0016					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0018					strtbl:  .word ?     ; pointer to first entry in string table in heap
>001a					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001c					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001e					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					ot_meta         = $00    ; used for end of input and other markers
=$10					ot_bool         = $10    ; used for #t and #f; immediate
=$20					ot_fixnum       = $20    ; used for fixed numbers; immediate
=$30					ot_bignum       = $30    ; used for bignum
=$40					ot_char         = $40    ; used for chars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8236					h_newline:
>8236	00 00				        .addr 0000              ; end of header list
>8238	c3 81				        .addr proc_newline
>823a	07				        .byte 7
>823b	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound   = 0
=1					str_unspec    = 1
=2					str_true      = 2
=3					str_false     = 3
=4					str_bad_token = 4
.8242					string_table:
>8242	4c 82 5f 82 79 82 7c 82		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>824a	7f 82				        .word s_bad_token                               ; 4-7
>824c	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable:"            ; REPL input error
>8254	20 76 61 72 69 61 62 6c 65 3a 00
>825f	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8267	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8277	65 00
>8279	23 74 00			s_true:         .null   "#t"
>827c	23 66 00			s_false:        .null   "#f"
>827f	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: "            ; from parser
>8287	61 64 20 74 6f 6b 65 6e 3a 20 00
>8292	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>829a	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
