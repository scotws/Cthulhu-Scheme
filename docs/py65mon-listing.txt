
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Fri Apr 10 10:17:19 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 12		sta $12		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 13		sta $13		                sta hp+1
.8011	64 14		stz $14		                stz symtbl
.8013	64 15		stz $15		                stz symtbl+1
.8015	64 16		stz $16		                stz strtbl
.8017	64 17		stz $17		                stz strtbl+1
.8019	64 18		stz $18		                stz bnmtbl
.801b	64 19		stz $19		                stz bnmtbl+1
.801d	64 1a		stz $1a		                stz ast
.801f	64 1b		stz $1b		                stz ast+1
.8021	a9 21		lda #$21	                lda #<kernel_getc
.8023	85 08		sta $08		                sta input
.8025	a9 f0		lda #$f0	                lda #>kernel_putc
.8027	85 09		sta $09		                sta input+1
.8029					repl:
.8029	64 0a		stz $0a		                stz ciblen
.802b	64 0b		stz $0b		                stz ciblen+1
.802d					repl_read:
.802d	a0 00		ldy #$00	                ldy #0
.802f	a9 3e		lda #$3e	                lda #'>'
.8031	20 d3 81	jsr $81d3	                jsr help_emit_a
.8034	a9 20		lda #$20	                lda #' '
.8036	20 d3 81	jsr $81d3	                jsr help_emit_a
.8039					repl_read_loop:
.8039	20 d6 81	jsr $81d6	                jsr help_key_a
.803c	c9 0a		cmp #$0a	                cmp #AscLF
.803e	f0 17		beq $8057	                beq repl_read_eol
.8040	c9 0d		cmp #$0d	                cmp #AscCR
.8042	f0 13		beq $8057	                beq repl_read_eol
.8044	c9 08		cmp #$08	                cmp #AscBS
.8046	f0 16		beq $805e	                beq repl_read_backspace
.8048	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.804a	f0 12		beq $805e	                beq repl_read_backspace
.804c	99 00 02	sta $0200,y	                sta cib,y
.804f	c8		iny		                iny
.8050	20 d3 81	jsr $81d3	                jsr help_emit_a
.8053	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8055	d0 e2		bne $8039	                bne repl_read_loop    ; fall thru if buffer limit reached
.8057					repl_read_eol:
.8057					repl_read_buffer_full:
.8057	84 0a		sty $0a		                sty ciblen      ; Y contains number of chars accepted already
.8059	64 0b		stz $0b		                stz ciblen+1    ; we only accept 256 chars
.805b	4c 7a 80	jmp $807a	                jmp lexer
.805e					repl_read_backspace:
.805e	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8060	d0 06		bne $8068	                bne +
.8062	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8064	20 d3 81	jsr $81d3	                jsr help_emit_a
.8067	c8		iny		                iny
.8068					+
.8068	88		dey		                dey
.8069	a9 08		lda #$08	                lda #AscBS      ; move back one
.806b	20 d3 81	jsr $81d3	                jsr help_emit_a
.806e	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8070	20 d3 81	jsr $81d3	                jsr help_emit_a
.8073	a9 08		lda #$08	                lda #AscBS      ; move back over space
.8075	20 d3 81	jsr $81d3	                jsr help_emit_a
.8078	80 bf		bra $8039	                bra repl_read_loop

;******  Processing file: platforms/../lexer.asm

.807a					lexer:
.807a	a0 00		ldy #$00	                ldy #0
.807c	64 0c		stz $0c		                stz cibp
.807e	64 0d		stz $0d		                stz cibp+1      ; MSB currently unused
.8080	64 10		stz $10		                stz tkbp
.8082	64 11		stz $11		                stz tkbp+1      ; MSB currently unused
.8084					lexer_loop:
.8084	b9 00 02	lda $0200,y	                lda cib,y
.8087	20 fb 81	jsr $81fb	                jsr help_is_whitespace
.808a	90 03		bcc $808f	                bcc _not_whitespace
.808c	4c b7 80	jmp $80b7	                jmp lexer_next
.808f					_not_whitespace:
.808f					_test_parens:
.808f					_test_sharp:
.808f	c9 23		cmp #$23	                cmp #'#'
.8091	d0 1c		bne $80af	                bne _post_sharp_test    ; TODO weird label, but keep during editing
.8093	c8		iny		                iny                     ; TODO see if we're past end of buffer
.8094	b9 00 02	lda $0200,y	                lda cib,y
.8097	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.8099	d0 08		bne $80a3	                bne _test_bool_false
.809b	a9 10		lda #$10	                lda #T_TRUE
.809d	20 c7 80	jsr $80c7	                jsr lexer_add_token
.80a0	4c b7 80	jmp $80b7	                jmp lexer_next
.80a3					_test_bool_false:
.80a3	c9 66		cmp #$66	                cmp #'f'
.80a5	d0 08		bne $80af	                bne _test_char
.80a7	a9 11		lda #$11	                lda #T_FALSE
.80a9	20 c7 80	jsr $80c7	                jsr lexer_add_token
.80ac	4c b7 80	jmp $80b7	                jmp lexer_next
.80af					_test_char:
.80af					_test_vector:
.80af					_test_radix:
.80af					_post_sharp_test:
.80af					_test_string:
.80af					_test_number:
.80af					_test_comment:
.80af					lexer_error:
.80af	a9 00		lda #$00	                lda #str_unbound
.80b1	20 f3 81	jsr $81f3	                jsr help_print_string
.80b4	4c 29 80	jmp $8029	                jmp repl
.80b7					lexer_next:
.80b7	c8		iny		                iny
.80b8	c4 0a		cpy $0a		                cpy ciblen
.80ba	f0 03		beq $80bf	                beq _end_of_input
.80bc	4c 84 80	jmp $8084	                jmp lexer_loop
.80bf					_end_of_input:
.80bf	a9 00		lda #$00	                lda #T_END
.80c1	20 c7 80	jsr $80c7	                jsr lexer_add_token
.80c4	4c d2 80	jmp $80d2	                jmp lexer_done
.80c7					lexer_add_token:
.80c7	5a		phy		                phy             ; Could also store in cibp
.80c8	a4 10		ldy $10		                ldy tkbp
.80ca	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.80cd	c8		iny		                iny
.80ce	84 10		sty $10		                sty tkbp
.80d0	7a		ply		                ply
.80d1	60		rts		                rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01    ; '('
=$02					T_PAREN_CLOSED  = $02    ; ')'
=$03					T_SHARP         = $03    ; '#' - note '#f', '#t' and others are precprocessed
=$04					T_LETTER        = $04    ; 'a' ... 'z', followed by single-byte ASCII letter
=$10					T_TRUE          = $10   ; '#t'
=$11					T_FALSE         = $11   ; '#f'
=$12					T_STRING        = $12   ; followed by 16-bit (12-bit) pointer to string in table
=$13					T_FIXNUM        = $13   ; followed by 16-bit (12-bit) number
=$14					T_SYMBOL        = $14   ; followed by 16-bit (12-bit) pointer to symbol in table
=$15					T_BIGNUM        = $15   ; followed by 16-bit (12-bit) pointer to number in table
.80d2					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.80d2					parser:
.80d2	20 13 82	jsr $8213	                jsr debug_dump_token
.80d5	64 1a		stz $1a		                stz ast
.80d7	64 1b		stz $1b		                stz ast+1
.80d9	64 10		stz $10		                stz tkbp
.80db	64 11		stz $11		                stz tkbp+1      ; fake, currently only using LSB
.80dd	a9 1a		lda #$1a	                lda <#ast
.80df	85 1c		sta $1c		                sta astp
.80e1	a9 00		lda #$00	                lda >#ast       ; paranoid, MSB always 00 for zero page
.80e3	85 1d		sta $1d		                sta astp+1
.80e5	a2 00		ldx #$00	                ldx #0
.80e7					parser_loop:
.80e7	bd 00 03	lda $0300,x	                lda tkb,x
.80ea					_end_token:
.80ea	c9 00		cmp #$00	                cmp #T_END
.80ec	d0 00		bne $80ee	                bne _true_token
.80ee					_true_token:
.80ee	c9 10		cmp #$10	                cmp #T_TRUE
.80f0	d0 0a		bne $80fc	                bne _not_true_token
.80f2	a9 ff		lda #$ff	                lda <#OC_TRUE
.80f4	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.80f6	20 17 81	jsr $8117	                jsr parser_add_object
.80f9	4c 57 81	jmp $8157	                jmp parser_done
.80fc					_not_true_token:
.80fc	c9 11		cmp #$11	                cmp #T_FALSE
.80fe	d0 0a		bne $810a	                bne _not_false_token
.8100	a9 00		lda #$00	                lda <#OC_FALSE
.8102	a0 10		ldy #$10	                ldy >#OC_FALSE
.8104	20 17 81	jsr $8117	                jsr parser_add_object
.8107	4c 57 81	jmp $8157	                jmp parser_done
.810a					_not_false_token:
.810a					paser_bad_token:
.810a	48		pha		                pha                             ; save the evil token
.810b	a9 04		lda #$04	                lda #str_bad_token
.810d	20 d9 81	jsr $81d9	                jsr help_print_string_no_lf
.8110	68		pla		                pla
.8111	20 d3 81	jsr $81d3	                jsr help_emit_a                 ; print bad token as hex number
.8114	4c 29 80	jmp $8029	                jmp repl
.8117					parser_add_object:
.8117	5a		phy		                phy             ; save MSB of the object
.8118	48		pha		                pha             ; save LSB of the object
.8119	a5 12		lda $12		                lda hp
.811b	85 00		sta $00		                sta tmp0
.811d	a5 13		lda $13		                lda hp+1
.811f	85 01		sta $01		                sta tmp0+1
.8121	a9 00		lda #$00	                lda <#OC_END
.8123	a0 00		ldy #$00	                ldy #0
.8125	91 12		sta ($12),y	                sta (hp),y
.8127	c8		iny		                iny
.8128	a9 00		lda #$00	                lda >#OC_END
.812a	91 12		sta ($12),y	                sta (hp),y
.812c	c8		iny		                iny
.812d	68		pla		                pla             ; retrieve LSB
.812e	91 12		sta ($12),y	                sta (hp),y
.8130	c8		iny		                iny
.8131	68		pla		                pla             ; retrieve MSB, was in Y
.8132	91 12		sta ($12),y	                sta (hp),y
.8134	c8		iny		                iny
.8135	a9 00		lda #$00	                lda #0
.8137	91 12		sta ($12),y	                sta (hp),y
.8139	c8		iny		                iny
.813a	91 12		sta ($12),y	                sta (hp),y
.813c	c8		iny		                iny
.813d	98		tya		                tya
.813e	18		clc		                clc
.813f	65 12		adc $12		                adc hp
.8141	85 12		sta $12		                sta hp
.8143	90 02		bcc $8147	                bcc +
.8145	e6 13		inc $13		                inc hp+1
.8147					+
.8147	a5 00		lda $00		                lda tmp0        ; original LSB of hp
.8149	aa		tax		                tax             ; We'll need it again in a second
.814a	92 1c		sta ($1c)	                sta (astp)
.814c	a0 01		ldy #$01	                ldy #1
.814e	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp
.8150	91 1c		sta ($1c),y	                sta (astp),y
.8152	85 1d		sta $1d		                sta astp+1      ; MSB, was tmp0+1
.8154	86 1c		stx $1c		                stx astp        ; LSB, was tmp0
.8156	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate
.8157					parser_done:
.8157	a9 00		lda #$00	                lda <#OC_END
.8159	a2 00		ldx #$00	                ldx >#OC_END
.815b	20 17 81	jsr $8117	                jsr parser_add_object

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.815e					eval:
.815e	20 4a 82	jsr $824a	                jsr debug_dump_ast
.8161	20 36 82	jsr $8236	                jsr debug_dump_hp
.8164					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.8164					printer:
.8164	a9 0a		lda #$0a	        lda #AscLF
.8166	20 d3 81	jsr $81d3	        jsr help_emit_a
.8169	a5 1a		lda $1a		                lda ast
.816b	85 02		sta $02		                sta tmp1
.816d	a5 1b		lda $1b		                lda ast+1
.816f	85 03		sta $03		                sta tmp1+1
.8171					printer_loop:
.8171	a0 03		ldy #$03	                ldy #3                  ; MSB of the next node entry down ...
.8173	b1 02		lda ($02),y	                lda (tmp1),y            ; ...  which contains the tag nibble
.8175	29 f0		and #$f0	                and #$f0                ; mask all but tag nibble
.8177					_check_for_meta:
.8177	c9 00		cmp #$00	                cmp #ot_meta
.8179	d0 07		bne $8182	                bne _not_meta
.817b	12 02		ora ($02)	                ora (tmp1)              ; LSB
.817d	d0 19		bne $8198	                bne printer_error       ; We're in trouble, panic and re-REPL
.817f	4c b9 81	jmp $81b9	                jmp printer_done
.8182					_not_meta:
.8182	c9 10		cmp #$10	                cmp #ot_bool
.8184	d0 12		bne $8198	                bne _not_bool
.8186	a0 02		ldy #$02	                ldy #2
.8188	b1 02		lda ($02),y	                lda (tmp1),y            ; LSB
.818a	d0 04		bne $8190	                bne _bool_true          ; not a zero means true
.818c	a9 03		lda #$03	                lda #str_false
.818e	80 02		bra $8192	                bra _bool_printer
.8190					_bool_true:
.8190	a9 02		lda #$02	                lda #str_true
.8192					_bool_printer:
.8192	20 f3 81	jsr $81f3	                jsr help_print_string
.8195	4c ab 81	jmp $81ab	                jmp printer_next
.8198					_not_bool:
.8198					printer_error:
.8198	a5 05		lda $05		                lda str_bad_object
.819a	20 d9 81	jsr $81d9	                jsr help_print_string_no_lf
.819d	a0 01		ldy #$01	                ldy #1
.819f	b1 02		lda ($02),y	                lda (tmp1),y
.81a1	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.81a4	b2 02		lda ($02)	                lda (tmp1)
.81a6	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.81a9	80 0e		bra $81b9	                bra printer_done
.81ab					printer_next:
.81ab	b2 02		lda ($02)	                lda (tmp1)              ; LSB of next entry
.81ad	aa		tax		                tax
.81ae	a0 01		ldy #$01	                ldy #1
.81b0	b1 02		lda ($02),y	                lda (tmp1),y            ; MSB of next entry
.81b2	85 03		sta $03		                sta tmp1+1
.81b4	86 02		stx $02		                stx tmp1
.81b6	4c 71 81	jmp $8171	                jmp printer_loop
.81b9					printer_done:

;******  Return to file: platforms/../cthulhu.asm

.81b9					repl_done:
.81b9	4c 29 80	jmp $8029	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.81bc					help_byte_to_ascii:
.81bc	48		pha		                pha
.81bd	4a		lsr a		                lsr             ; convert high nibble first
.81be	4a		lsr a		                lsr
.81bf	4a		lsr a		                lsr
.81c0	4a		lsr a		                lsr
.81c1	20 c5 81	jsr $81c5	                jsr help_nibble_to_ascii
.81c4	68		pla		                pla
.81c5					help_nibble_to_ascii:
.81c5	29 0f		and #$0f	                and #$0F
.81c7	09 30		ora #$30	                ora #'0'
.81c9	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.81cb	90 02		bcc $81cf	                bcc +
.81cd	69 06		adc #$06	                adc #$06
.81cf	4c d3 81	jmp $81d3	+               jmp help_emit_a       ; JSR/RTS
.81d2					help_to_lowercase:
.81d2	60		rts		                rts
.81d3					help_emit_a:
.81d3	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.81d6					help_key_a:
.81d6	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.81d9					help_print_string_no_lf:
.81d9	0a		asl a		                asl
.81da	a8		tay		                tay
.81db	b9 15 83	lda $8315,y	                lda string_table,y
.81de	85 00		sta $00		                sta tmp0                ; LSB
.81e0	c8		iny		                iny
.81e1	b9 15 83	lda $8315,y	                lda string_table,y
.81e4	85 01		sta $01		                sta tmp0+1              ; MSB
.81e6					help_print_common:
.81e6	a0 00		ldy #$00	                ldy #0
.81e8					_loop:
.81e8	b1 00		lda ($00),y	                lda (tmp0),y
.81ea	f0 06		beq $81f2	                beq _done               ; strings are zero-terminated
.81ec	20 d3 81	jsr $81d3	                jsr help_emit_a         ; allows vectoring via output
.81ef	c8		iny		                iny
.81f0	80 f6		bra $81e8	                bra _loop
.81f2					_done:
.81f2	60		rts		                rts
.81f3					help_print_string:
.81f3	20 d9 81	jsr $81d9	                jsr help_print_string_no_lf
.81f6	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.81f8	4c d3 81	jmp $81d3	                jmp help_emit_a         ; JSR/RTS
.81fb					help_is_whitespace:
.81fb	38		sec		                sec             ; default is whitespace
.81fc	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.81fe	f0 11		beq $8211	                beq _done
.8200	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.8202	f0 0d		beq $8211	                beq _done
.8204	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.8206	f0 09		beq $8211	                beq _done
.8208	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.820a	f0 05		beq $8211	                beq _done
.820c	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.820e	f0 01		beq $8211	                beq _done
.8210	18		clc		                clc             ; If we end up here, it's not whitespace
.8211					_done:
.8211	60		rts		                rts
.8212					help_is_delimiter:
.8212	60		rts		        rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.8213					proc_char_whitespace_p:
.8213					proc_newline:
.8213					proc_display:
.8213					proc_read:
.8213					proc_read_char:
.8213					proc_read_line:
.8213					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.8213					debug_dump_token:
.8213	a9 0a		lda #$0a	                lda #AscLF
.8215	20 d3 81	jsr $81d3	                jsr help_emit_a
.8218	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.821a	20 bd 82	jsr $82bd	                jsr debug_print_string_no_lf
.821d	a2 00		ldx #$00	                ldx #0
.821f					-
.821f	bd 00 03	lda $0300,x	                lda tkb,x
.8222	c9 00		cmp #$00	                cmp #T_END
.8224	f0 0d		beq $8233	                beq _done
.8226	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.8229	e8		inx		                inx
.822a	a9 20		lda #$20	                lda #' '
.822c	20 d3 81	jsr $81d3	                jsr help_emit_a
.822f	e4 10		cpx $10		                cpx tkbp
.8231	d0 ec		bne $821f	                bne -
.8233					_done:
.8233	4c bc 81	jmp $81bc	                jmp help_byte_to_ascii          ; JSR/RTS
.8236					debug_dump_hp:
.8236	a9 0a		lda #$0a	                lda #AscLF
.8238	20 d3 81	jsr $81d3	                jsr help_emit_a
.823b	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.823d	20 bd 82	jsr $82bd	                jsr debug_print_string_no_lf
.8240	a5 13		lda $13		                lda hp+1
.8242	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.8245	a5 12		lda $12		                lda hp
.8247	4c bc 81	jmp $81bc	                jmp help_byte_to_ascii          ; JSR/RTS
.824a					debug_dump_ast:
.824a	a9 0a		lda #$0a	                lda #AscLF
.824c	20 d3 81	jsr $81d3	                jsr help_emit_a
.824f	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.8251	20 bd 82	jsr $82bd	                jsr debug_print_string_no_lf
.8254	a5 1b		lda $1b		                lda ast+1
.8256	85 03		sta $03		                sta tmp1+1
.8258	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.825b	a5 1a		lda $1a		                lda ast
.825d	85 02		sta $02		                sta tmp1
.825f	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.8262					_loop:
.8262	a9 20		lda #$20	                lda #' '
.8264	20 d3 81	jsr $81d3	                jsr help_emit_a
.8267	a0 01		ldy #$01	                ldy #1
.8269	b1 02		lda ($02),y	                lda (tmp1),y
.826b	85 05		sta $05		                sta tmp2+1
.826d	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii          ; MSB
.8270	b2 02		lda ($02)	                lda (tmp1)
.8272	85 04		sta $04		                sta tmp2                        ; pointer to next entry, LSB
.8274	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii          ; LSB
.8277	a9 3a		lda #$3a	                lda #':'
.8279	20 d3 81	jsr $81d3	                jsr help_emit_a
.827c	a0 03		ldy #$03	                ldy #3
.827e	b1 02		lda ($02),y	                lda (tmp1),y
.8280	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.8283	a0 02		ldy #$02	                ldy #2
.8285	b1 02		lda ($02),y	                lda (tmp1),y
.8287	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.828a	a9 3a		lda #$3a	                lda #':'
.828c	20 d3 81	jsr $81d3	                jsr help_emit_a
.828f	a0 05		ldy #$05	                ldy #5
.8291	b1 02		lda ($02),y	                lda (tmp1),y
.8293	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.8296	a0 04		ldy #$04	                ldy #4
.8298	b1 02		lda ($02),y	                lda (tmp1),y
.829a	20 bc 81	jsr $81bc	                jsr help_byte_to_ascii
.829d	a5 04		lda $04		                lda tmp2
.829f	05 05		ora $05		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.82a1	f0 0a		beq $82ad	                beq _done
.82a3	a5 04		lda $04		                lda tmp2
.82a5	85 02		sta $02		                sta tmp1
.82a7	a5 05		lda $05		                lda tmp2+1
.82a9	85 03		sta $03		                sta tmp1+1
.82ab	80 b5		bra $8262	                bra _loop
.82ad					_done:
.82ad	60		rts		                rts
.82ae					debug_emit_a:
.82ae	48		pha		                pha
.82af	a9 0a		lda #$0a	                lda #AscLF
.82b1	20 d3 81	jsr $81d3	                jsr help_emit_a
.82b4	68		pla		                pla
.82b5	20 d3 81	jsr $81d3	                jsr help_emit_a
.82b8	a9 0a		lda #$0a	                lda #AscLF
.82ba	4c d3 81	jmp $81d3	                jmp help_emit_a         ; JSR/RTS
.82bd					debug_print_string_no_lf:
.82bd	0a		asl a		                asl
.82be	a8		tay		                tay
.82bf	b9 03 83	lda $8303,y	                lda sd_table,y
.82c2	85 00		sta $00		                sta tmp0                ; LSB
.82c4	c8		iny		                iny
.82c5	b9 03 83	lda $8303,y	                lda sd_table,y
.82c8	85 01		sta $01		                sta tmp0+1              ; MSB
.82ca					debug_print_common:
.82ca	a0 00		ldy #$00	                ldy #0
.82cc					_loop:
.82cc	b1 00		lda ($00),y	                lda (tmp0),y
.82ce	f0 06		beq $82d6	                beq _done               ; strings are zero-terminated
.82d0	20 d3 81	jsr $81d3	                jsr help_emit_a         ; allows vectoring via output
.82d3	c8		iny		                iny
.82d4	80 f6		bra $82cc	                bra _loop
.82d6					_done:
.82d6	60		rts		                rts
.82d7					debug_print_string:
.82d7	20 bd 82	jsr $82bd	                jsr debug_print_string_no_lf
.82da	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.82dc	4c d3 81	jmp $81d3	                jmp help_emit_a         ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
>82df	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>82e7	66 66 65 72 3a 20 00
>82ee	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>82f4	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>82fc	6e 74 65 72 3a 20 00
.8303					sd_table:
>8303	df 82 ee 82 f4 82		        .word s_dump_token, s_dump_ast, s_dump_hp              ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					ciblen:  .word ?     ; current size of input buffer
>000c					cibp:    .word ?     ; index of current char in input buffer
>000e					tkblen:  .word ?     ; current size of the token buffer
>0010					tkbp:    .word ?     ; index of current token in token buffer
>0012					hp:      .word ?     ; pointer to next free heap entry
>0014					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0016					strtbl:  .word ?     ; pointer to first entry in string table in heap
>0018					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001a					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001c					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					ot_meta         = $00    ; used for end of input and other markers
=$10					ot_bool         = $10    ; used for #t and #f; immediate
=$20					ot_fixnum       = $20    ; used for fixed numbers; immediate
=$30					ot_bignum       = $30    ; used for bignum
=$40					ot_char         = $40    ; used for chars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8309					h_newline:
>8309	00 00				        .addr 0000              ; end of header list
>830b	13 82				        .addr proc_newline
>830d	07				        .byte 7
>830e	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
.8315					string_table:
>8315	21 83 34 83 4e 83 51 83		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>831d	54 83 67 83			        .word s_bad_token, s_bad_object                 ; 4-7
>8321	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable:"            ; REPL input error
>8329	20 76 61 72 69 61 62 6c 65 3a 00
>8334	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>833c	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>834c	65 00
>834e	23 74 00			s_true:         .null   "#t"
>8351	23 66 00			s_false:        .null   "#f"
>8354	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: "            ; from parser
>835c	61 64 20 74 6f 6b 65 6e 3a 20 00
>8367	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>836f	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>837f	3a 20 00
>8382	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>838a	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
