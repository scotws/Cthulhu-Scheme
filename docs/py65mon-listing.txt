
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Sat Apr 18 11:02:36 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=true					STRING_CR_TO_LF = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                        cld
.8001	a9 27		lda #$27	                        lda #<kernel_putc
.8003	85 06		sta $06		                        sta output
.8005	a9 f0		lda #$f0	                        lda #>kernel_putc
.8007	85 07		sta $07		                        sta output+1
.8009	a9 00		lda #$00	                        lda <#heap
.800b	85 13		sta $13		                        sta hp
.800d	a9 04		lda #$04	                        lda >#heap
.800f	85 14		sta $14		                        sta hp+1
.8011	64 15		stz $15		                        stz symtbl
.8013	64 16		stz $16		                        stz symtbl+1
.8015	64 17		stz $17		                        stz strtbl
.8017	64 18		stz $18		                        stz strtbl+1
.8019	64 19		stz $19		                        stz bnmtbl
.801b	64 1a		stz $1a		                        stz bnmtbl+1
.801d	64 1b		stz $1b		                        stz ast
.801f	64 1c		stz $1c		                        stz ast+1
.8021	a9 21		lda #$21	                        lda #<kernel_getc
.8023	85 08		sta $08		                        sta input
.8025	a9 f0		lda #$f0	                        lda #>kernel_putc
.8027	85 09		sta $09		                        sta input+1
.8029					repl:
.8029	64 0a		stz $0a		                        stz ciblen
.802b	64 0b		stz $0b		                        stz ciblen+1

;******  Processing file: platforms/../reader.asm

.802d					reader:
.802d	64 0e		stz $0e		                        stz input_f
.802f	a9 0b		lda #$0b	                        lda #str_prompt
.8031	20 7a 84	jsr $847a	                        jsr help_print_string_no_lf
.8034	a0 00		ldy #$00	                        ldy #0
.8036					reader_loop:
.8036	20 77 84	jsr $8477	                        jsr help_key_a
.8039	c9 0a		cmp #$0a	                        cmp #AscLF
.803b	f0 3b		beq $8078	                        beq reader_got_eol
.803d	c9 0d		cmp #$0d	                        cmp #AscCR
.803f	f0 37		beq $8078	                        beq reader_got_eol
.8041					_not_an_eol:
.8041					_not_a_parens:
.8041	c9 3b		cmp #$3b	                        cmp #$3B                ; semicolon
.8043	d0 08		bne $804d	                        bne _not_a_comment
.8045	aa		tax		                        tax                     ; Save semicolon char
.8046	a9 80		lda #$80	                        lda #$80                ; Get ready to set bit 7
.8048	04 0e		tsb $0e		                        tsb input_f             ; 65c02 only
.804a	8a		txa		                        txa
.804b	80 1d		bra $806a	                        bra reader_comment_continue     ; saves char
.804d					_not_a_comment:
.804d	c9 22		cmp #$22	                        cmp #$22                ; quotation mark '"'
.804f	d0 0a		bne $805b	                        bne _not_a_string
.8051	aa		tax		                        tax                     ; Save quotation mark char
.8052	a5 0e		lda $0e		                        lda input_f
.8054	49 40		eor #$40	                        eor #%01000000          ; flip bit 6
.8056	85 0e		sta $0e		                        sta input_f
.8058	8a		txa		                        txa
.8059	80 0f		bra $806a	                        bra reader_string_continue      ; saves char
.805b					_not_a_string:
.805b	c9 08		cmp #$08	                        cmp #AscBS
.805d	f0 2e		beq $808d	                        beq reader_backspace
.805f	c9 7f		cmp #$7f	                        cmp #AscDEL             ; Is the same as CTRL-h
.8061	f0 2a		beq $808d	                        beq reader_backspace
.8063	c9 04		cmp #$04	                        cmp #$04
.8065	d0 03		bne $806a	                        bne reader_normal_char
.8067	4c 4b 84	jmp $844b	                        jmp repl_quit
.806a					reader_normal_char:
.806a					reader_comment_continue:
.806a					reader_string_continue:
.806a	20 74 84	jsr $8474	                        jsr help_emit_a
.806d	99 00 02	sta $0200,y	                        sta cib,y
.8070	c8		iny		                        iny
.8071	cc 00 01	cpy $0100	                        cpy cib_size
.8074	90 34		bcc $80aa	                        bcc reader_buffer_full
.8076	80 be		bra $8036	                        bra reader_loop
.8078					reader_got_eol:
.8078	a5 0e		lda $0e		                        lda input_f             ; bit 7 marks comment
.807a	30 09		bmi $8085	                        bmi _eol_in_comment
.807c	29 7f		and #$7f	                        and #%01111111          ; input_f already in A
.807e	d0 09		bne $8089	                        bne _eol_in_parens_or_string
.8080	20 74 84	jsr $8474	                        jsr help_emit_a
.8083	80 25		bra $80aa	                        bra reader_input_done
.8085					_eol_in_comment:
.8085	a9 80		lda #$80	                        lda #$80
.8087	14 0e		trb $0e		                        trb input_f             ; bit 7 marks comment, now clear
.8089					_eol_in_parens_or_string:
.8089	a9 0a		lda #$0a	                        lda #AscLF
.808b	80 dd		bra $806a	                        bra reader_comment_continue       ; stores LF
.808d					reader_backspace:
.808d	c0 00		cpy #$00	                        cpy #0          ; buffer empty?
.808f	d0 06		bne $8097	                        bne _skip_bell
.8091	a9 07		lda #$07	                        lda #AscBELL
.8093	20 74 84	jsr $8474	                        jsr help_emit_a
.8096	c8		iny		                        iny
.8097					_skip_bell:
.8097	88		dey		                        dey
.8098	a9 08		lda #$08	                        lda #AscBS      ; move back one
.809a	20 74 84	jsr $8474	                        jsr help_emit_a
.809d	a9 20		lda #$20	                        lda #AscSP      ; print a space (rubout)
.809f	20 74 84	jsr $8474	                        jsr help_emit_a
.80a2	a9 08		lda #$08	                        lda #AscBS      ; move back over space
.80a4	20 74 84	jsr $8474	                        jsr help_emit_a
.80a7	4c 36 80	jmp $8036	                        jmp reader_loop
.80aa					reader_input_done:
.80aa					reader_buffer_full:
.80aa	84 0a		sty $0a		                        sty ciblen      ; Y contains number of chars accepted already
.80ac	a9 00		lda #$00	                        lda #0
.80ae	85 0b		sta $0b		                        sta ciblen+1    ; we only accept 254 chars for now
.80b0	99 00 02	sta $0200,y	                        sta cib,y

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../lexer.asm

.80b3					lexer:
.80b3	20 ed 84	jsr $84ed	                        jsr debug_dump_input
.80b6	a0 00		ldy #$00	                        ldy #0
.80b8	64 0c		stz $0c		                        stz cibp
.80ba	64 0d		stz $0d		                        stz cibp+1      ; MSB currently unused
.80bc	64 11		stz $11		                        stz tkbp
.80be	64 12		stz $12		                        stz tkbp+1      ; MSB currently unused
.80c0	98		tya		                        tya
.80c1	19 00 02	ora $0200,y	                        ora cib,y
.80c4	d0 03		bne $80c9	                        bne lexer_loop
.80c6	4c 48 84	jmp $8448	                        jmp repl_empty_line
.80c9					lexer_loop:
.80c9	b9 00 02	lda $0200,y	                        lda cib,y
.80cc	c9 3b		cmp #$3b	                        cmp #$3B        ; semicolon
.80ce	d0 0f		bne $80df	                        bne _no_comment
.80d0					_comment_loop:
.80d0	c8		iny		                        iny
.80d1	b9 00 02	lda $0200,y	                        lda cib,y
.80d4	c9 0a		cmp #$0a	                        cmp #AscLF
.80d6	f0 04		beq $80dc	                        beq _comment_done
.80d8	c9 0d		cmp #$0d	                        cmp #AscCR
.80da	d0 f4		bne $80d0	                        bne _comment_loop
.80dc					_comment_done:
.80dc	4c c3 81	jmp $81c3	                        jmp lexer_next
.80df					_no_comment:
.80df	20 ae 84	jsr $84ae	                        jsr help_is_whitespace
.80e2	90 03		bcc $80e7	                        bcc _not_whitespace
.80e4	4c c3 81	jmp $81c3	                        jmp lexer_next
.80e7					_not_whitespace:
.80e7					_test_parens:
.80e7					_test_done:
.80e7	d0 03		bne $80ec	                        bne _not_done
.80e9	4c cb 81	jmp $81cb	                        jmp lexer_end_of_input          ; not the same as lexer_done
.80ec					_not_done:
.80ec	c9 23		cmp #$23	                        cmp #'#'
.80ee	f0 03		beq $80f3	                        beq _got_sharp
.80f0	4c 90 81	jmp $8190	                        jmp lexer_not_sharp             ; too far for branch
.80f3					_got_sharp:
.80f3	c8		iny		                        iny
.80f4	b9 00 02	lda $0200,y	                        lda cib,y
.80f7	c9 74		cmp #$74	                        cmp #'t'        ; We're optimists so we check for true first
.80f9	d0 08		bne $8103	                        bne _not_true
.80fb	a9 10		lda #$10	                        lda #T_TRUE
.80fd	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.8100	4c c3 81	jmp $81c3	                        jmp lexer_next
.8103					_not_true:
.8103	c9 66		cmp #$66	                        cmp #'f'
.8105	d0 08		bne $810f	                        bne _not_false
.8107	a9 11		lda #$11	                        lda #T_FALSE
.8109	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.810c	4c c3 81	jmp $81c3	                        jmp lexer_next
.810f					_not_false:
.810f	c9 5c		cmp #$5c	                        cmp #'\'
.8111	d0 00		bne $8113	                        bne _no_backslash
.8113					_not_single_char:
.8113					_not_named_char:
.8113					_no_backslash:
.8113					_not_vector:
.8113	c9 78		cmp #$78	                        cmp #'x'        ; #x is hexadecimal
.8115	d0 04		bne $811b	                        bne _not_hexnum
.8117	a9 10		lda #$10	                        lda #$10        ; Base 16
.8119	80 13		bra $812e	                        bra lexer_got_number
.811b					_not_hexnum:
.811b	c9 62		cmp #$62	                        cmp #'b'        ; #b is binary
.811d	d0 04		bne $8123	                        bne _not_binnum
.811f	a9 02		lda #$02	                        lda #$02        ; Base 2
.8121	80 0b		bra $812e	                        bra lexer_got_number
.8123					_not_binnum:
.8123	c9 64		cmp #$64	                        cmp #'d'        ; #d is explicit decimal
.8125	d0 04		bne $812b	                        bne _illegal_radix
.8127	a9 0a		lda #$0a	                        lda #$0A        ; Base 10
.8129	80 03		bra $812e	                        bra lexer_got_number
.812b					_illegal_radix:
.812b	4c 88 81	jmp $8188	                        jmp lexer_illegal_radix
.812e					lexer_got_number:
.812e	48		pha		                        pha                     ; Save the radix for the moment
.812f	a9 12		lda #$12	                        lda #T_NUM_START
.8131	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.8134	68		pla		                        pla
.8135	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.8138	a6 11		ldx $11		                        ldx tkbp        ; get index of where length will be
.813a	86 00		stx $00		                        stx tmp0
.813c	a9 00		lda #$00	                        lda #0          ; dummy length value
.813e	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.8141	c8		iny		                        iny             ; Y is still the input buffer index
.8142	b9 00 02	lda $0200,y	                        lda cib,y
.8145	a2 00		ldx #$00	                        ldx #0          ; X counts length of string
.8147	c9 2d		cmp #$2d	                        cmp #'-'
.8149	d0 09		bne $8154	                        bne _check_for_plus
.814b	a9 ff		lda #$ff	                        lda #T_MINUS
.814d	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.8150	c8		iny		                        iny             ; skip minus character
.8151	e8		inx		                        inx             ; string now has length of 1
.8152	80 0b		bra $815f	                        bra _sign_done
.8154					_check_for_plus:
.8154	c9 2b		cmp #$2b	                        cmp #'+'
.8156	d0 01		bne $8159	                        bne _default_plus
.8158	c8		iny		                        iny
.8159					_default_plus:
.8159	a9 ee		lda #$ee	                        lda #T_PLUS
.815b	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.815e	e8		inx		                        inx             ; string now has length of 1
.815f					_sign_done:
.815f	b9 00 02	lda $0200,y	                        lda cib,y
.8162	f0 24		beq $8188	                        beq lexer_terminator_too_early  ; 00 terminates input
.8164	20 a8 84	jsr $84a8	                        jsr help_is_delimiter
.8167	b0 1f		bcs $8188	                        bcs lexer_delimiter_too_early
.8169					_number_loop:
.8169	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.816c	e8		inx		                        inx             ; String one character longer
.816d	c8		iny		                        iny             ; Next character
.816e	b9 00 02	lda $0200,y	                        lda cib,y
.8171	f0 07		beq $817a	                        beq _legal_terminator
.8173	20 a8 84	jsr $84a8	                        jsr help_is_delimiter
.8176	b0 02		bcs $817a	                        bcs _number_done
.8178	80 ef		bra $8169	                        bra _number_loop
.817a					_legal_terminator:
.817a					_number_done:
.817a	a9 82		lda #$82	                        lda #T_NUM_END
.817c	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.817f	8a		txa		                        txa             ; number of chars was in X
.8180	a6 00		ldx $00		                        ldx tmp0        ; index of length byte in token stream
.8182	9d 00 03	sta $0300,x	                        sta tkb,x
.8185	4c c4 81	jmp $81c4	                        jmp lexer_next_same_char
.8188					lexer_illegal_radix:
.8188					lexer_terminator_too_early:
.8188					lexer_delimiter_too_early:
.8188	a9 06		lda #$06	                        lda #str_bad_number
.818a	20 94 84	jsr $8494	                        jsr help_print_string
.818d	4c 29 80	jmp $8029	                        jmp repl
.8190					lexer_not_octnum
.8190					lexer_not_sharp:
.8190					_not_decnum:
.8190	c9 22		cmp #$22	                        cmp #$22        ; '"' ASCII value
.8192	d0 1f		bne $81b3	                        bne _not_string
.8194	a9 13		lda #$13	                        lda #T_STR_START
.8196	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.8199					_string_loop:
.8199	c8		iny		                        iny
.819a	b9 00 02	lda $0200,y	                        lda cib,y
.819d	c9 22		cmp #$22	                        cmp #$22        ; '"' closes string
.819f	f0 0b		beq $81ac	                        beq _string_done
.81a1	c9 0d		cmp #$0d	                        cmp #AscCR
.81a3	d0 02		bne $81a7	                        bne +
.81a5	a9 0a		lda #$0a	                        lda #AscLF
.81a7					+
.81a7	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.81aa	80 ed		bra $8199	                        bra _string_loop
.81ac					_string_done:
.81ac	a9 83		lda #$83	                        lda #T_STR_END
.81ae	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.81b1	80 10		bra $81c3	                        bra lexer_next
.81b3					_not_string:
.81b3					lexer_error:
.81b3	48		pha		                        pha
.81b4	a9 00		lda #$00	                        lda #str_unbound
.81b6	20 7a 84	jsr $847a	                        jsr help_print_string_no_lf
.81b9	68		pla		                        pla
.81ba	20 5b 84	jsr $845b	                        jsr help_byte_to_ascii
.81bd	20 72 84	jsr $8472	                        jsr help_emit_lf
.81c0	4c 29 80	jmp $8029	                        jmp repl
.81c3					lexer_next:
.81c3	c8		iny		                        iny
.81c4					lexer_next_same_char:
.81c4	c4 0a		cpy $0a		                        cpy ciblen
.81c6	f0 03		beq $81cb	                        beq lexer_end_of_input
.81c8	4c c9 80	jmp $80c9	                        jmp lexer_loop
.81cb					lexer_end_of_input:
.81cb	a9 00		lda #$00	                        lda #T_END
.81cd	20 d3 81	jsr $81d3	                        jsr lexer_add_token
.81d0	4c de 81	jmp $81de	                        jmp lexer_done
.81d3					lexer_add_token:
.81d3	5a		phy		                        phy             ; Could also store in cibp
.81d4	a4 11		ldy $11		                        ldy tkbp
.81d6	99 00 03	sta $0300,y	                        sta tkb,y       ; LSB is in A
.81d9	c8		iny		                        iny
.81da	84 11		sty $11		                        sty tkbp
.81dc	7a		ply		                        ply
.81dd	60		rts		                        rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01   ; '('
=$02					T_PAREN_CLOSED  = $02   ; ')'
=$03					T_SHARP         = $03   ; '#' - note '#f', '#t' and others are precprocessed
=$10					T_TRUE       = $10   ; '#t'
=$11					T_FALSE      = $11   ; '#f'
=$12					T_NUM_START  = $12   ; Marks beginning of a number sequence
=$13					T_STR_START  = $13   ; Marks beginning of a string
=$82					T_NUM_END    = $82   ; Marks end of a number sequence, see T_NUM_START
=$83					T_STR_END    = $83   ; Marks end of a string, see T_STR_START
=$ee					T_PLUS       = $EE   ; Also used in number token sequence
=$ff					T_MINUS      = $FF   ; Also used in number token sequence
.81de					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.81de					parser:
.81de	20 0a 85	jsr $850a	                        jsr debug_dump_token
.81e1	64 1b		stz $1b		                        stz ast
.81e3	64 1c		stz $1c		                        stz ast+1
.81e5	64 11		stz $11		                        stz tkbp
.81e7	64 12		stz $12		                        stz tkbp+1      ; fake, currently only using LSB
.81e9	a9 1b		lda #$1b	                        lda <#ast
.81eb	85 1d		sta $1d		                        sta astp
.81ed	a9 00		lda #$00	                        lda >#ast       ; paranoid, MSB always 00 for zero page
.81ef	85 1e		sta $1e		                        sta astp+1
.81f1	a2 ff		ldx #$ff	                        ldx #$FF
.81f3					parser_loop:
.81f3	e8		inx		                        inx
.81f4	bd 00 03	lda $0300,x	                        lda tkb,x
.81f7					_end_token:
.81f7	c9 00		cmp #$00	                        cmp #T_END
.81f9	d0 03		bne $81fe	                        bne _not_end_token
.81fb	4c 72 83	jmp $8372	                        jmp parser_done
.81fe					_not_end_token:
.81fe	c9 10		cmp #$10	                        cmp #T_TRUE
.8200	d0 0a		bne $820c	                        bne _not_true_token
.8202	a9 ff		lda #$ff	                        lda <#OC_TRUE
.8204	a0 1f		ldy #$1f	                        ldy >#OC_TRUE
.8206	20 30 83	jsr $8330	                        jsr parser_add_object
.8209	4c f3 81	jmp $81f3	                        jmp parser_loop
.820c					_not_true_token:
.820c	c9 11		cmp #$11	                        cmp #T_FALSE
.820e	d0 0a		bne $821a	                        bne _not_false_token
.8210	a9 00		lda #$00	                        lda <#OC_FALSE
.8212	a0 10		ldy #$10	                        ldy >#OC_FALSE
.8214	20 30 83	jsr $8330	                        jsr parser_add_object
.8217	4c f3 81	jmp $81f3	                        jmp parser_loop
.821a					_not_false_token:
.821a	c9 12		cmp #$12	                        cmp #T_NUM_START
.821c	f0 03		beq $8221	                        beq +
.821e	4c c7 82	jmp $82c7	                        jmp parser_not_num              ; Too far for BRA
.8221					+
.8221	64 02		stz $02		                        stz tmp1
.8223	64 03		stz $03		                        stz tmp1+1
.8225	e8		inx		                        inx             ; skip over T_NUM_START TOKEN
.8226	bd 00 03	lda $0300,x	                        lda tkb,x
.8229	85 00		sta $00		                        sta tmp0        ; radix
.822b	e8		inx		                        inx
.822c	bd 00 03	lda $0300,x	                        lda tkb,x
.822f	a8		tay		                        tay             ; we need the length of the string later ...
.8230	88		dey		                        dey             ; ... but we don't need to include the sign
.8231	e8		inx		                        inx             ; Move to token for sign, T_PLUS or T_MINUS
.8232	bd 00 03	lda $0300,x	                        lda tkb,x
.8235	85 01		sta $01		                        sta tmp0+1      ; Just store sign for now
.8237	e8		inx		                        inx
.8238	a5 00		lda $00		                        lda tmp0        ; radix
.823a	c9 0a		cmp #$0a	                        cmp #$0a
.823c	d0 03		bne $8241	                        bne _not_dec
.823e	4c af 82	jmp $82af	                        jmp parser_common_fixnum
.8241					_not_dec:
.8241	c9 10		cmp #$10	                        cmp #$10
.8243	d0 36		bne $827b	                        bne _not_hex
.8245	98		tya		                        tya
.8246	c9 04		cmp #$04	                        cmp #$04
.8248	90 03		bcc $824d	                        bcc _dec_fixnum
.824a	4c 28 83	jmp $8328	                        jmp function_not_available
.824d					_dec_fixnum:
.824d					_hex_fixnum_loop:
.824d	bd 00 03	lda $0300,x	                lda tkb,x
.8250	c9 82		cmp #$82	                cmp #T_NUM_END
.8252	f0 24		beq $8278	                beq _done_hex
.8254	20 c5 84	jsr $84c5	                jsr help_hexascii_to_value
.8257	10 03		bpl $825c	                bpl _legal_hex_digit
.8259	4c 20 83	jmp $8320	                jmp parser_bad_digit
.825c					_legal_hex_digit:
.825c	0a		asl a		                asl
.825d	0a		asl a		                asl
.825e	0a		asl a		                asl
.825f	0a		asl a		                asl
.8260	2a		rol a		                rol             ; bit 7 of A now in carry flag
.8261	26 03		rol $03		                rol tmp1+1      ; bit 7 of tmp1+1 now in carry flag
.8263	26 02		rol $02		                rol tmp1        ; now is bit 0 of tmp1
.8265	2a		rol a		                rol
.8266	26 03		rol $03		                rol tmp1+1
.8268	26 02		rol $02		                rol tmp1
.826a	2a		rol a		                rol
.826b	26 03		rol $03		                rol tmp1+1
.826d	26 02		rol $02		                rol tmp1
.826f	2a		rol a		                rol
.8270	26 03		rol $03		                rol tmp1+1
.8272	26 02		rol $02		                rol tmp1
.8274	e8		inx		                inx
.8275	88		dey		                dey
.8276	d0 d5		bne $824d	                bne _hex_fixnum_loop
.8278					_done_hex:
.8278	4c af 82	jmp $82af	                jmp parser_common_fixnum
.827b					_not_hex:
.827b	c9 02		cmp #$02	                cmp #$02
.827d	d0 28		bne $82a7	                bne _not_binary
.827f	98		tya		                tya
.8280	c9 0d		cmp #$0d	                cmp #$0D                ; "smaller than 13"
.8282	90 03		bcc $8287	                bcc _bin_fixnum
.8284	4c 28 83	jmp $8328	                jmp function_not_available
.8287					_bin_fixnum:
.8287					_bin_fixnum_loop:
.8287	bd 00 03	lda $0300,x	                lda tkb,x
.828a	c9 30		cmp #$30	                cmp #'0'
.828c	f0 0b		beq $8299	                beq _legal_bit_char
.828e	c9 31		cmp #$31	                cmp #'1'
.8290	f0 07		beq $8299	                beq _legal_bit_char
.8292	c9 82		cmp #$82	                cmp #T_NUM_END
.8294	f0 0e		beq $82a4	                beq _done_bin
.8296	4c 20 83	jmp $8320	                jmp parser_bad_digit
.8299					_legal_bit_char:
.8299	29 01		and #$01	                and #$01                ; gives us $00 or $01
.829b	6a		ror a		                ror                     ; push the bit into carry flag
.829c	26 03		rol $03		                rol tmp1+1              ; rotate the carry flag into LSB ...
.829e	26 02		rol $02		                rol tmp1                ; ... and highest bit of tmp1+1 to tmp1
.82a0	e8		inx		                inx
.82a1	88		dey		                dey
.82a2	d0 e3		bne $8287	                bne _bin_fixnum_loop    ; Repeat till we're done
.82a4					_done_bin:
.82a4	4c af 82	jmp $82af	                jmp parser_common_fixnum
.82a7					_not_binary:
.82a7					_illegal_radix:
.82a7	48		pha		                pha                             ; save the evil radix
.82a8	a9 07		lda #$07	                lda #str_bad_radix
.82aa	20 7a 84	jsr $847a	                jsr help_print_string_no_lf
.82ad	80 67		bra $8316	                bra parser_common_panic         ; prints offending byte and LF
.82af					parser_common_fixnum:
.82af	a5 01		lda $01		                lda tmp0+1
.82b1	c9 ff		cmp #$ff	                cmp #T_MINUS
.82b3	f0 08		beq $82bd	                beq _negative_number
.82b5	a9 20		lda #$20	                lda #OT_FIXNUM
.82b7	05 02		ora $02		                ora tmp1
.82b9	85 02		sta $02		                sta tmp1
.82bb	80 00		bra $82bd	                bra _add_fixnum_to_ast
.82bd					_negative_number:
.82bd					_add_fixnum_to_ast:
.82bd	a5 03		lda $03		                lda tmp1+1
.82bf	a4 02		ldy $02		                ldy tmp1
.82c1	20 30 83	jsr $8330	                jsr parser_add_object
.82c4					_num_done:
.82c4	4c f3 81	jmp $81f3	                jmp parser_loop
.82c7					parser_not_num:
.82c7	c9 13		cmp #$13	                cmp #T_STR_START
.82c9	d0 45		bne $8310	                bne parser_not_string
.82cb	a5 13		lda $13		                lda hp
.82cd	85 02		sta $02		                sta tmp1                ; LSB
.82cf	a5 14		lda $14		                lda hp+1
.82d1	85 03		sta $03		                sta tmp1+1              ; MSB
.82d3	29 0f		and #$0f	                and #$0F                ; mask high nibble (paranoid)
.82d5	09 50		ora #$50	                ora #OT_STRING          ; object tag nibble for strings
.82d7	a8		tay		                tay                     ; MSB (with tag)
.82d8	a5 02		lda $02		                lda tmp1                ; LSB
.82da	20 30 83	jsr $8330	                jsr parser_add_object   ; Updates heap pointer
.82dd	a0 00		ldy #$00	                ldy #00
.82df					_string_loop:
.82df	bd 00 03	lda $0300,x	                lda tkb,x
.82e2	c9 83		cmp #$83	                cmp #T_STR_END
.82e4	f0 10		beq $82f6	                beq _string_end
.82e6	91 13		sta ($13),y	                sta (hp),y
.82e8	c8		iny		                iny
.82e9	e8		inx		                inx
.82ea	80 f3		bra $82df	                bra _string_loop
.82ec	98		tya		                tya
.82ed	18		clc		                clc
.82ee	65 13		adc $13		                adc hp
.82f0	85 13		sta $13		                sta hp
.82f2	90 02		bcc $82f6	                bcc _string_end
.82f4	e6 14		inc $14		                inc hp+1
.82f6					_string_end:
.82f6	20 72 84	jsr $8472	                jsr help_emit_lf
.82f9	a5 14		lda $14		                lda hp+1
.82fb	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.82fe	a5 13		lda $13		                lda hp
.8300	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.8303	a9 00		lda #$00	                lda #0
.8305	92 13		sta ($13)	                sta (hp)
.8307	e6 13		inc $13		                inc hp
.8309	90 02		bcc $830d	                bcc _string_done
.830b	e6 14		inc $14		                inc hp+1
.830d					_string_done:
.830d	4c f3 81	jmp $81f3	                jmp parser_loop
.8310					parser_not_string:
.8310					paser_bad_token:
.8310	48		pha		                pha                             ; save the evil token
.8311	a9 04		lda #$04	                lda #str_bad_token
.8313	20 7a 84	jsr $847a	                jsr help_print_string_no_lf
.8316					parser_common_panic:
.8316	68		pla		                pla
.8317	20 5b 84	jsr $845b	                jsr help_byte_to_ascii          ; print bad token as hex number
.831a	20 72 84	jsr $8472	                jsr help_emit_lf
.831d	4c 29 80	jmp $8029	                jmp repl
.8320					parser_bad_digit:
.8320	48		pha		                pha
.8321	a9 06		lda #$06	                lda #str_bad_number
.8323	20 7a 84	jsr $847a	                jsr help_print_string_no_lf
.8326	80 ee		bra $8316	                bra parser_common_panic
.8328					function_not_available:
.8328	a9 08		lda #$08	                lda #str_cant_yet
.832a	20 94 84	jsr $8494	                jsr help_print_string
.832d	4c 29 80	jmp $8029	                jmp repl
.8330					parser_add_object:
.8330	da		phx		                        phx             ; save index to token buffer
.8331	5a		phy		                        phy             ; save MSB of the object (with tag)
.8332	48		pha		                        pha             ; save LSB of the object
.8333	a5 13		lda $13		                        lda hp
.8335	85 00		sta $00		                        sta tmp0
.8337	a5 14		lda $14		                        lda hp+1
.8339	85 01		sta $01		                        sta tmp0+1
.833b	a9 00		lda #$00	                        lda <#OC_END
.833d	a0 00		ldy #$00	                        ldy #0
.833f	91 13		sta ($13),y	                        sta (hp),y
.8341	c8		iny		                        iny
.8342	a9 00		lda #$00	                        lda >#OC_END
.8344	91 13		sta ($13),y	                        sta (hp),y
.8346	c8		iny		                        iny
.8347	68		pla		                        pla             ; retrieve LSB
.8348	91 13		sta ($13),y	                        sta (hp),y
.834a	c8		iny		                        iny
.834b	68		pla		                        pla             ; retrieve MSB (with tag), was in Y
.834c	91 13		sta ($13),y	                        sta (hp),y
.834e	c8		iny		                        iny
.834f	a9 00		lda #$00	                        lda #0
.8351	91 13		sta ($13),y	                        sta (hp),y
.8353	c8		iny		                        iny
.8354	91 13		sta ($13),y	                        sta (hp),y
.8356	c8		iny		                        iny
.8357	98		tya		                        tya
.8358	18		clc		                        clc
.8359	65 13		adc $13		                        adc hp
.835b	85 13		sta $13		                        sta hp
.835d	90 02		bcc $8361	                        bcc _store_address
.835f	e6 14		inc $14		                        inc hp+1
.8361					_store_address:
.8361	a5 00		lda $00		                        lda tmp0        ; original LSB of hp
.8363	aa		tax		                        tax             ; We'll need it again in a second
.8364	92 1d		sta ($1d)	                        sta (astp)
.8366	a0 01		ldy #$01	                        ldy #1
.8368	a5 01		lda $01		                        lda tmp0+1      ; original MSB of hp
.836a	91 1d		sta ($1d),y	                        sta (astp),y
.836c	85 1e		sta $1e		                        sta astp+1      ; MSB, was tmp0+1
.836e	86 1d		stx $1d		                        stx astp        ; LSB, was tmp0
.8370	fa		plx		                        plx             ; get back index for token buffer
.8371	60		rts		                        rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate
.8372					parser_done:
.8372	a9 00		lda #$00	                        lda <#OC_END
.8374	a2 00		ldx #$00	                        ldx >#OC_END
.8376	20 30 83	jsr $8330	                        jsr parser_add_object

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.8379					eval:
.8379	20 3d 85	jsr $853d	                jsr debug_dump_ast
.837c	20 2b 85	jsr $852b	                jsr debug_dump_hp
.837f	a5 1b		lda $1b		                lda ast
.8381	85 02		sta $02		                sta tmp1
.8383	a5 1c		lda $1c		                lda ast+1
.8385	85 03		sta $03		                sta tmp1+1
.8387					eval_loop:
.8387	a0 03		ldy #$03	                ldy #3          ; MSB of the next node entry down ...
.8389	b1 02		lda ($02),y	                lda (tmp1),y    ; ...  which contains the tag nibble
.838b	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.838d	4a		lsr a		                lsr
.838e	4a		lsr a		                lsr
.838f	4a		lsr a		                lsr             ; Fourth LSR and ASL cancle each other
.8390	aa		tax		                tax
.8391	7c a3 83	jmp ($83a3,x)	                jmp (eval_table,X)
.8394					eval_next:
.8394	b2 02		lda ($02)	                lda (tmp1)              ; LSB of next entry
.8396	aa		tax		                tax
.8397	a0 01		ldy #$01	                ldy #1
.8399	b1 02		lda ($02),y	                lda (tmp1),y            ; MSB of next entry
.839b	85 03		sta $03		                sta tmp1+1
.839d	86 02		stx $02		                stx tmp1
.839f	80 e6		bra $8387	                bra eval_loop
.83a1					eval_0_meta:
.83a1					eval_1_bool:
.83a1					eval_2_fixnum:
.83a1					eval_3_bignum:
.83a1					eval_4_char:
.83a1					eval_5_string:
.83a1	80 f1		bra $8394	                bra eval_next           ; paranoid, never reached
.83a3					eval_6_UNDEFINED:
.83a3					eval_7_UNDEFINED:
.83a3					eval_8_UNDEFINED:
.83a3					eval_9_UNDEFINED:
.83a3					eval_A_UNDEFINED:
.83a3					eval_B_UNDEFINED:
.83a3					eval_C_UNDEFINED:
.83a3					eval_D_UNDEFINED:
.83a3					eval_E_UNDEFINED:
.83a3					eval_F_UNDEFINED:
.83a3					eval_table:
>83a3	c3 83 94 83 94 83 94 83		        .word eval_done, eval_next, eval_next, eval_next
>83ab	94 83 94 83 94 83 94 83		        .word eval_next, eval_next, eval_next, eval_next
>83b3	94 83 94 83 94 83 94 83		        .word eval_next, eval_next, eval_next, eval_next
>83bb	94 83 94 83 94 83 94 83		        .word eval_next, eval_next, eval_next, eval_next
.83c3					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.83c3					printer:
.83c3	a5 1b		lda $1b		                lda ast
.83c5	85 02		sta $02		                sta tmp1
.83c7	a5 1c		lda $1c		                lda ast+1
.83c9	85 03		sta $03		                sta tmp1+1
.83cb					printer_loop:
.83cb	20 72 84	jsr $8472	                jsr help_emit_lf
.83ce	a0 03		ldy #$03	                ldy #3          ; MSB of the next node entry down ...
.83d0	b1 02		lda ($02),y	                lda (tmp1),y    ; ...  which contains the tag nibble
.83d2	29 f0		and #$f0	                and #$f0        ; mask all but tag nibble
.83d4	4a		lsr a		                lsr
.83d5	4a		lsr a		                lsr
.83d6	4a		lsr a		                lsr     ; Fourth LSR and ASL cancle each other
.83d7	aa		tax		                tax
.83d8	7c 28 84	jmp ($8428,x)	                jmp (printer_table,X)
.83db					printer_next:
.83db	b2 02		lda ($02)	                lda (tmp1)      ; LSB of next entry
.83dd	aa		tax		                tax
.83de	a0 01		ldy #$01	                ldy #1
.83e0	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB of next entry
.83e2	85 03		sta $03		                sta tmp1+1
.83e4	86 02		stx $02		                stx tmp1
.83e6	4c cb 83	jmp $83cb	                jmp printer_loop
.83e9					printer_0_meta:
.83e9	80 5d		bra $8448	                bra printer_done
.83eb					printer_1_bool:
.83eb	a0 02		ldy #$02	                ldy #2
.83ed	b1 02		lda ($02),y	                lda (tmp1),y            ; LSB
.83ef	d0 04		bne $83f5	                bne _bool_true          ; not a zero means true
.83f1	a9 03		lda #$03	                lda #str_false
.83f3	80 02		bra $83f7	                bra _bool_printer
.83f5					_bool_true:
.83f5	a9 02		lda #$02	                lda #str_true
.83f7					_bool_printer:
.83f7	20 7a 84	jsr $847a	                jsr help_print_string_no_lf
.83fa	80 df		bra $83db	                bra printer_next
.83fc					printer_2_fixnum:
.83fc	a0 03		ldy #$03	                ldy #3          ; tag nibble and high nibble of number
.83fe	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB nibble
.8400	29 0f		and #$0f	                and #$0F        ; Mask tag
.8402	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.8405	a0 02		ldy #$02	                ldy #2
.8407	b1 02		lda ($02),y	                lda (tmp1),y    ; LSB
.8409	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.840c	80 cd		bra $83db	                bra printer_next
.840e					printer_3_bignum:
.840e					printer_4_char:
.840e					printer_5_string:
.840e	a0 02		ldy #$02	                ldy #2
.8410	b1 02		lda ($02),y	                lda (tmp1),y    ; LSB of address in heap
.8412	85 04		sta $04		                sta tmp2
.8414	c8		iny		                iny
.8415	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB with tag and high nibble of pointer
.8417	29 0f		and #$0f	                and #$0F        ; mask tag
.8419	85 05		sta $05		                sta tmp2+1
.841b	a0 00		ldy #$00	                ldy #0
.841d					_string_loop:
.841d	b1 04		lda ($04),y	                lda (tmp2),y
.841f	f0 03		beq $8424	                beq _string_done        ; string is zero terminated
.8421	20 74 84	jsr $8474	                jsr help_emit_a
.8424					_string_done:
.8424	80 b5		bra $83db	                bra printer_next
.8426					printer_6_UNDEFINED:
.8426					printer_7_UNDEFINED:
.8426					printer_8_UNDEFINED:
.8426					printer_9_UNDEFINED:
.8426					printer_A_UNDEFINED:
.8426					printer_B_UNDEFINED:
.8426					printer_C_UNDEFINED:
.8426					printer_D_UNDEFINED:
.8426					printer_E_UNDEFINED:
.8426					printer_F_UNDEFINED:
.8426	80 b3		bra $83db	                bra printer_next
.8428					printer_table:
>8428	48 84 eb 83 fc 83 db 83		        .word printer_done, printer_1_bool, printer_2_fixnum, printer_next
>8430	db 83 0e 84 db 83 db 83		        .word printer_next, printer_5_string, printer_next, printer_next
>8438	db 83 db 83 db 83 db 83		        .word printer_next, printer_next, printer_next, printer_next
>8440	db 83 db 83 db 83 db 83		        .word printer_next, printer_next, printer_next, printer_next
.8448					printer_done:

;******  Return to file: platforms/../cthulhu.asm

.8448					repl_empty_line:
.8448	4c 29 80	jmp $8029	                        jmp repl
.844b					repl_quit:
.844b	20 72 84	jsr $8472	                        jsr help_emit_lf
.844e	a9 09		lda #$09	                        lda #str_end_input
.8450	20 94 84	jsr $8494	                        jsr help_print_string
.8453	a9 0a		lda #$0a	                        lda #str_chant
.8455	20 94 84	jsr $8494	                        jsr help_print_string
.8458	4c 2b f0	jmp $f02b	                        jmp platform_quit

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.845b					help_byte_to_ascii:
.845b	48		pha		                pha
.845c	4a		lsr a		                lsr             ; convert high nibble first
.845d	4a		lsr a		                lsr
.845e	4a		lsr a		                lsr
.845f	4a		lsr a		                lsr
.8460	20 64 84	jsr $8464	                jsr help_nibble_to_ascii
.8463	68		pla		                pla
.8464					help_nibble_to_ascii:
.8464	29 0f		and #$0f	                and #$0F
.8466	09 30		ora #$30	                ora #'0'
.8468	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.846a	90 02		bcc $846e	                bcc +
.846c	69 06		adc #$06	                adc #$06
.846e	4c 74 84	jmp $8474	+               jmp help_emit_a       ; JSR/RTS
.8471					help_to_lowercase:
.8471	60		rts		                rts
.8472					help_emit_lf:
.8472	a9 0a		lda #$0a	                lda #AscLF
.8474					help_emit_a:
.8474	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.8477					help_key_a:
.8477	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.847a					help_print_string_no_lf:
.847a	0a		asl a		                asl
.847b	a8		tay		                tay
.847c	b9 11 86	lda $8611,y	                lda string_table,y
.847f	85 00		sta $00		                sta tmp0                ; LSB
.8481	c8		iny		                iny
.8482	b9 11 86	lda $8611,y	                lda string_table,y
.8485	85 01		sta $01		                sta tmp0+1              ; MSB
.8487					help_print_common:
.8487	a0 00		ldy #$00	                ldy #0
.8489					_loop:
.8489	b1 00		lda ($00),y	                lda (tmp0),y
.848b	f0 06		beq $8493	                beq _done               ; strings are zero-terminated
.848d	20 74 84	jsr $8474	                jsr help_emit_a         ; allows vectoring via output
.8490	c8		iny		                iny
.8491	80 f6		bra $8489	                bra _loop
.8493					_done:
.8493	60		rts		                rts
.8494					help_print_string:
.8494	20 7a 84	jsr $847a	                jsr help_print_string_no_lf
.8497	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.8499	4c 74 84	jmp $8474	                jmp help_emit_a         ; JSR/RTS
.849c					help_is_decdigit:
.849c	c9 30		cmp #$30	                cmp #'0'
.849e	90 07		bcc $84a7	                bcc _below_zero         ; A is < '0'
.84a0	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.84a2	b0 02		bcs $84a6	                bcs _above_nine
.84a4	38		sec		                sec
.84a5	60		rts		                rts
.84a6					_above_nine:
.84a6	18		clc		                clc
.84a7					_below_zero:
.84a7	60		rts		                rts
.84a8					help_is_delimiter:
.84a8	20 ae 84	jsr $84ae	                jsr help_is_whitespace
.84ab	b0 00		bcs $84ad	                bcs _delimiter_done
.84ad					_delimiter_done:
.84ad	60		rts		                rts
.84ae					help_is_whitespace:
.84ae	38		sec		                sec             ; default is whitespace
.84af	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.84b1	f0 11		beq $84c4	                beq _done
.84b3	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.84b5	f0 0d		beq $84c4	                beq _done
.84b7	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.84b9	f0 09		beq $84c4	                beq _done
.84bb	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.84bd	f0 05		beq $84c4	                beq _done
.84bf	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.84c1	f0 01		beq $84c4	                beq _done
.84c3	18		clc		                clc             ; If we end up here, it's not whitespace
.84c4					_done:
.84c4	60		rts		                rts
.84c5					help_hexascii_to_value:
.84c5	20 9c 84	jsr $849c	                jsr help_is_decdigit
.84c8	90 05		bcc $84cf	                bcc _see_if_letter
.84ca	38		sec		                sec
.84cb	e9 30		sbc #$30	                sbc #'0'
.84cd	80 0f		bra $84de	                bra _done
.84cf					_see_if_letter:
.84cf	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.84d1	90 17		bcc $84ea	                bcc _error
.84d3	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.84d5	b0 13		bcs $84ea	                bcs _error
.84d7	c9 61		cmp #$61	                cmp #'a'
.84d9	90 06		bcc $84e1	                bcc _uppercase
.84db	38		sec		                sec
.84dc	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.84de					_done:
.84de	29 0f		and #$0f	                and #$0F        ; paranoid
.84e0	60		rts		                rts
.84e1					_uppercase:
.84e1	c9 47		cmp #$47	                cmp #'G'
.84e3	b0 05		bcs $84ea	                bcs _error
.84e5	38		sec		                sec
.84e6	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.84e8	80 f4		bra $84de	                bra _done
.84ea					_error:
.84ea	a9 80		lda #$80	                lda #$80
.84ec	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.84ed					proc_char_whitespace_p:
.84ed					proc_newline:
.84ed					proc_display:
.84ed					proc_read:
.84ed					proc_read_char:
.84ed					proc_read_line:
.84ed					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.84ed					debug_dump_input:
.84ed	20 72 84	jsr $8472	                jsr help_emit_lf
.84f0	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.84f2	20 aa 85	jsr $85aa	                jsr debug_print_string_no_lf
.84f5	a2 00		ldx #$00	                ldx #0
.84f7					-
.84f7	bd 00 02	lda $0200,x	                lda cib,x
.84fa	f0 0b		beq $8507	                beq _done
.84fc	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.84ff	e8		inx		                inx
.8500	a9 20		lda #$20	                lda #' '
.8502	20 74 84	jsr $8474	                jsr help_emit_a
.8505	80 f0		bra $84f7	                bra -
.8507					_done:
.8507	4c 5b 84	jmp $845b	                jmp help_byte_to_ascii          ; JSR/RTS
.850a					debug_dump_token:
.850a	20 72 84	jsr $8472	                jsr help_emit_lf
.850d	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.850f	20 aa 85	jsr $85aa	                jsr debug_print_string_no_lf
.8512	a2 00		ldx #$00	                ldx #0
.8514					-
.8514	bd 00 03	lda $0300,x	                lda tkb,x
.8517	c9 00		cmp #$00	                cmp #T_END
.8519	f0 0d		beq $8528	                beq _done
.851b	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.851e	e8		inx		                inx
.851f	a9 20		lda #$20	                lda #' '
.8521	20 74 84	jsr $8474	                jsr help_emit_a
.8524	e4 11		cpx $11		                cpx tkbp
.8526	d0 ec		bne $8514	                bne -
.8528					_done:
.8528	4c 5b 84	jmp $845b	                jmp help_byte_to_ascii          ; JSR/RTS
.852b					debug_dump_hp:
.852b	20 72 84	jsr $8472	                jsr help_emit_lf
.852e	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.8530	20 aa 85	jsr $85aa	                jsr debug_print_string_no_lf
.8533	a5 14		lda $14		                lda hp+1
.8535	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.8538	a5 13		lda $13		                lda hp
.853a	4c 5b 84	jmp $845b	                jmp help_byte_to_ascii          ; JSR/RTS
.853d					debug_dump_ast:
.853d	20 72 84	jsr $8472	                jsr help_emit_lf
.8540	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.8542	20 aa 85	jsr $85aa	                jsr debug_print_string_no_lf
.8545	a5 1c		lda $1c		                lda ast+1
.8547	85 03		sta $03		                sta tmp1+1
.8549	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.854c	a5 1b		lda $1b		                lda ast
.854e	85 02		sta $02		                sta tmp1
.8550	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.8553					_loop:
.8553	a9 20		lda #$20	                lda #' '
.8555	20 74 84	jsr $8474	                jsr help_emit_a
.8558	a0 01		ldy #$01	                ldy #1
.855a	b1 02		lda ($02),y	                lda (tmp1),y
.855c	85 05		sta $05		                sta tmp2+1
.855e	20 5b 84	jsr $845b	                jsr help_byte_to_ascii          ; MSB
.8561	b2 02		lda ($02)	                lda (tmp1)
.8563	85 04		sta $04		                sta tmp2                        ; pointer to next entry, LSB
.8565	20 5b 84	jsr $845b	                jsr help_byte_to_ascii          ; LSB
.8568	a9 3a		lda #$3a	                lda #':'
.856a	20 74 84	jsr $8474	                jsr help_emit_a
.856d	a0 03		ldy #$03	                ldy #3
.856f	b1 02		lda ($02),y	                lda (tmp1),y
.8571	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.8574	a0 02		ldy #$02	                ldy #2
.8576	b1 02		lda ($02),y	                lda (tmp1),y
.8578	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.857b	a9 3a		lda #$3a	                lda #':'
.857d	20 74 84	jsr $8474	                jsr help_emit_a
.8580	a0 05		ldy #$05	                ldy #5
.8582	b1 02		lda ($02),y	                lda (tmp1),y
.8584	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.8587	a0 04		ldy #$04	                ldy #4
.8589	b1 02		lda ($02),y	                lda (tmp1),y
.858b	20 5b 84	jsr $845b	                jsr help_byte_to_ascii
.858e	a5 04		lda $04		                lda tmp2
.8590	05 05		ora $05		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.8592	f0 0a		beq $859e	                beq _done
.8594	a5 04		lda $04		                lda tmp2
.8596	85 02		sta $02		                sta tmp1
.8598	a5 05		lda $05		                lda tmp2+1
.859a	85 03		sta $03		                sta tmp1+1
.859c	80 b5		bra $8553	                bra _loop
.859e					_done:
.859e	60		rts		                rts
.859f					debug_emit_a:
.859f	48		pha		                pha
.85a0	20 72 84	jsr $8472	                jsr help_emit_lf
.85a3	68		pla		                pla
.85a4	20 74 84	jsr $8474	                jsr help_emit_a
.85a7	4c 72 84	jmp $8472	                jmp help_emit_lf        ; JSR/RTS
.85aa					debug_print_string_no_lf:
.85aa	0a		asl a		                asl
.85ab	a8		tay		                tay
.85ac	b9 fd 85	lda $85fd,y	                lda sd_table,y
.85af	85 00		sta $00		                sta tmp0                ; LSB
.85b1	c8		iny		                iny
.85b2	b9 fd 85	lda $85fd,y	                lda sd_table,y
.85b5	85 01		sta $01		                sta tmp0+1              ; MSB
.85b7					debug_print_common:
.85b7	a0 00		ldy #$00	                ldy #0
.85b9					_loop:
.85b9	b1 00		lda ($00),y	                lda (tmp0),y
.85bb	f0 06		beq $85c3	                beq _done               ; strings are zero-terminated
.85bd	20 74 84	jsr $8474	                jsr help_emit_a         ; allows vectoring via output
.85c0	c8		iny		                iny
.85c1	80 f6		bra $85b9	                bra _loop
.85c3					_done:
.85c3	60		rts		                rts
.85c4					debug_print_string:
.85c4	20 aa 85	jsr $85aa	                jsr debug_print_string_no_lf
.85c7	4c 72 84	jmp $8472	                jmp help_emit_lf        ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
=3					strd_dump_input = 3
>85ca	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>85d2	66 66 65 72 3a 20 00
>85d9	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>85df	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>85e7	6e 74 65 72 3a 20 00
>85ee	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>85f6	66 66 65 72 3a 20 00
.85fd					sd_table:
>85fd	ca 85 d9 85 df 85 ee 85		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input      ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					ciblen:  .word ?     ; current size of input buffer
>000c					cibp:    .word ?     ; index of current char in input buffer
>000e					input_f  .byte ?     ; input flag for Reader, see details there
>000f					tkblen:  .word ?     ; current size of the token buffer
>0011					tkbp:    .word ?     ; index of current token in token buffer
>0013					hp:      .word ?     ; pointer to next free heap entry
>0015					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0017					strtbl:  .word ?     ; pointer to first entry in string table in heap
>0019					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001b					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001d					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00    ; used for end of input and other markers
=$10					OT_BOOL         = $10    ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20    ; used for fixed numbers; immediate
=$30					OT_BIGNUM       = $30    ; used for bignum
=$40					OT_CHAR         = $40    ; used for chars; immediate
=$50					OT_STRING       = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8605					h_newline:
>8605	00 00				        .addr 0000              ; end of header list
>8607	ed 84				        .addr proc_newline
>8609	07				        .byte 7
>860a	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
=6					str_bad_number = 6
=7					str_bad_radix  = 7
=8					str_cant_yet   = 8      ; TODO temp during development
=9					str_end_input  = 9
=10					str_chant      = 10
=11					str_prompt     = 11
.8611					string_table:
>8611	29 86 3d 86 57 86 5a 86		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>8619	5d 86 71 86 8c 86 a2 86		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>8621	b6 86 cf 86 ec 86 20 87		        .word s_cant_yet, s_end_input, s_chant, s_prompt             ; 8-11
>8629	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable: "           ; REPL input error
>8631	20 76 61 72 69 61 62 6c 65 3a 20 00
>863d	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8645	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8655	65 00
>8657	23 74 00			s_true:         .null   "#t"
>865a	23 66 00			s_false:        .null   "#f"
>865d	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>8665	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>8671	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>8679	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>8689	3a 20 00
>868c	3b 49 6c 6c 2d 66 6f 72		s_bad_number:   .null   ";Ill-formed number: $"         ; from lexer
>8694	6d 65 64 20 6e 75 6d 62 65 72 3a 20 24 00
>86a2	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>86aa	61 64 20 72 61 64 69 78 3a 20 24 00
>86b6	41 4c 50 48 41 3a 20 43		s_cant_yet      .null   "ALPHA: Can't do that yet"      ; from parser
>86be	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>86ce	00
>86cf	45 6e 64 20 6f 66 20 69		s_end_input     .null   "End of input stream reached."  ; from reader
>86d7	6e 70 75 74 20 73 74 72 65 61 6d 20 72 65 61 63
>86e7	68 65 64 2e 00
>86ec	50 68 27 6e 67 6c 75 69		s_chant         .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."   ; from reader
>86f4	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>8704	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>8714	61 67 6c 20 66 68 74 61 67 6e 2e 00
>8720	3e 20 00			s_prompt        .null   "> "
>8723	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>872b	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (13. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 31 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
