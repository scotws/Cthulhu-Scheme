
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output cthulhu-py65mon.bin platforms/platform-py65mon.asm
; Mon Apr 13 16:46:57 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platforms/platform-py65mon.asm

=true					DEBUG = true
=false					OCTAL = false
=$0000					ram_start = $0000       ; Start of RAM. Must contain the Zero Page
=$8000					ram_size  = $8000       ; assumes 32 KiB of RAM
=$0000					zp_start  = $0000       ; start of zero page,
=$80					zp_size   = $80         ; max bytes allowed in Zero Page
=$0200					buffers_start   = $0200         ; start of the buffer RAM area
=$100					cib_size        = $100          ; size of the input buffer, used by reader
=$100					tkb_size        = $100          ; size of the token buffer, used by lexer
=31744					heap_size       = ram_size - ($200+cib_size+tkb_size)
=$f000					io_start = $f000
=$10					io_size  = $10
=$8000					rom_start = $8000                       ; $8000 by default
=28672					rom_size = io_start - rom_start         ; $f000 - $8000 = $7000 (28 KiB)
=$fffa					vectors_start = $fffa
=$ffff					max_address   = $ffff

;******  Processing file: platforms/../cthulhu.asm

.8000					cthulhu:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 06		sta $06		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 07		sta $07		                sta output+1
.8009	a9 00		lda #$00	                lda <#heap
.800b	85 12		sta $12		                sta hp
.800d	a9 04		lda #$04	                lda >#heap
.800f	85 13		sta $13		                sta hp+1
.8011	64 14		stz $14		                stz symtbl
.8013	64 15		stz $15		                stz symtbl+1
.8015	64 16		stz $16		                stz strtbl
.8017	64 17		stz $17		                stz strtbl+1
.8019	64 18		stz $18		                stz bnmtbl
.801b	64 19		stz $19		                stz bnmtbl+1
.801d	64 1a		stz $1a		                stz ast
.801f	64 1b		stz $1b		                stz ast+1
.8021	a9 21		lda #$21	                lda #<kernel_getc
.8023	85 08		sta $08		                sta input
.8025	a9 f0		lda #$f0	                lda #>kernel_putc
.8027	85 09		sta $09		                sta input+1
.8029					repl:
.8029	64 0a		stz $0a		                stz ciblen
.802b	64 0b		stz $0b		                stz ciblen+1
.802d					repl_read:
.802d	a0 00		ldy #$00	                ldy #0
.802f	a9 3e		lda #$3e	                lda #'>'
.8031	20 94 83	jsr $8394	                jsr help_emit_a
.8034	a9 20		lda #$20	                lda #' '
.8036	20 94 83	jsr $8394	                jsr help_emit_a
.8039					repl_read_loop:
.8039	20 97 83	jsr $8397	                jsr help_key_a
.803c	c9 0a		cmp #$0a	                cmp #AscLF
.803e	f0 1b		beq $805b	                beq repl_read_eol
.8040	c9 0d		cmp #$0d	                cmp #AscCR
.8042	f0 17		beq $805b	                beq repl_read_eol
.8044	c9 08		cmp #$08	                cmp #AscBS
.8046	f0 2f		beq $8077	                beq repl_read_backspace
.8048	c9 7f		cmp #$7f	                cmp #AscDEL             ; (CTRL-h)
.804a	f0 2b		beq $8077	                beq repl_read_backspace
.804c	c9 04		cmp #$04	                cmp #$04
.804e	f0 17		beq $8067	                beq repl_input_end
.8050	99 00 02	sta $0200,y	                sta cib,y
.8053	c8		iny		                iny
.8054	20 94 83	jsr $8394	                jsr help_emit_a
.8057	c4 ff		cpy $ff		                cpy cib_size-1        ; reached character limit?
.8059	d0 de		bne $8039	                bne repl_read_loop    ; fall thru if buffer limit reached
.805b					repl_read_eol:
.805b					repl_read_buffer_full:
.805b	84 0a		sty $0a		                sty ciblen      ; Y contains number of chars accepted already
.805d	a9 00		lda #$00	                lda #0
.805f	85 0b		sta $0b		                sta ciblen+1    ; we only accept 256 chars
.8061	99 00 02	sta $0200,y	                sta cib,y
.8064	4c 93 80	jmp $8093	                jmp lexer
.8067					repl_input_end:
.8067	20 92 83	jsr $8392	                jsr help_emit_lf
.806a	a9 09		lda #$09	                lda #str_end_input
.806c	20 b4 83	jsr $83b4	                jsr help_print_string
.806f	a9 0a		lda #$0a	                lda #str_chant
.8071	20 b4 83	jsr $83b4	                jsr help_print_string
.8074	4c 2b f0	jmp $f02b	                jmp platform_quit
.8077					repl_read_backspace:
.8077	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8079	d0 06		bne $8081	                bne +
.807b	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.807d	20 94 83	jsr $8394	                jsr help_emit_a
.8080	c8		iny		                iny
.8081					+
.8081	88		dey		                dey
.8082	a9 08		lda #$08	                lda #AscBS      ; move back one
.8084	20 94 83	jsr $8394	                jsr help_emit_a
.8087	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8089	20 94 83	jsr $8394	                jsr help_emit_a
.808c	a9 08		lda #$08	                lda #AscBS      ; move back over space
.808e	20 94 83	jsr $8394	                jsr help_emit_a
.8091	80 a6		bra $8039	                bra repl_read_loop

;******  Processing file: platforms/../lexer.asm

.8093					lexer:
.8093	20 0d 84	jsr $840d	                jsr debug_dump_input
.8096	a0 00		ldy #$00	                ldy #0
.8098	64 0c		stz $0c		                stz cibp
.809a	64 0d		stz $0d		                stz cibp+1      ; MSB currently unused
.809c	64 10		stz $10		                stz tkbp
.809e	64 11		stz $11		                stz tkbp+1      ; MSB currently unused
.80a0					lexer_loop:
.80a0	b9 00 02	lda $0200,y	                lda cib,y
.80a3	20 ce 83	jsr $83ce	                jsr help_is_whitespace
.80a6	90 03		bcc $80ab	                bcc _not_whitespace
.80a8	4c 64 81	jmp $8164	                jmp lexer_next
.80ab					_not_whitespace:
.80ab					_test_parens:
.80ab					_test_done:
.80ab	d0 03		bne $80b0	                bne _not_done
.80ad	4c 6c 81	jmp $816c	                jmp lexer_end_of_input          ; not the same as lexer_done
.80b0					_not_done:
.80b0	c9 23		cmp #$23	                cmp #'#'
.80b2	f0 03		beq $80b7	                beq _got_sharp
.80b4	4c 54 81	jmp $8154	                jmp lexer_not_sharp             ; too far for branch
.80b7					_got_sharp:
.80b7	c8		iny		                iny
.80b8	b9 00 02	lda $0200,y	                lda cib,y
.80bb	c9 74		cmp #$74	                cmp #'t'                ; We're optimists so we check for true first
.80bd	d0 08		bne $80c7	                bne _not_true
.80bf	a9 10		lda #$10	                lda #T_TRUE
.80c1	20 74 81	jsr $8174	                jsr lexer_add_token
.80c4	4c 64 81	jmp $8164	                jmp lexer_next
.80c7					_not_true:
.80c7	c9 66		cmp #$66	                cmp #'f'
.80c9	d0 08		bne $80d3	                bne _not_false
.80cb	a9 11		lda #$11	                lda #T_FALSE
.80cd	20 74 81	jsr $8174	                jsr lexer_add_token
.80d0	4c 64 81	jmp $8164	                jmp lexer_next
.80d3					_not_false:
.80d3	c9 5c		cmp #$5c	                cmp #'\'
.80d5	d0 00		bne $80d7	                bne _no_backslash
.80d7					_not_single_char:
.80d7					_not_named_char:
.80d7					_no_backslash:
.80d7					_not_vector:
.80d7	c9 78		cmp #$78	                        cmp #'x'        ; #x is hexadecimal
.80d9	d0 04		bne $80df	                        bne _not_hexnum
.80db	a9 10		lda #$10	                        lda #$10        ; Base 16
.80dd	80 13		bra $80f2	                        bra lexer_got_number
.80df					_not_hexnum:
.80df	c9 62		cmp #$62	                        cmp #'b'        ; #b is binary
.80e1	d0 04		bne $80e7	                        bne _not_binnum
.80e3	a9 02		lda #$02	                        lda #$02        ; Base 2
.80e5	80 0b		bra $80f2	                        bra lexer_got_number
.80e7					_not_binnum:
.80e7	c9 64		cmp #$64	                        cmp #'d'        ; #d is explicit decimal
.80e9	d0 04		bne $80ef	                        bne _illegal_radix
.80eb	a9 0a		lda #$0a	                        lda #$0A        ; Base 10
.80ed	80 03		bra $80f2	                        bra lexer_got_number
.80ef					_illegal_radix:
.80ef	4c 4c 81	jmp $814c	                        jmp lexer_illegal_radix
.80f2					lexer_got_number:
.80f2	48		pha		                        pha                     ; Save the radix for the moment
.80f3	a9 12		lda #$12	                        lda #T_NUM_START
.80f5	20 74 81	jsr $8174	                        jsr lexer_add_token
.80f8	68		pla		                        pla
.80f9	20 74 81	jsr $8174	                        jsr lexer_add_token
.80fc	a6 10		ldx $10		                        ldx tkbp        ; get index of where length will be
.80fe	86 00		stx $00		                        stx tmp0
.8100	a9 00		lda #$00	                        lda #0          ; dummy length value
.8102	20 74 81	jsr $8174	                        jsr lexer_add_token
.8105	c8		iny		                        iny             ; Y is still the input buffer index
.8106	b9 00 02	lda $0200,y	                        lda cib,y
.8109	a2 00		ldx #$00	                        ldx #0          ; X counts length of string
.810b	c9 2d		cmp #$2d	                        cmp #'-'
.810d	d0 09		bne $8118	                        bne _check_for_plus
.810f	a9 ff		lda #$ff	                        lda #T_MINUS
.8111	20 74 81	jsr $8174	                        jsr lexer_add_token
.8114	c8		iny		                        iny             ; skip minus character
.8115	e8		inx		                        inx             ; string now has length of 1
.8116	80 0b		bra $8123	                        bra _sign_done
.8118					_check_for_plus:
.8118	c9 2b		cmp #$2b	                        cmp #'+'
.811a	d0 01		bne $811d	                        bne _default_plus
.811c	c8		iny		                        iny
.811d					_default_plus:
.811d	a9 ee		lda #$ee	                        lda #T_PLUS
.811f	20 74 81	jsr $8174	                        jsr lexer_add_token
.8122	e8		inx		                        inx             ; string now has length of 1
.8123					_sign_done:
.8123	b9 00 02	lda $0200,y	                        lda cib,y
.8126	f0 24		beq $814c	                        beq lexer_terminator_too_early  ; 00 terminates input
.8128	20 c8 83	jsr $83c8	                        jsr help_is_delimiter
.812b	b0 1f		bcs $814c	                        bcs lexer_delimiter_too_early
.812d					_number_loop:
.812d	20 74 81	jsr $8174	                        jsr lexer_add_token
.8130	e8		inx		                        inx             ; String one character longer
.8131	c8		iny		                        iny             ; Next character
.8132	b9 00 02	lda $0200,y	                        lda cib,y
.8135	f0 07		beq $813e	                        beq _legal_terminator
.8137	20 c8 83	jsr $83c8	                        jsr help_is_delimiter
.813a	b0 02		bcs $813e	                        bcs _number_done
.813c	80 ef		bra $812d	                        bra _number_loop
.813e					_legal_terminator:
.813e					_number_done:
.813e	a9 82		lda #$82	                        lda #T_NUM_END
.8140	20 74 81	jsr $8174	                        jsr lexer_add_token
.8143	8a		txa		                        txa             ; number of chars was in X
.8144	a6 00		ldx $00		                        ldx tmp0        ; index of length byte in token stream
.8146	9d 00 03	sta $0300,x	                        sta tkb,x
.8149	4c 65 81	jmp $8165	                        jmp lexer_next_same_char
.814c					lexer_illegal_radix:
.814c					lexer_terminator_too_early:
.814c					lexer_delimiter_too_early:
.814c	a9 06		lda #$06	                lda #str_bad_number
.814e	20 b4 83	jsr $83b4	                jsr help_print_string
.8151	4c 29 80	jmp $8029	                jmp repl
.8154					lexer_not_octnum
.8154					lexer_not_sharp:
.8154					_not_decnum:
.8154					_not_string:
.8154					lexer_error:
.8154	48		pha		                pha
.8155	a9 00		lda #$00	                lda #str_unbound
.8157	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.815a	68		pla		                pla
.815b	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.815e	20 92 83	jsr $8392	                jsr help_emit_lf
.8161	4c 29 80	jmp $8029	                jmp repl
.8164					lexer_next:
.8164	c8		iny		                iny
.8165					lexer_next_same_char:
.8165	c4 0a		cpy $0a		                cpy ciblen
.8167	f0 03		beq $816c	                beq lexer_end_of_input
.8169	4c a0 80	jmp $80a0	                jmp lexer_loop
.816c					lexer_end_of_input:
.816c	a9 00		lda #$00	                lda #T_END
.816e	20 74 81	jsr $8174	                jsr lexer_add_token
.8171	4c 7f 81	jmp $817f	                jmp lexer_done
.8174					lexer_add_token:
.8174	5a		phy		                phy             ; Could also store in cibp
.8175	a4 10		ldy $10		                ldy tkbp
.8177	99 00 03	sta $0300,y	                sta tkb,y       ; LSB is in A
.817a	c8		iny		                iny
.817b	84 10		sty $10		                sty tkbp
.817d	7a		ply		                ply
.817e	60		rts		                rts
=$00					T_END           = $00
=$01					T_PAREN_OPEN    = $01   ; '('
=$02					T_PAREN_CLOSED  = $02   ; ')'
=$03					T_SHARP         = $03   ; '#' - note '#f', '#t' and others are precprocessed
=$10					T_TRUE       = $10   ; '#t'
=$11					T_FALSE      = $11   ; '#f'
=$12					T_NUM_START  = $12   ; Marks beginning of a number sequence
=$82					T_NUM_END    = $82   ; Marks end of a number sequence, see T_NUM_START
=$ee					T_PLUS       = $EE   ; Also used in number token sequence
=$ff					T_MINUS      = $FF   ; Also used in number token sequence
.817f					lexer_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../parser.asm

.817f					parser:
.817f	20 2a 84	jsr $842a	                jsr debug_dump_token
.8182	64 1a		stz $1a		                stz ast
.8184	64 1b		stz $1b		                stz ast+1
.8186	64 10		stz $10		                stz tkbp
.8188	64 11		stz $11		                stz tkbp+1      ; fake, currently only using LSB
.818a	a9 1a		lda #$1a	                lda <#ast
.818c	85 1c		sta $1c		                sta astp
.818e	a9 00		lda #$00	                lda >#ast       ; paranoid, MSB always 00 for zero page
.8190	85 1d		sta $1d		                sta astp+1
.8192	a2 ff		ldx #$ff	                ldx #$FF
.8194					parser_loop:
.8194	e8		inx		                inx
.8195	bd 00 03	lda $0300,x	                lda tkb,x
.8198					_end_token:
.8198	c9 00		cmp #$00	                cmp #T_END
.819a	d0 03		bne $819f	                bne _not_end_token
.819c	4c 01 83	jmp $8301	                jmp parser_done
.819f					_not_end_token:
.819f	c9 10		cmp #$10	                cmp #T_TRUE
.81a1	d0 0a		bne $81ad	                bne _not_true_token
.81a3	a9 ff		lda #$ff	                lda <#OC_TRUE
.81a5	a0 1f		ldy #$1f	                ldy >#OC_TRUE
.81a7	20 bf 82	jsr $82bf	                jsr parser_add_object
.81aa	4c 94 81	jmp $8194	                jmp parser_loop
.81ad					_not_true_token:
.81ad	c9 11		cmp #$11	                cmp #T_FALSE
.81af	d0 0a		bne $81bb	                bne _not_false_token
.81b1	a9 00		lda #$00	                lda <#OC_FALSE
.81b3	a0 10		ldy #$10	                ldy >#OC_FALSE
.81b5	20 bf 82	jsr $82bf	                jsr parser_add_object
.81b8	4c 94 81	jmp $8194	                jmp parser_loop
.81bb					_not_false_token:
.81bb	c9 12		cmp #$12	                cmp #T_NUM_START
.81bd	f0 03		beq $81c2	                beq +
.81bf	4c 9f 82	jmp $829f	                jmp parser_not_num              ; Too far for BRA
.81c2					+
.81c2	64 02		stz $02		                stz tmp1
.81c4	64 03		stz $03		                stz tmp1+1
.81c6	e8		inx		                inx                     ; skip over T_NUM_START TOKEN
.81c7	bd 00 03	lda $0300,x	                lda tkb,x
.81ca	85 00		sta $00		                sta tmp0        ; radix
.81cc	e8		inx		                inx
.81cd	bd 00 03	lda $0300,x	                lda tkb,x
.81d0	a8		tay		                tay             ; we need the length of the string later ...
.81d1	88		dey		                dey             ; ... but we don't need to include the sign
.81d2	e8		inx		                inx             ; Move to token for sign, T_PLUS or T_MINUS
.81d3	bd 00 03	lda $0300,x	                lda tkb,x
.81d6	85 01		sta $01		                sta tmp0+1      ; Just store sign for now
.81d8	e8		inx		                inx
.81d9	a5 00		lda $00		                lda tmp0        ; radix
.81db	c9 0a		cmp #$0a	                cmp #$0a
.81dd	d0 03		bne $81e2	                bne _not_dec
.81df	4c 87 82	jmp $8287	                jmp parser_common_fixnum
.81e2					_not_dec:
.81e2	c9 10		cmp #$10	                cmp #$10
.81e4	d0 6d		bne $8253	                bne _not_hex
.81e6	98		tya		                tya
.81e7	c9 04		cmp #$04	                cmp #$04
.81e9	90 03		bcc $81ee	                bcc _dec_fixnum
.81eb	4c b7 82	jmp $82b7	                jmp function_not_available
.81ee					_dec_fixnum:
.81ee	bd 00 03	lda $0300,x	                lda tkb,x
.81f1	20 e5 83	jsr $83e5	                jsr help_hexascii_to_value
.81f4	10 03		bpl $81f9	                bpl _legal_first_hex_digit
.81f6	4c af 82	jmp $82af	                jmp parser_bad_digit
.81f9					_legal_first_hex_digit:
.81f9	85 03		sta $03		                sta tmp1+1      ; MSB, lower nibble
.81fb	e8		inx		                inx
.81fc	bd 00 03	lda $0300,x	                lda tkb,x
.81ff	c9 82		cmp #$82	                cmp #T_NUM_END
.8201	f0 23		beq $8226	                beq _done_hex
.8203	20 e5 83	jsr $83e5	                jsr help_hexascii_to_value
.8206	10 03		bpl $820b	                bpl _legal_second_hex_digit
.8208	4c af 82	jmp $82af	                jmp parser_bad_digit
.820b					_legal_second_hex_digit:
.820b	0a		asl a		                asl
.820c	0a		asl a		                asl
.820d	0a		asl a		                asl
.820e	0a		asl a		                asl
.820f	05 03		ora $03		                ora tmp1+1      ; MSB, both nibbles
.8211	85 03		sta $03		                sta tmp1+1
.8213	e8		inx		                inx
.8214	bd 00 03	lda $0300,x	                lda tkb,x
.8217	c9 82		cmp #$82	                cmp #T_NUM_END
.8219	f0 0b		beq $8226	                beq _done_hex
.821b	20 e5 83	jsr $83e5	                jsr help_hexascii_to_value
.821e	10 03		bpl $8223	                bpl _legal_third_hex_digit
.8220	4c af 82	jmp $82af	                jmp parser_bad_digit
.8223					_legal_third_hex_digit:
.8223	85 02		sta $02		                sta tmp1        ; LSB, lower nibble, upper is for object tag
.8225	e8		inx		                inx
.8226					_done_hex:
.8226	c0 01		cpy #$01	                cpy #1
.8228	f0 26		beq $8250	                beq _done_hex_shuffle
.822a	c0 02		cpy #$02	                cpy #2
.822c	d0 0e		bne $823c	                bne _shuffle_three_digits
.822e	a5 03		lda $03		                lda tmp1+1      ; $21 for example
.8230	0a		asl a		                asl
.8231	69 80		adc #$80	                adc #$80
.8233	2a		rol a		                rol
.8234	0a		asl a		                asl
.8235	69 80		adc #$80	                adc #$80
.8237	2a		rol a		                rol
.8238	85 03		sta $03		                sta tmp1+1
.823a	80 14		bra $8250	                bra _done_hex_shuffle
.823c					_shuffle_three_digits:
.823c	a5 02		lda $02		                lda tmp1        ; $03
.823e	a8		tay		                tay
.823f	a5 03		lda $03		                lda tmp1+1      ; $21
.8241	29 0f		and #$0f	                and #$0f        ; $01
.8243	85 02		sta $02		                sta tmp1
.8245	a5 03		lda $03		                lda tmp1+1      ; $21
.8247	29 f0		and #$f0	                and #$f0        ; $20
.8249	85 03		sta $03		                sta tmp1+1
.824b	98		tya		                tya             ; $03
.824c	05 03		ora $03		                ora tmp1+1      ; $23
.824e	85 03		sta $03		                sta tmp1+1
.8250					_done_hex_shuffle:
.8250	4c 87 82	jmp $8287	                jmp parser_common_fixnum
.8253					_not_hex:
.8253	c9 02		cmp #$02	                cmp #$02
.8255	d0 28		bne $827f	                bne _not_binary
.8257	98		tya		                tya
.8258	c9 0c		cmp #$0c	                cmp #12
.825a	90 03		bcc $825f	                bcc _bin_fixnum
.825c	4c b7 82	jmp $82b7	                jmp function_not_available
.825f					_bin_fixnum:
.825f					_bin_fixnum_loop:
.825f	bd 00 03	lda $0300,x	                lda tkb,x
.8262	c9 30		cmp #$30	                cmp #'0'
.8264	f0 0b		beq $8271	                beq _legal_bit_char
.8266	c9 31		cmp #$31	                cmp #'1'
.8268	f0 07		beq $8271	                beq _legal_bit_char
.826a	c9 82		cmp #$82	                cmp #T_NUM_END
.826c	f0 0e		beq $827c	                beq _done_bin
.826e	4c af 82	jmp $82af	                jmp parser_bad_digit
.8271					_legal_bit_char:
.8271	29 01		and #$01	                and #$01                ; gives us $00 or $01
.8273	6a		ror a		                ror                     ; push the bit into carry flag
.8274	26 03		rol $03		                rol tmp1+1              ; rotate the carry flag into LSB ...
.8276	26 02		rol $02		                rol tmp1                ; ... and highest bit of tmp1+1 to tmp1
.8278	e8		inx		                inx
.8279	88		dey		                dey
.827a	d0 e3		bne $825f	                bne _bin_fixnum_loop    ; Repeat till we're done
.827c					_done_bin:
.827c	4c 87 82	jmp $8287	                jmp parser_common_fixnum
.827f					_not_binary:
.827f					_illegal_radix:
.827f	48		pha		                pha                             ; save the evil radix
.8280	a9 07		lda #$07	                lda #str_bad_radix
.8282	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.8285	80 1e		bra $82a5	                bra parser_common_panic         ; prints offending byte and LF
.8287					parser_common_fixnum:
.8287	a5 01		lda $01		                lda tmp0+1
.8289	c9 ff		cmp #$ff	                cmp #T_MINUS
.828b	f0 08		beq $8295	                beq _negative_number
.828d	a9 20		lda #$20	                lda #OT_FIXNUM
.828f	05 02		ora $02		                ora tmp1
.8291	85 02		sta $02		                sta tmp1
.8293	80 00		bra $8295	                bra _add_fixnum_to_ast
.8295					_negative_number:
.8295					_add_fixnum_to_ast:
.8295	a5 03		lda $03		                lda tmp1+1
.8297	a4 02		ldy $02		                ldy tmp1
.8299	20 bf 82	jsr $82bf	                jsr parser_add_object
.829c					_num_end:
.829c	4c 94 81	jmp $8194	                jmp parser_loop
.829f					parser_not_num:
.829f					paser_bad_token:
.829f	48		pha		                pha                             ; save the evil token
.82a0	a9 04		lda #$04	                lda #str_bad_token
.82a2	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.82a5					parser_common_panic:
.82a5	68		pla		                pla
.82a6	20 7b 83	jsr $837b	                jsr help_byte_to_ascii          ; print bad token as hex number
.82a9	20 92 83	jsr $8392	                jsr help_emit_lf
.82ac	4c 29 80	jmp $8029	                jmp repl
.82af					parser_bad_digit:
.82af	48		pha		                pha
.82b0	a9 06		lda #$06	                lda #str_bad_number
.82b2	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.82b5	80 ee		bra $82a5	                bra parser_common_panic
.82b7					function_not_available:
.82b7	a9 08		lda #$08	                lda #str_cant_yet
.82b9	20 b4 83	jsr $83b4	                jsr help_print_string
.82bc	4c 29 80	jmp $8029	                jmp repl
.82bf					parser_add_object:
.82bf	da		phx		                phx             ; save index to token buffer
.82c0	5a		phy		                phy             ; save MSB of the object
.82c1	48		pha		                pha             ; save LSB of the object
.82c2	a5 12		lda $12		                lda hp
.82c4	85 00		sta $00		                sta tmp0
.82c6	a5 13		lda $13		                lda hp+1
.82c8	85 01		sta $01		                sta tmp0+1
.82ca	a9 00		lda #$00	                lda <#OC_END
.82cc	a0 00		ldy #$00	                ldy #0
.82ce	91 12		sta ($12),y	                sta (hp),y
.82d0	c8		iny		                iny
.82d1	a9 00		lda #$00	                lda >#OC_END
.82d3	91 12		sta ($12),y	                sta (hp),y
.82d5	c8		iny		                iny
.82d6	68		pla		                pla             ; retrieve LSB
.82d7	91 12		sta ($12),y	                sta (hp),y
.82d9	c8		iny		                iny
.82da	68		pla		                pla             ; retrieve MSB, was in Y
.82db	91 12		sta ($12),y	                sta (hp),y
.82dd	c8		iny		                iny
.82de	a9 00		lda #$00	                lda #0
.82e0	91 12		sta ($12),y	                sta (hp),y
.82e2	c8		iny		                iny
.82e3	91 12		sta ($12),y	                sta (hp),y
.82e5	c8		iny		                iny
.82e6	98		tya		                tya
.82e7	18		clc		                clc
.82e8	65 12		adc $12		                adc hp
.82ea	85 12		sta $12		                sta hp
.82ec	90 02		bcc $82f0	                bcc +
.82ee	e6 13		inc $13		                inc hp+1
.82f0					+
.82f0	a5 00		lda $00		                lda tmp0        ; original LSB of hp
.82f2	aa		tax		                tax             ; We'll need it again in a second
.82f3	92 1c		sta ($1c)	                sta (astp)
.82f5	a0 01		ldy #$01	                ldy #1
.82f7	a5 01		lda $01		                lda tmp0+1      ; original MSB of hp
.82f9	91 1c		sta ($1c),y	                sta (astp),y
.82fb	85 1d		sta $1d		                sta astp+1      ; MSB, was tmp0+1
.82fd	86 1c		stx $1c		                stx astp        ; LSB, was tmp0
.82ff	fa		plx		                plx             ; get back index for token buffer
.8300	60		rts		                rts
=$0000					OC_END   = $0000        ; end of input for AST
=$1fff					OC_TRUE  = $1fff        ; true bool #t, immediate
=$1000					OC_FALSE = $1000        ; false bool #f, immediate
.8301					parser_done:
.8301	a9 00		lda #$00	                lda <#OC_END
.8303	a2 00		ldx #$00	                ldx >#OC_END
.8305	20 bf 82	jsr $82bf	                jsr parser_add_object

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../eval.asm

.8308					eval:
.8308	20 5d 84	jsr $845d	                jsr debug_dump_ast
.830b	20 4b 84	jsr $844b	                jsr debug_dump_hp
.830e					eval_done:

;******  Return to file: platforms/../cthulhu.asm


;******  Processing file: platforms/../printer.asm

.830e					printer:
.830e	a5 1a		lda $1a		                lda ast
.8310	85 02		sta $02		                sta tmp1
.8312	a5 1b		lda $1b		                lda ast+1
.8314	85 03		sta $03		                sta tmp1+1
.8316					printer_loop:
.8316	20 92 83	jsr $8392	                jsr help_emit_lf
.8319	a0 03		ldy #$03	                ldy #3                  ; MSB of the next node entry down ...
.831b	b1 02		lda ($02),y	                lda (tmp1),y            ; ...  which contains the tag nibble
.831d	29 f0		and #$f0	                and #$f0                ; mask all but tag nibble
.831f					_check_for_meta:
.831f	c9 00		cmp #$00	                cmp #OT_META
.8321	d0 07		bne $832a	                bne _not_meta
.8323	12 02		ora ($02)	                ora (tmp1)              ; LSB
.8325	d0 30		bne $8357	                bne printer_error       ; We're in trouble, panic and re-REPL
.8327	4c 78 83	jmp $8378	                jmp printer_done
.832a					_not_meta:
.832a	c9 10		cmp #$10	                cmp #OT_BOOL
.832c	d0 12		bne $8340	                bne _not_bool
.832e	a0 02		ldy #$02	                ldy #2
.8330	b1 02		lda ($02),y	                lda (tmp1),y            ; LSB
.8332	d0 04		bne $8338	                bne _bool_true          ; not a zero means true
.8334	a9 03		lda #$03	                lda #str_false
.8336	80 02		bra $833a	                bra _bool_printer
.8338					_bool_true:
.8338	a9 02		lda #$02	                lda #str_true
.833a					_bool_printer:
.833a	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.833d	4c 6a 83	jmp $836a	                jmp printer_next
.8340					_not_bool:
.8340	c9 20		cmp #$20	                cmp #OT_FIXNUM
.8342	d0 13		bne $8357	                bne _not_fixnum
.8344	a0 03		ldy #$03	                ldy #3          ; tag nibble and high nibble of number
.8346	b1 02		lda ($02),y	                lda (tmp1),y    ; MSB nibble
.8348	29 0f		and #$0f	                and #$0F        ; Mask tab
.834a	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.834d	a0 02		ldy #$02	                ldy #2
.834f	b1 02		lda ($02),y	                lda (tmp1),y    ; LSB
.8351	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.8354	4c 6a 83	jmp $836a	                jmp printer_next
.8357					_not_fixnum:
.8357					printer_error:
.8357	a5 05		lda $05		                lda str_bad_object
.8359	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.835c	a0 01		ldy #$01	                ldy #1
.835e	b1 02		lda ($02),y	                lda (tmp1),y
.8360	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.8363	b2 02		lda ($02)	                lda (tmp1)
.8365	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.8368	80 0e		bra $8378	                bra printer_done
.836a					printer_next:
.836a	b2 02		lda ($02)	                lda (tmp1)              ; LSB of next entry
.836c	aa		tax		                tax
.836d	a0 01		ldy #$01	                ldy #1
.836f	b1 02		lda ($02),y	                lda (tmp1),y            ; MSB of next entry
.8371	85 03		sta $03		                sta tmp1+1
.8373	86 02		stx $02		                stx tmp1
.8375	4c 16 83	jmp $8316	                jmp printer_loop
.8378					printer_done:

;******  Return to file: platforms/../cthulhu.asm

.8378					repl_done:
.8378	4c 29 80	jmp $8029	                jmp repl

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../helpers.asm

.837b					help_byte_to_ascii:
.837b	48		pha		                pha
.837c	4a		lsr a		                lsr             ; convert high nibble first
.837d	4a		lsr a		                lsr
.837e	4a		lsr a		                lsr
.837f	4a		lsr a		                lsr
.8380	20 84 83	jsr $8384	                jsr help_nibble_to_ascii
.8383	68		pla		                pla
.8384					help_nibble_to_ascii:
.8384	29 0f		and #$0f	                and #$0F
.8386	09 30		ora #$30	                ora #'0'
.8388	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.838a	90 02		bcc $838e	                bcc +
.838c	69 06		adc #$06	                adc #$06
.838e	4c 94 83	jmp $8394	+               jmp help_emit_a       ; JSR/RTS
.8391					help_to_lowercase:
.8391	60		rts		                rts
.8392					help_emit_lf:
.8392	a9 0a		lda #$0a	                lda #AscLF
.8394					help_emit_a:
.8394	6c 06 00	jmp ($0006)	                jmp (output)    ; JSR/RTS
.8397					help_key_a:
.8397	6c 08 00	jmp ($0008)	                jmp (input)             ; JSR/RTS
.839a					help_print_string_no_lf:
.839a	0a		asl a		                asl
.839b	a8		tay		                tay
.839c	b9 31 85	lda $8531,y	                lda string_table,y
.839f	85 00		sta $00		                sta tmp0                ; LSB
.83a1	c8		iny		                iny
.83a2	b9 31 85	lda $8531,y	                lda string_table,y
.83a5	85 01		sta $01		                sta tmp0+1              ; MSB
.83a7					help_print_common:
.83a7	a0 00		ldy #$00	                ldy #0
.83a9					_loop:
.83a9	b1 00		lda ($00),y	                lda (tmp0),y
.83ab	f0 06		beq $83b3	                beq _done               ; strings are zero-terminated
.83ad	20 94 83	jsr $8394	                jsr help_emit_a         ; allows vectoring via output
.83b0	c8		iny		                iny
.83b1	80 f6		bra $83a9	                bra _loop
.83b3					_done:
.83b3	60		rts		                rts
.83b4					help_print_string:
.83b4	20 9a 83	jsr $839a	                jsr help_print_string_no_lf
.83b7	a9 0a		lda #$0a	                lda #AscLF              ; we don't use (newline) because of string
.83b9	4c 94 83	jmp $8394	                jmp help_emit_a         ; JSR/RTS
.83bc					help_is_decdigit:
.83bc	c9 30		cmp #$30	                cmp #'0'
.83be	90 07		bcc $83c7	                bcc _below_zero         ; A is < '0'
.83c0	c9 3a		cmp #$3a	                cmp #':'                ; A is >= ':', which is '9'+1
.83c2	b0 02		bcs $83c6	                bcs _above_nine
.83c4	38		sec		                sec
.83c5	60		rts		                rts
.83c6					_above_nine:
.83c6	18		clc		                clc
.83c7					_below_zero:
.83c7	60		rts		                rts
.83c8					help_is_delimiter:
.83c8	20 ce 83	jsr $83ce	                jsr help_is_whitespace
.83cb	b0 00		bcs $83cd	                bcs _delimiter_done
.83cd					_delimiter_done:
.83cd	60		rts		                rts
.83ce					help_is_whitespace:
.83ce	38		sec		                sec             ; default is whitespace
.83cf	c9 20		cmp #$20	                cmp #$20        ; SPACE, assumed to be the most common char
.83d1	f0 11		beq $83e4	                beq _done
.83d3	c9 09		cmp #$09	                cmp #$09        ; TAB, probably the second most common in Scheme
.83d5	f0 0d		beq $83e4	                beq _done
.83d7	c9 0a		cmp #$0a	                cmp #$0A        ; Linefeed, normally ends input but not with Scheme
.83d9	f0 09		beq $83e4	                beq _done
.83db	c9 0d		cmp #$0d	                cmp #$0D        ; Return, normally ends input but not with Scheme
.83dd	f0 05		beq $83e4	                beq _done
.83df	c9 0c		cmp #$0c	                cmp #$0C        ; Page, which is strange, but in the standard
.83e1	f0 01		beq $83e4	                beq _done
.83e3	18		clc		                clc             ; If we end up here, it's not whitespace
.83e4					_done:
.83e4	60		rts		                rts
.83e5					help_hexascii_to_value:
.83e5	20 bc 83	jsr $83bc	                jsr help_is_decdigit
.83e8	90 05		bcc $83ef	                bcc _see_if_letter
.83ea	38		sec		                sec
.83eb	e9 30		sbc #$30	                sbc #'0'
.83ed	80 0f		bra $83fe	                bra _done
.83ef					_see_if_letter:
.83ef	c9 41		cmp #$41	                cmp #'A'        ; lower than 'A' can't be right
.83f1	90 17		bcc $840a	                bcc _error
.83f3	c9 67		cmp #$67	                cmp #'g'        ; 'g' or above can't be right
.83f5	b0 13		bcs $840a	                bcs _error
.83f7	c9 61		cmp #$61	                cmp #'a'
.83f9	90 06		bcc $8401	                bcc _uppercase
.83fb	38		sec		                sec
.83fc	e9 47		sbc #$47	                sbc #71         ; moves 'a' to 10 ($0A)
.83fe					_done:
.83fe	29 0f		and #$0f	                and #$0F        ; paranoid
.8400	60		rts		                rts
.8401					_uppercase:
.8401	c9 47		cmp #$47	                cmp #'G'
.8403	b0 05		bcs $840a	                bcs _error
.8405	38		sec		                sec
.8406	e9 37		sbc #$37	                sbc #55         ; moves 'A' to 10 ($0A)
.8408	80 f4		bra $83fe	                bra _done
.840a					_error:
.840a	a9 80		lda #$80	                lda #$80
.840c	60		rts		                rts

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../native-procedures.asm

.840d					proc_char_whitespace_p:
.840d					proc_newline:
.840d					proc_display:
.840d					proc_read:
.840d					proc_read_char:
.840d					proc_read_line:
.840d					proc_write_char:

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../procedures.asm


;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../debug.asm

.840d					debug_dump_input:
.840d	20 92 83	jsr $8392	                jsr help_emit_lf
.8410	a9 03		lda #$03	                lda #strd_dump_input            ; "Input: "
.8412	20 ca 84	jsr $84ca	                jsr debug_print_string_no_lf
.8415	a2 00		ldx #$00	                ldx #0
.8417					-
.8417	bd 00 02	lda $0200,x	                lda cib,x
.841a	f0 0b		beq $8427	                beq _done
.841c	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.841f	e8		inx		                inx
.8420	a9 20		lda #$20	                lda #' '
.8422	20 94 83	jsr $8394	                jsr help_emit_a
.8425	80 f0		bra $8417	                bra -
.8427					_done:
.8427	4c 7b 83	jmp $837b	                jmp help_byte_to_ascii          ; JSR/RTS
.842a					debug_dump_token:
.842a	20 92 83	jsr $8392	                jsr help_emit_lf
.842d	a9 00		lda #$00	                lda #strd_dump_token            ; "Token: "
.842f	20 ca 84	jsr $84ca	                jsr debug_print_string_no_lf
.8432	a2 00		ldx #$00	                ldx #0
.8434					-
.8434	bd 00 03	lda $0300,x	                lda tkb,x
.8437	c9 00		cmp #$00	                cmp #T_END
.8439	f0 0d		beq $8448	                beq _done
.843b	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.843e	e8		inx		                inx
.843f	a9 20		lda #$20	                lda #' '
.8441	20 94 83	jsr $8394	                jsr help_emit_a
.8444	e4 10		cpx $10		                cpx tkbp
.8446	d0 ec		bne $8434	                bne -
.8448					_done:
.8448	4c 7b 83	jmp $837b	                jmp help_byte_to_ascii          ; JSR/RTS
.844b					debug_dump_hp:
.844b	20 92 83	jsr $8392	                jsr help_emit_lf
.844e	a9 02		lda #$02	                lda #strd_dump_hp               ; "Heap pointer: "
.8450	20 ca 84	jsr $84ca	                jsr debug_print_string_no_lf
.8453	a5 13		lda $13		                lda hp+1
.8455	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.8458	a5 12		lda $12		                lda hp
.845a	4c 7b 83	jmp $837b	                jmp help_byte_to_ascii          ; JSR/RTS
.845d					debug_dump_ast:
.845d	20 92 83	jsr $8392	                jsr help_emit_lf
.8460	a9 01		lda #$01	                lda #strd_dump_ast              ; "AST: "
.8462	20 ca 84	jsr $84ca	                jsr debug_print_string_no_lf
.8465	a5 1b		lda $1b		                lda ast+1
.8467	85 03		sta $03		                sta tmp1+1
.8469	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.846c	a5 1a		lda $1a		                lda ast
.846e	85 02		sta $02		                sta tmp1
.8470	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.8473					_loop:
.8473	a9 20		lda #$20	                lda #' '
.8475	20 94 83	jsr $8394	                jsr help_emit_a
.8478	a0 01		ldy #$01	                ldy #1
.847a	b1 02		lda ($02),y	                lda (tmp1),y
.847c	85 05		sta $05		                sta tmp2+1
.847e	20 7b 83	jsr $837b	                jsr help_byte_to_ascii          ; MSB
.8481	b2 02		lda ($02)	                lda (tmp1)
.8483	85 04		sta $04		                sta tmp2                        ; pointer to next entry, LSB
.8485	20 7b 83	jsr $837b	                jsr help_byte_to_ascii          ; LSB
.8488	a9 3a		lda #$3a	                lda #':'
.848a	20 94 83	jsr $8394	                jsr help_emit_a
.848d	a0 03		ldy #$03	                ldy #3
.848f	b1 02		lda ($02),y	                lda (tmp1),y
.8491	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.8494	a0 02		ldy #$02	                ldy #2
.8496	b1 02		lda ($02),y	                lda (tmp1),y
.8498	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.849b	a9 3a		lda #$3a	                lda #':'
.849d	20 94 83	jsr $8394	                jsr help_emit_a
.84a0	a0 05		ldy #$05	                ldy #5
.84a2	b1 02		lda ($02),y	                lda (tmp1),y
.84a4	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.84a7	a0 04		ldy #$04	                ldy #4
.84a9	b1 02		lda ($02),y	                lda (tmp1),y
.84ab	20 7b 83	jsr $837b	                jsr help_byte_to_ascii
.84ae	a5 04		lda $04		                lda tmp2
.84b0	05 05		ora $05		                ora tmp2+1      ; Cheating: We know that OC_END is 0000
.84b2	f0 0a		beq $84be	                beq _done
.84b4	a5 04		lda $04		                lda tmp2
.84b6	85 02		sta $02		                sta tmp1
.84b8	a5 05		lda $05		                lda tmp2+1
.84ba	85 03		sta $03		                sta tmp1+1
.84bc	80 b5		bra $8473	                bra _loop
.84be					_done:
.84be	60		rts		                rts
.84bf					debug_emit_a:
.84bf	48		pha		                pha
.84c0	20 92 83	jsr $8392	                jsr help_emit_lf
.84c3	68		pla		                pla
.84c4	20 94 83	jsr $8394	                jsr help_emit_a
.84c7	4c 92 83	jmp $8392	                jmp help_emit_lf        ; JSR/RTS
.84ca					debug_print_string_no_lf:
.84ca	0a		asl a		                asl
.84cb	a8		tay		                tay
.84cc	b9 1d 85	lda $851d,y	                lda sd_table,y
.84cf	85 00		sta $00		                sta tmp0                ; LSB
.84d1	c8		iny		                iny
.84d2	b9 1d 85	lda $851d,y	                lda sd_table,y
.84d5	85 01		sta $01		                sta tmp0+1              ; MSB
.84d7					debug_print_common:
.84d7	a0 00		ldy #$00	                ldy #0
.84d9					_loop:
.84d9	b1 00		lda ($00),y	                lda (tmp0),y
.84db	f0 06		beq $84e3	                beq _done               ; strings are zero-terminated
.84dd	20 94 83	jsr $8394	                jsr help_emit_a         ; allows vectoring via output
.84e0	c8		iny		                iny
.84e1	80 f6		bra $84d9	                bra _loop
.84e3					_done:
.84e3	60		rts		                rts
.84e4					debug_print_string:
.84e4	20 ca 84	jsr $84ca	                jsr debug_print_string_no_lf
.84e7	4c 92 83	jmp $8392	                jmp help_emit_lf        ; JSR/RTS
=0					strd_dump_token = 0
=1					strd_dump_ast   = 1
=2					strd_dump_hp    = 2
=3					strd_dump_input = 3
>84ea	54 6f 6b 65 6e 20 42 75		s_dump_token:   .null   "Token Buffer: "
>84f2	66 66 65 72 3a 20 00
>84f9	41 53 54 3a 20 00		s_dump_ast:     .null   "AST: "
>84ff	48 65 61 70 20 70 6f 69		s_dump_hp:      .null   "Heap pointer: "
>8507	6e 74 65 72 3a 20 00
>850e	49 6e 70 75 74 20 42 75		s_dump_input:   .null   "Input Buffer: "
>8516	66 66 65 72 3a 20 00
.851d					sd_table:
>851d	ea 84 f9 84 ff 84 0e 85		        .word s_dump_token, s_dump_ast, s_dump_hp, s_dump_input      ; 0-3

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../definitions.asm

=$03					        AscCC   = $03  ; break (CTRL-c)
=$07					        AscBELL = $07  ; bell sound
=$08					        AscBS   = $08  ; backspace
=$0a					        AscLF   = $0a  ; line feed
=$0d					        AscCR   = $0d  ; carriage return
=$1b					        AscESC  = $1b  ; escape
=$20					        AscSP   = $20  ; space
=$7f					        AscDEL  = $7f  ; delete (CTRL-h)
>0000					tmp0:    .word ?     ; temporary storage, eg printing
>0002					tmp1:    .word ?     ; temporary storage
>0004					tmp2:    .word ?     ; temporary storage
>0006					output:  .word ?     ; output port, addr of routine
>0008					input:   .word ?     ; input port, addr of routine
>000a					ciblen:  .word ?     ; current size of input buffer
>000c					cibp:    .word ?     ; index of current char in input buffer
>000e					tkblen:  .word ?     ; current size of the token buffer
>0010					tkbp:    .word ?     ; index of current token in token buffer
>0012					hp:      .word ?     ; pointer to next free heap entry
>0014					symtbl:  .word ?     ; pointer to first entry in symbol table in heap
>0016					strtbl:  .word ?     ; pointer to first entry in string table in heap
>0018					bnmtbl:  .word ?     ; pointer to first entry in bignum table in heap
>001a					ast      .word ?     ; pointer to root of Abstract Systax Tree (AST)
>001c					astp     .word ?     ; pointer to current entry in AST
>0200					cib:    .fill cib_size          ; current input buffer
>0300					tkb:    .fill tkb_size          ; token buffer
>0400					heap:   .fill heap_size         ; RAM available for heap
=$00					OT_META         = $00    ; used for end of input and other markers
=$10					OT_BOOL         = $10    ; used for #t and #f; immediate
=$20					OT_FIXNUM       = $20    ; used for fixed numbers; immediate
=$30					OT_BIGNUM       = $30    ; used for bignum
=$40					OT_CHAR         = $40    ; used for chars; immediate
=$50					ot_undefined_05 = $50
=$60					ot_undefined_06 = $60
=$70					ot_undefined_07 = $70
=$80					ot_undefined_08 = $80
=$90					ot_undefined_09 = $90
=$a0					ot_undefined_0a = $a0
=$b0					ot_undefined_0b = $b0
=$c0					ot_undefined_0c = $c0
=$d0					ot_undefined_0d = $d0
=$e0					ot_undefined_0e = $e0
=$f0					ot_undefined_0f = $f0

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../headers.asm

.8525					h_newline:
>8525	00 00				        .addr 0000              ; end of header list
>8527	0d 84				        .addr proc_newline
>8529	07				        .byte 7
>852a	6e 65 77 6c 69 6e 65		        .text "newline"

;******  Return to file: platforms/platform-py65mon.asm


;******  Processing file: platforms/../strings.asm

=0					str_unbound    = 0
=1					str_unspec     = 1
=2					str_true       = 2
=3					str_false      = 3
=4					str_bad_token  = 4
=5					str_bad_object = 5
=6					str_bad_number = 6
=7					str_bad_radix  = 7
=8					str_cant_yet   = 8      ; TODO temp during development
=9					str_end_input  = 9
=10					str_chant      = 10
.8531					string_table:
>8531	47 85 5b 85 75 85 78 85		        .word s_unbound, s_unspec, s_true, s_false      ; 0-3
>8539	7b 85 8f 85 aa 85 bd 85		        .word s_bad_token, s_bad_object, s_bad_number, s_bad_radix   ; 4-7
>8541	d1 85 ea 85 07 86		        .word s_cant_yet, s_end_input, s_chant                       ; 8-11
>8547	3b 55 6e 62 6f 75 6e 64		s_unbound:      .null   ";Unbound variable: "           ; REPL input error
>854f	20 76 61 72 69 61 62 6c 65 3a 20 00
>855b	3b 55 6e 73 70 65 63 69		s_unspec:       .null   ";Unspecified return value"     ; used eg with (display)
>8563	66 69 65 64 20 72 65 74 75 72 6e 20 76 61 6c 75
>8573	65 00
>8575	23 74 00			s_true:         .null   "#t"
>8578	23 66 00			s_false:        .null   "#f"
>857b	50 41 4e 49 43 3a 20 42		s_bad_token:    .null   "PANIC: Bad token: $"           ; from parser
>8583	61 64 20 74 6f 6b 65 6e 3a 20 24 00
>858f	50 41 4e 49 43 3a 20 42		s_bad_object:   .null   "PANIC: Bad object in AST: "    ; from printer
>8597	61 64 20 6f 62 6a 65 63 74 20 69 6e 20 41 53 54
>85a7	3a 20 00
>85aa	3b 49 6c 6c 2d 66 6f 72		s_bad_number:   .null   ";Ill-formed number"            ; from lexer
>85b2	6d 65 64 20 6e 75 6d 62 65 72 00
>85bd	50 41 4e 49 43 3a 20 42		s_bad_radix:    .null   "PANIC: Bad radix: $"           ; from parser
>85c5	61 64 20 72 61 64 69 78 3a 20 24 00
>85d1	41 4c 50 48 41 3a 20 43		s_cant_yet      .null   "ALPHA: Can't do that yet"      ; from parser
>85d9	61 6e 27 74 20 64 6f 20 74 68 61 74 20 79 65 74
>85e9	00
>85ea	45 6e 64 20 6f 66 20 69		s_end_input     .null   "End of input stream reached."  ; from reader
>85f2	6e 70 75 74 20 73 74 72 65 61 6d 20 72 65 61 63
>8602	68 65 64 2e 00
>8607	50 68 27 6e 67 6c 75 69		s_chant         .null   "Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn."   ; from reader
>860f	20 6d 67 6c 77 27 6e 61 66 68 20 43 74 68 75 6c
>861f	68 75 20 52 27 6c 79 65 68 20 77 67 61 68 27 6e
>862f	61 67 6c 20 66 68 74 61 67 6e 2e 00
>863b	21 24 25 26 2a 2b 2d 2e		s_extended:     .null "!$%&*+-./:<=>?@^_~"
>8643	2f 3a 3c 3d 3e 3f 40 5e 5f 7e 00

;******  Return to file: platforms/platform-py65mon.asm

>f000					.fill io_size                           ; Save space for the py65mon I/O
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp cthulhu
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_quit:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	43 74 68 75 6c 68 75 20		        .null "Cthulhu Scheme default kernel for py65mon (03. Apr 2020)", Asclf
>f034	53 63 68 65 6d 65 20 64 65 66 61 75 6c 74 20 6b
>f044	65 72 6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f
>f054	6e 20 28 30 33 2e 20 41 70 72 20 32 30 32 30 29
>f064	0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
