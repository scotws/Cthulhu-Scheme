TODO file for Cthulhu Scheme
Scot W. Stevenson <scot.stevenson@gmail.com>
First version: 30. March 2020
This version: 13. May 2020

List of things to do. This file will be superceded by GitHub Issues once the
project is uploaded and slightly more mature.


TO DO SHORT TERM


- Reset Data and 6502 stack when starting REPL
- Get (not #t) working as process with a single operands
- Get (not (not #t)) working for depth tree processing
- Get (+ 1 2 3) working as process with multiple operands
- Process special forms, starting with (quote)
- Move tokenizer from "case" statements to jump table
- Get (quote (#x1 #x2)) working for quoting
- Process procedures, starting with (display) and (+)
- Write a debug procedure to dump the string table


TO DO LONG TERM

- Add SECTION output to test output (nice to have)
- Output as decimal numbers by default
- Accept decimal numbers as input
- REPL: See about adding history buffers once we know how much space we will be
  using
- Write a Python tool that walks through headers.asm and makes sure that the
  jump offset to the exec_table in procedures has the same offset
- Write a debug procedure to dump the symbol table
- Make it so the label map in docs is automatically sorted alphabetically


DONE

2020-05-10 - Rework testing suite so we have SENT-WANT-GOT testing
2020-05-10 - Make two procedure lines like "(newline) (newline)" work 
2020-04-30 - Write a debug procedure to dump the Data Stack 
2020-04-30 - Eval/apply can now handle simple proc like "(newline)"
2020-04-28 - Process each term individually, not by line (compare Racket)
2020-04-28 - Move printer.asm to data stack format
2020-04-28 - Create debug_dump_ds to dump data stack
2020-04-28 - Create Data Stack in Zero Page for Results
2020-04-24 - Process empty list "()" 
2020-04-24 - Get first process working, such as (newline) or (exit)
2020-04-21 - Add pair objects, switch to linked pairs (cons cells) for AST
2020-04-19 - Switch to segmented memory
2020-04-19 - Handle strings (adds internment; string table)
2020-04-15 - Create basic skelton for eval (all self-evaluating anyway)

